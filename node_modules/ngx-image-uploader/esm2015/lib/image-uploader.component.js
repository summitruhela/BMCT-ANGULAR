/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, ViewChild, ElementRef, Renderer, Input, Output, EventEmitter, ChangeDetectorRef, forwardRef, HostListener } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import Cropper from 'cropperjs';
import { ImageUploaderService } from './image-uploader.service';
import { createImage, resizeImage } from './utils';
/** @enum {number} */
const Status = {
    NotSelected: 0,
    Selected: 1,
    Uploading: 2,
    Loading: 3,
    Loaded: 4,
    Error: 5,
};
export { Status };
Status[Status.NotSelected] = "NotSelected";
Status[Status.Selected] = "Selected";
Status[Status.Uploading] = "Uploading";
Status[Status.Loading] = "Loading";
Status[Status.Loaded] = "Loaded";
Status[Status.Error] = "Error";
export class ImageUploaderComponent {
    /**
     * @param {?} renderer
     * @param {?} uploader
     * @param {?} changeDetector
     */
    constructor(renderer, uploader, changeDetector) {
        this.renderer = renderer;
        this.uploader = uploader;
        this.changeDetector = changeDetector;
        this.statusEnum = Status;
        this._status = Status.NotSelected;
        this.thumbnailWidth = 150;
        this.thumbnailHeight = 150;
        this.cropper = undefined;
        this.upload = new EventEmitter();
        this.statusChange = new EventEmitter();
        this.propagateChange = (_) => { };
    }
    /**
     * @return {?}
     */
    get imageThumbnail() {
        return this._imageThumbnail;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set imageThumbnail(value) {
        this._imageThumbnail = value;
        this.propagateChange(this._imageThumbnail);
        if (value !== undefined) {
            this.status = Status.Selected;
        }
        else {
            this.status = Status.NotSelected;
        }
    }
    /**
     * @return {?}
     */
    get errorMessage() {
        return this._errorMessage;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set errorMessage(value) {
        this._errorMessage = value;
        if (value) {
            this.status = Status.Error;
        }
        else {
            this.status = Status.NotSelected;
        }
    }
    /**
     * @return {?}
     */
    get status() {
        return this._status;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set status(value) {
        this._status = value;
        this.statusChange.emit(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value) {
            this.loadAndResize(value);
        }
        else {
            this._imageThumbnail = undefined;
            this.status = Status.NotSelected;
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    /**
     * @return {?}
     */
    registerOnTouched() { }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.options) {
            if (this.options.thumbnailWidth) {
                this.thumbnailWidth = this.options.thumbnailWidth;
            }
            if (this.options.thumbnailHeight) {
                this.thumbnailHeight = this.options.thumbnailHeight;
            }
            if (this.options.resizeOnLoad === undefined) {
                this.options.resizeOnLoad = true;
            }
            if (this.options.autoUpload === undefined) {
                this.options.autoUpload = true;
            }
            if (this.options.cropEnabled === undefined) {
                this.options.cropEnabled = false;
            }
            if (this.options.autoUpload && this.options.cropEnabled) {
                throw new Error('autoUpload and cropEnabled cannot be enabled simultaneously');
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        if (this.options && this.options.cropEnabled && this.imageElement && this.fileToUpload && !this.cropper) {
            this.cropper = new Cropper(this.imageElement.nativeElement, {
                viewMode: 1,
                aspectRatio: this.options.cropAspectRatio ? this.options.cropAspectRatio : null
            });
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.cropper) {
            this.cropper.destroy();
            this.cropper = null;
        }
    }
    /**
     * @param {?} url
     * @return {?}
     */
    loadAndResize(url) {
        this.status = Status.Loading;
        this.uploader.getFile(url, this.options).subscribe(file => {
            if (this.options.resizeOnLoad) {
                // thumbnail
                const /** @type {?} */ result = {
                    file: file,
                    url: URL.createObjectURL(file)
                };
                this.resize(result).then(r => {
                    this._imageThumbnail = r.resized.dataURL;
                    this.status = Status.Loaded;
                });
            }
            else {
                const /** @type {?} */ result = {
                    file: null,
                    url: null
                };
                this.fileToDataURL(file, result).then(r => {
                    this._imageThumbnail = r.dataURL;
                    this.status = Status.Loaded;
                });
            }
        }, error => {
            this.errorMessage = error || 'Error while getting an image';
        });
    }
    /**
     * @return {?}
     */
    onImageClicked() {
        this.renderer.invokeElementMethod(this.fileInputElement.nativeElement, 'click');
    }
    /**
     * @return {?}
     */
    onFileChanged() {
        const /** @type {?} */ file = this.fileInputElement.nativeElement.files[0];
        if (!file) {
            return;
        }
        this.validateAndUpload(file);
    }
    /**
     * @param {?} file
     * @return {?}
     */
    validateAndUpload(file) {
        this.propagateChange(null);
        if (this.options && this.options.allowedImageTypes) {
            if (!this.options.allowedImageTypes.some(allowedType => file.type === allowedType)) {
                this.errorMessage = 'Only these image types are allowed: ' + this.options.allowedImageTypes.join(', ');
                return;
            }
        }
        if (this.options && this.options.maxImageSize) {
            if (file.size > this.options.maxImageSize * 1024 * 1024) {
                this.errorMessage = `Image must not be larger than ${this.options.maxImageSize} MB`;
                return;
            }
        }
        this.fileToUpload = file;
        if (this.options && this.options.autoUpload) {
            this.uploadImage();
        }
        // thumbnail
        const /** @type {?} */ result = {
            file: file,
            url: URL.createObjectURL(file)
        };
        this.resize(result).then(r => {
            this._imageThumbnail = r.resized.dataURL;
            this.origImageWidth = r.width;
            this.orgiImageHeight = r.height;
            if (this.options && !this.options.autoUpload) {
                this.status = Status.Selected;
            }
        });
    }
    /**
     * @return {?}
     */
    uploadImage() {
        this.progress = 0;
        this.status = Status.Uploading;
        let /** @type {?} */ cropOptions;
        if (this.cropper) {
            const /** @type {?} */ scale = this.origImageWidth / this.cropper.getImageData().naturalWidth;
            const /** @type {?} */ cropData = this.cropper.getData();
            cropOptions = {
                x: Math.round(cropData.x * scale),
                y: Math.round(cropData.y * scale),
                width: Math.round(cropData.width * scale),
                height: Math.round(cropData.height * scale)
            };
        }
        // const queueObj = this.uploader.uploadFile(this.fileToUpload, this.options, cropOptions);
        // file progress
        this.uploader.uploadFile(this.fileToUpload, this.options, cropOptions).subscribe(file => {
            this.progress = file.progress;
            if (file.isError()) {
                if (file.response.status || file.response.statusText) {
                    this.errorMessage = `${file.response.status}: ${file.response.statusText}`;
                }
                else {
                    this.errorMessage = 'Error while uploading';
                }
                // on some upload errors change detection does not work, so we are forcing manually
                this.changeDetector.detectChanges();
            }
            if (!file.inProgress()) {
                // notify that value was changed only when image was uploaded and no error
                if (file.isSuccess()) {
                    this.propagateChange(this._imageThumbnail);
                    this.status = Status.Selected;
                    this.fileToUpload = undefined;
                }
                this.upload.emit(file);
            }
        });
    }
    /**
     * @return {?}
     */
    removeImage() {
        this.fileInputElement.nativeElement.value = null;
        this.imageThumbnail = undefined;
        if (this.cropper) {
            this.cropper.destroy();
            this.cropper = null;
        }
    }
    /**
     * @return {?}
     */
    dismissError() {
        this.errorMessage = undefined;
        this.removeImage();
    }
    /**
     * @param {?} e
     * @return {?}
     */
    drop(e) {
        e.preventDefault();
        e.stopPropagation();
        if (!e.dataTransfer || !e.dataTransfer.files.length) {
            return;
        }
        this.validateAndUpload(e.dataTransfer.files[0]);
        this.updateDragOverlayStyles(false);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    dragenter(e) {
        e.preventDefault();
        e.stopPropagation();
    }
    /**
     * @param {?} e
     * @return {?}
     */
    dragover(e) {
        e.preventDefault();
        e.stopPropagation();
        this.updateDragOverlayStyles(true);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    dragleave(e) {
        e.preventDefault();
        e.stopPropagation();
        this.updateDragOverlayStyles(false);
    }
    /**
     * @param {?} isDragOver
     * @return {?}
     */
    updateDragOverlayStyles(isDragOver) {
        // TODO: find a way that does not trigger dragleave when displaying overlay
        // if (isDragOver) {
        //  this.renderer.setElementStyle(this.dragOverlayElement.nativeElement, 'display', 'block');
        // } else {
        //  this.renderer.setElementStyle(this.dragOverlayElement.nativeElement, 'display', 'none');
        // }
    }
    /**
     * @param {?} result
     * @return {?}
     */
    resize(result) {
        const /** @type {?} */ resizeOptions = {
            resizeHeight: this.thumbnailHeight,
            resizeWidth: this.thumbnailWidth,
            resizeType: result.file.type,
            resizeMode: this.options.thumbnailResizeMode
        };
        return new Promise((resolve) => {
            createImage(result.url, image => {
                const /** @type {?} */ dataUrl = resizeImage(image, resizeOptions);
                result.width = image.width;
                result.height = image.height;
                result.resized = {
                    dataURL: dataUrl,
                    type: this.getType(dataUrl)
                };
                resolve(result);
            });
        });
    }
    /**
     * @param {?} dataUrl
     * @return {?}
     */
    getType(dataUrl) {
        return dataUrl.match(/:(.+\/.+;)/)[1];
    }
    /**
     * @param {?} file
     * @param {?} result
     * @return {?}
     */
    fileToDataURL(file, result) {
        return new Promise((resolve) => {
            const /** @type {?} */ reader = new FileReader();
            reader.onload = function (e) {
                result.dataURL = reader.result;
                resolve(result);
            };
            reader.readAsDataURL(file);
        });
    }
}
ImageUploaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-image-uploader',
                template: `<div class="image-container">
  <div class="match-parent" [ngSwitch]="status">

    <div class="match-parent" *ngSwitchCase="statusEnum.NotSelected">
      <button type="button" class="add-image-btn" (click)="onImageClicked()">
          <div>
            <p class="plus">+</p>
            <p>Click here to add image</p>
            <p>Or drop image here</p>
          </div>
      </button>
    </div>

    <div class="selected-status-wrapper match-parent" *ngSwitchCase="statusEnum.Loaded">
      <img [src]="imageThumbnail" #imageElement>

      <button type="button" class="remove" (click)="removeImage()">×</button>
    </div>

    <div class="selected-status-wrapper match-parent" *ngSwitchCase="statusEnum.Selected">
      <img [src]="imageThumbnail" #imageElement>

      <button type="button" class="remove" (click)="removeImage()">×</button>
    </div>

    <div *ngSwitchCase="statusEnum.Uploading">
      <img [attr.src]="imageThumbnail ? imageThumbnail : null" (click)="onImageClicked()">

      <div class="progress-bar">
        <div class="bar" [style.width]="progress+'%'"></div>
      </div>
    </div>

    <div class="match-parent" *ngSwitchCase="statusEnum.Loading">
      <div class="sk-fading-circle">
        <div class="sk-circle1 sk-circle"></div>
        <div class="sk-circle2 sk-circle"></div>
        <div class="sk-circle3 sk-circle"></div>
        <div class="sk-circle4 sk-circle"></div>
        <div class="sk-circle5 sk-circle"></div>
        <div class="sk-circle6 sk-circle"></div>
        <div class="sk-circle7 sk-circle"></div>
        <div class="sk-circle8 sk-circle"></div>
        <div class="sk-circle9 sk-circle"></div>
        <div class="sk-circle10 sk-circle"></div>
        <div class="sk-circle11 sk-circle"></div>
        <div class="sk-circle12 sk-circle"></div>
      </div>
    </div>

    <div class="match-parent" *ngSwitchCase="statusEnum.Error">
      <div class="error">
        <div class="error-message">
          <p>{{errorMessage}}</p>
        </div>
        <button type="button" class="remove" (click)="dismissError()">×</button>
      </div>
    </div>
  </div>

  <input type="file" #fileInput (change)="onFileChanged()">
  <div class="drag-overlay" [hidden]="true" #dragOverlay></div>
</div>
`,
                styles: [`:host{display:block}.match-parent{width:100%;height:100%}.add-image-btn{width:100%;height:100%;font-weight:700;opacity:.5;border:0}.add-image-btn:hover{opacity:.7;cursor:pointer;background-color:#ddd;box-shadow:inset 0 0 5px rgba(0,0,0,.3)}.add-image-btn .plus{font-size:30px;font-weight:400;margin-bottom:5px;margin-top:5px}img{cursor:pointer;position:absolute;top:50%;left:50%;margin-right:-50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);max-width:100%}.image-container{width:100%;height:100%;position:relative;display:inline-block;background-color:#f1f1f1;box-shadow:inset 0 0 5px rgba(0,0,0,.2)}.remove{position:absolute;top:0;right:0;width:40px;height:40px;font-size:25px;text-align:center;opacity:.8;border:0;cursor:pointer}.selected-status-wrapper>.remove:hover{opacity:.7;background-color:#fff}.error .remove{opacity:.5}.error .remove:hover{opacity:.7}input{display:none}.error{width:100%;height:100%;border:1px solid #e3a5a2;color:#d2706b;background-color:#fbf1f0;position:relative;text-align:center;display:flex;align-items:center}.error-message{width:100%;line-height:18px}.progress-bar{position:absolute;bottom:10%;left:10%;width:80%;height:5px;background-color:grey;opacity:.9;overflow:hidden}.bar{position:absolute;height:100%;background-color:#a4c639}.drag-overlay{position:absolute;top:0;left:0;width:100%;height:100%;background-color:#ff0;opacity:.3}.sk-fading-circle{width:40px;height:40px;position:relative;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}.sk-fading-circle .sk-circle{width:100%;height:100%;position:absolute;left:0;top:0}.sk-fading-circle .sk-circle:before{content:'';display:block;margin:0 auto;width:15%;height:15%;background-color:#333;border-radius:100%;-webkit-animation:1.2s ease-in-out infinite both sk-circleFadeDelay;animation:1.2s ease-in-out infinite both sk-circleFadeDelay}.sk-fading-circle .sk-circle2{-webkit-transform:rotate(30deg);transform:rotate(30deg)}.sk-fading-circle .sk-circle3{-webkit-transform:rotate(60deg);transform:rotate(60deg)}.sk-fading-circle .sk-circle4{-webkit-transform:rotate(90deg);transform:rotate(90deg)}.sk-fading-circle .sk-circle5{-webkit-transform:rotate(120deg);transform:rotate(120deg)}.sk-fading-circle .sk-circle6{-webkit-transform:rotate(150deg);transform:rotate(150deg)}.sk-fading-circle .sk-circle7{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.sk-fading-circle .sk-circle8{-webkit-transform:rotate(210deg);transform:rotate(210deg)}.sk-fading-circle .sk-circle9{-webkit-transform:rotate(240deg);transform:rotate(240deg)}.sk-fading-circle .sk-circle10{-webkit-transform:rotate(270deg);transform:rotate(270deg)}.sk-fading-circle .sk-circle11{-webkit-transform:rotate(300deg);transform:rotate(300deg)}.sk-fading-circle .sk-circle12{-webkit-transform:rotate(330deg);transform:rotate(330deg)}.sk-fading-circle .sk-circle2:before{-webkit-animation-delay:-1.1s;animation-delay:-1.1s}.sk-fading-circle .sk-circle3:before{-webkit-animation-delay:-1s;animation-delay:-1s}.sk-fading-circle .sk-circle4:before{-webkit-animation-delay:-.9s;animation-delay:-.9s}.sk-fading-circle .sk-circle5:before{-webkit-animation-delay:-.8s;animation-delay:-.8s}.sk-fading-circle .sk-circle6:before{-webkit-animation-delay:-.7s;animation-delay:-.7s}.sk-fading-circle .sk-circle7:before{-webkit-animation-delay:-.6s;animation-delay:-.6s}.sk-fading-circle .sk-circle8:before{-webkit-animation-delay:-.5s;animation-delay:-.5s}.sk-fading-circle .sk-circle9:before{-webkit-animation-delay:-.4s;animation-delay:-.4s}.sk-fading-circle .sk-circle10:before{-webkit-animation-delay:-.3s;animation-delay:-.3s}.sk-fading-circle .sk-circle11:before{-webkit-animation-delay:-.2s;animation-delay:-.2s}.sk-fading-circle .sk-circle12:before{-webkit-animation-delay:-.1s;animation-delay:-.1s}@-webkit-keyframes sk-circleFadeDelay{0%,100%,39%{opacity:0}40%{opacity:1}}@keyframes sk-circleFadeDelay{0%,100%,39%{opacity:0}40%{opacity:1}}`],
                host: {
                    '[style.width]': 'thumbnailWidth + "px"',
                    '[style.height]': 'thumbnailHeight + "px"'
                },
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => ImageUploaderComponent),
                        multi: true
                    }
                ]
            },] },
];
/** @nocollapse */
ImageUploaderComponent.ctorParameters = () => [
    { type: Renderer, },
    { type: ImageUploaderService, },
    { type: ChangeDetectorRef, },
];
ImageUploaderComponent.propDecorators = {
    "imageElement": [{ type: ViewChild, args: ['imageElement',] },],
    "fileInputElement": [{ type: ViewChild, args: ['fileInput',] },],
    "dragOverlayElement": [{ type: ViewChild, args: ['dragOverlay',] },],
    "options": [{ type: Input },],
    "upload": [{ type: Output },],
    "statusChange": [{ type: Output },],
    "drop": [{ type: HostListener, args: ['drop', ['$event'],] },],
    "dragenter": [{ type: HostListener, args: ['dragenter', ['$event'],] },],
    "dragover": [{ type: HostListener, args: ['dragover', ['$event'],] },],
    "dragleave": [{ type: HostListener, args: ['dragleave', ['$event'],] },],
};
function ImageUploaderComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    ImageUploaderComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    ImageUploaderComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    ImageUploaderComponent.propDecorators;
    /** @type {?} */
    ImageUploaderComponent.prototype.statusEnum;
    /** @type {?} */
    ImageUploaderComponent.prototype._status;
    /** @type {?} */
    ImageUploaderComponent.prototype.thumbnailWidth;
    /** @type {?} */
    ImageUploaderComponent.prototype.thumbnailHeight;
    /** @type {?} */
    ImageUploaderComponent.prototype._imageThumbnail;
    /** @type {?} */
    ImageUploaderComponent.prototype._errorMessage;
    /** @type {?} */
    ImageUploaderComponent.prototype.progress;
    /** @type {?} */
    ImageUploaderComponent.prototype.origImageWidth;
    /** @type {?} */
    ImageUploaderComponent.prototype.orgiImageHeight;
    /** @type {?} */
    ImageUploaderComponent.prototype.cropper;
    /** @type {?} */
    ImageUploaderComponent.prototype.fileToUpload;
    /** @type {?} */
    ImageUploaderComponent.prototype.imageElement;
    /** @type {?} */
    ImageUploaderComponent.prototype.fileInputElement;
    /** @type {?} */
    ImageUploaderComponent.prototype.dragOverlayElement;
    /** @type {?} */
    ImageUploaderComponent.prototype.options;
    /** @type {?} */
    ImageUploaderComponent.prototype.upload;
    /** @type {?} */
    ImageUploaderComponent.prototype.statusChange;
    /** @type {?} */
    ImageUploaderComponent.prototype.propagateChange;
    /** @type {?} */
    ImageUploaderComponent.prototype.renderer;
    /** @type {?} */
    ImageUploaderComponent.prototype.uploader;
    /** @type {?} */
    ImageUploaderComponent.prototype.changeDetector;
}

//# sourceMappingURL=data:application/json;base64,