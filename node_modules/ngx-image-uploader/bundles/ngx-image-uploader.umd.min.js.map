{"version":3,"sources":["ng://ngx-image-uploader/lib/file-queue-object.ts","ng://ngx-image-uploader/lib/image-uploader.service.ts","ng://ngx-image-uploader/lib/utils.ts","ng://ngx-image-uploader/lib/image-uploader.component.ts","ng://ngx-image-uploader/lib/image-uploader.module.ts"],"names":["FileQueueObject","file","_this","this","FileQueueStatus","Pending","status","Success","Error","Progress","ImageUploaderService","http","prototype","uploadFile","options","cropOptions","setDefaults","form","FormData","append","fieldName","name","x","toString","y","width","height","req","HttpRequest","uploadUrl","reportProgress","withCredentials","headers","_buildHeaders","Observable","create","obs","queueObj","request","subscribe","event","type","HttpEventType","UploadProgress","_uploadProgress","next","HttpResponse","_uploadComplete","complete","err","error","_uploadFailed","getFile","url","observer","HttpHeaders","authToken","authTokenPrefix","get","responseType","res","File","customHeaders","Object","keys","forEach","key","progress","Math","round","loaded","total","response","httpMethod","Injectable","args","providedIn","HttpClient","resizeAreaId","resizeImage","origImage","_a","resizeArea","_b","resizeHeight","resizeWidth","_c","resizeQuality","_d","resizeType","_e","resizeMode","canvas","document","getElementById","createElement","id","style","display","body","appendChild","offsetX","offsetY","getContext","drawImage","toDataURL","ImageUploaderComponent","renderer","uploader","changeDetector","Status","NotSelected","undefined","EventEmitter","_","defineProperty","_imageThumbnail","value","propagateChange","Selected","_errorMessage","_status","statusChange","emit","writeValue","loadAndResize","registerOnChange","fn","registerOnTouched","ngOnInit","thumbnailWidth","thumbnailHeight","resizeOnLoad","autoUpload","cropEnabled","ngAfterViewChecked","imageElement","fileToUpload","cropper","Cropper","nativeElement","viewMode","aspectRatio","cropAspectRatio","ngOnDestroy","destroy","Loading","result","URL","createObjectURL","resize","then","r","resized","dataURL","Loaded","fileToDataURL","errorMessage","onImageClicked","invokeElementMethod","fileInputElement","onFileChanged","files","validateAndUpload","allowedImageTypes","some","allowedType","join","maxImageSize","size","uploadImage","origImageWidth","orgiImageHeight","Uploading","scale","getImageData","naturalWidth","cropData","getData","isError","statusText","detectChanges","inProgress","isSuccess","upload","removeImage","imageThumbnail","dismissError","drop","e","preventDefault","stopPropagation","dataTransfer","length","updateDragOverlayStyles","dragenter","dragover","dragleave","isDragOver","resizeOptions","thumbnailResizeMode","Promise","resolve","cb","image","dataUrl","getType","Image","onload","src","match","reader","FileReader","readAsDataURL","Component","selector","template","styles","host","[style.width]","[style.height]","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","Renderer","ChangeDetectorRef","ViewChild","Input","Output","HostListener","ImageUploaderModule","NgModule","imports","CommonModule","HttpClientModule","declarations","exports"],"mappings":"gtBAGA,IAEAA,EAOE,SAAYC,GAAZ,IAAAC,EAAAC,iBALiCC,EAAgBC,sBACvB,eACK,mBAC0B,oBAYtC,WAAM,OAAAH,EAAKI,SAAWF,EAAgBC,wBACtC,WAAM,OAAAH,EAAKI,SAAWF,EAAgBG,sBACxC,WAAM,OAAAL,EAAKI,SAAWF,EAAgBI,uBACnC,WAAM,OAAAN,EAAKI,SAAWF,EAAgBK,4BACpC,WAAM,OAAAP,EAAKI,SAAWF,EAAgBC,SAAWH,EAAKI,SAAWF,EAAgBI,OAbrGL,KAAKF,KAAOA,GCbhBS,EAAA,WAaE,SAAAA,EAAoBC,GAAAR,KAAAQ,KAAAA,SAEpBD,EAAAE,UAAAC,WAAA,SAAWZ,EAAYa,EAA8BC,GAArD,IAAAb,EAAAC,KACEA,KAAKa,YAAYF,GAEjB,IAAMG,EAAO,IAAIC,SACjBD,EAAKE,OAAOL,EAAQM,UAAWnB,EAAMA,EAAKoB,MAEtCN,IACFE,EAAKE,OAAO,IAAKJ,EAAYO,EAAEC,YAC/BN,EAAKE,OAAO,IAAKJ,EAAYS,EAAED,YAC/BN,EAAKE,OAAO,QAASJ,EAAYU,MAAMF,YACvCN,EAAKE,OAAO,SAAUJ,EAAYW,OAAOH,aAI3C,IAAMI,EAAM,IAAIC,EAAAA,YAAY,OAAQd,EAAQe,UAAWZ,EAAM,CAC3Da,gBAAgB,EAChBC,gBAAiBjB,EAAQiB,gBACzBC,QAAS7B,KAAK8B,cAAcnB,KAG9B,OAAOoB,EAAAA,WAAWC,OAAO,SAAAC,GACvB,IAAMC,EAAW,IAAIrC,EAAgBC,GAErCoC,EAASC,QAAUpC,EAAKS,KAAK2B,QAAQX,GAAKY,UACxC,SAACC,GACKA,EAAMC,OAASC,EAAAA,cAAcC,gBAC/BzC,EAAK0C,gBAAgBP,EAAUG,GAC/BJ,EAAIS,KAAKR,IACAG,aAAiBM,EAAAA,eAC1B5C,EAAK6C,gBAAgBV,EAAUG,GAC/BJ,EAAIS,KAAKR,GACTD,EAAIY,aAGR,SAACC,GACKA,EAAIC,MAAiB1C,MAEvBN,EAAKiD,cAAcd,EAAUY,GAC7Bb,EAAIS,KAAKR,GACTD,EAAIY,gBAYdtC,EAAAE,UAAAwC,QAAA,SAAQC,EAAavC,GAArB,IAAAZ,EAAAC,KACE,OAAO+B,EAAAA,WAAWC,OAAO,SAACmB,GACxB,IAAItB,EAAU,IAAIuB,EAAAA,YAEdzC,EAAQ0C,YACVxB,EAAUA,EAAQb,OAAO,gBAAoBL,EAAQ2C,gBAAe,IAAI3C,EAAQ0C,YAGlFtD,EAAKS,KAAK+C,IAAIL,EAAK,CAAEM,aAAc,OAAQ3B,QAASA,IAAUO,UAAU,SAAAqB,GACtE,IAAM3D,EAAO,IAAI4D,KAAK,CAACD,GAAM,WAAY,CAAEnB,KAAMmB,EAAInB,OACrDa,EAAST,KAAK5C,GACdqD,EAASN,YACR,SAAAC,GACDK,EAASJ,MAAMD,EAAI3C,QACnBgD,EAASN,gBAKPtC,EAAAE,UAAAqB,uBAAcnB,GACpB,IAAIkB,EAAU,IAAIuB,EAAAA,YAYlB,OAVIzC,EAAQ0C,YACVxB,EAAUA,EAAQb,OAAO,gBAAoBL,EAAQ2C,gBAAe,IAAI3C,EAAQ0C,YAG9E1C,EAAQgD,eACVC,OAAOC,KAAKlD,EAAQgD,eAAeG,QAAQ,SAACC,GAC1ClC,EAAUA,EAAQb,OAAO+C,EAAKpD,EAAQgD,cAAcI,MAIjDlC,GAGDtB,EAAAE,UAAAgC,yBAAgBP,EAA2BG,GAEjD,IAAM2B,EAAWC,KAAKC,MAAM,IAAM7B,EAAM8B,OAAS9B,EAAM+B,OACvDlC,EAAS8B,SAAWA,EACpB9B,EAAS/B,OAASF,EAAgBK,UAI5BC,EAAAE,UAAAmC,yBAAgBV,EAA2BmC,GAEjDnC,EAAS8B,SAAW,IACpB9B,EAAS/B,OAASF,EAAgBG,QAClC8B,EAASmC,SAAWA,GAKd9D,EAAAE,UAAAuC,uBAAcd,EAA2BmC,GAE/CnC,EAAS8B,SAAW,EACpB9B,EAAS/B,OAASF,EAAgBI,MAClC6B,EAASmC,SAAWA,GAId9D,EAAAE,UAAAI,qBAAYF,GAClBA,EAAQiB,gBAAkBjB,EAAQiB,kBAAmB,EACrDjB,EAAQ2D,WAAa3D,EAAQ2D,YAAc,OAC3C3D,EAAQ2C,gBAAkB3C,EAAQ2C,iBAAmB,SACrD3C,EAAQM,UAAYN,EAAQM,WAAa,4BA1H5CsD,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAPLC,EAAAA,2IAFT,GCUA,IAAMC,EAAe,0BAcrB,SAAAC,EAA4BC,EAA6BC,OAXnDC,EAWmDC,OAAA,IAAAF,EAAA,GAAAA,EACvDG,EAAAD,EAAAC,aACAC,EAAAF,EAAAE,YACAC,EAAAH,EAAAI,cAAAA,OAAA,IAAAD,EAAA,GAAAA,EACAE,EAAAL,EAAAM,WAAAA,OAAA,IAAAD,EAAA,aAAAA,EACAE,EAAAP,EAAAQ,WAAAA,OAAA,IAAAD,EAAA,OAAAA,EAGME,IAnBFV,EAAaW,SAASC,eAAehB,OAEvCI,EAAaW,SAASE,cAAc,WACzBC,GAAKlB,EAChBI,EAAWe,MAAMC,QAAU,OAC3BL,SAASM,KAAKC,YAAYlB,IAG5B,GAaIxD,EAASsD,EAAUtD,OACnBD,EAAQuD,EAAUvD,MAClB4E,EAAU,EACVC,EAAU,EAEd,GAAmB,SAAfX,EAAuB,CAEJN,EAAcD,EAA/B3D,EAAQC,EACVD,EAAQ2C,KAAKC,MAAM3C,EAAS2D,EAAcD,GAE1C1D,EAAS0C,KAAKC,MAAM5C,EAAQ2D,EAAeC,GAG7CO,EAAOnE,MAAQ4D,GAAe5D,EAAQ4D,EAAc5D,EACpDmE,EAAOlE,OAAS0D,GAAgB1D,EAAS0D,EAAe1D,EAExD2E,EAAUrB,EAAUvD,MAAQ,EAAIA,EAAQ,EACxC6E,EAAUtB,EAAUtD,OAAS,EAAIA,EAAS,EAG9BkE,EAAOW,WAAW,MAC1BC,UAAUxB,EAAWqB,EAASC,EAAS7E,EAAOC,EAAQ,EAAG,EAAGkE,EAAOnE,MAAOmE,EAAOlE,YAChF,CAAA,GAAmB,QAAfiE,EAqBT,MAAM,IAAInF,MAAM,uBAAyBmF,GAnB3BjE,EAARD,EACY4D,EAAR5D,IACAC,EAAS0C,KAAKC,MAAM3C,GAAU2D,EAAc5D,GAC5CA,EAAQ4D,GAGCD,EAAT1D,IACAD,EAAQ2C,KAAKC,MAAM5C,GAAS2D,EAAe1D,GAC3CA,EAAS0D,GAIjBQ,EAAOnE,MAAQA,EACfmE,EAAOlE,OAASA,EAGJkE,EAAOW,WAAW,MAC1BC,UAAUxB,EAAW,EAAG,EAAGvD,EAAOC,GAM1C,OAAOkE,EAAOa,UAAUhB,EAAYF,8OC2CpC,SAAAmB,EACUC,EACAC,EACAC,GAFA1G,KAAAwG,SAAAA,EACAxG,KAAAyG,SAAAA,EACAzG,KAAA0G,eAAAA,kBA1BGC,eACKA,EAAOC,gCAER,yBACC,iBAOCC,sBAO+B,IAAIC,EAAAA,+BACP,IAAIA,EAAAA,kCAEjC,SAACC,YAOnBnD,OAAAoD,eAAIT,EAAA9F,UAAA,iBAAc,KAAlB,WACE,OAAOT,KAAKiH,qBAGd,SAAmBC,GACjBlH,KAAKiH,gBAAkBC,EACvBlH,KAAKmH,gBAAgBnH,KAAKiH,iBAEtBC,IAAUL,UACZ7G,KAAKG,OAASwG,EAAOS,SAErBpH,KAAKG,OAASwG,EAAOC,6CAIzBhD,OAAAoD,eAAIT,EAAA9F,UAAA,eAAY,KAAhB,WACE,OAAOT,KAAKqH,mBAGd,SAAiBH,GACflH,KAAKqH,cAAgBH,EAGnBlH,KAAKG,OADH+G,EACYP,EAAOtG,MAEPsG,EAAOC,6CAIzBhD,OAAAoD,eAAIT,EAAA9F,UAAA,SAAM,KAAV,WACE,OAAOT,KAAKsH,aAGd,SAAWJ,GACTlH,KAAKsH,QAAUJ,EACflH,KAAKuH,aAAaC,KAAKN,oCAGzBX,EAAA9F,UAAAgH,WAAA,SAAWP,GACLA,EACFlH,KAAK0H,cAAcR,IAEnBlH,KAAKiH,gBAAkBJ,UACvB7G,KAAKG,OAASwG,EAAOC,cAIzBL,EAAA9F,UAAAkH,iBAAA,SAAiBC,GACf5H,KAAKmH,gBAAkBS,GAGzBrB,EAAA9F,UAAAoH,kBAAA,aAEAtB,EAAA9F,UAAAqH,SAAA,WACE,GAAI9H,KAAKW,UACHX,KAAKW,QAAQoH,iBACf/H,KAAK+H,eAAiB/H,KAAKW,QAAQoH,gBAEjC/H,KAAKW,QAAQqH,kBACfhI,KAAKgI,gBAAkBhI,KAAKW,QAAQqH,iBAElChI,KAAKW,QAAQsH,eAAiBpB,YAChC7G,KAAKW,QAAQsH,cAAe,GAE1BjI,KAAKW,QAAQuH,aAAerB,YAC9B7G,KAAKW,QAAQuH,YAAa,GAExBlI,KAAKW,QAAQwH,cAAgBtB,YAC/B7G,KAAKW,QAAQwH,aAAc,GAGzBnI,KAAKW,QAAQuH,YAAclI,KAAKW,QAAQwH,aAC1C,MAAM,IAAI9H,MAAM,gEAKtBkG,EAAA9F,UAAA2H,mBAAA,WACMpI,KAAKW,SAAWX,KAAKW,QAAQwH,aAAenI,KAAKqI,cAAgBrI,KAAKsI,eAAiBtI,KAAKuI,UAC9FvI,KAAKuI,QAAU,IAAIC,EAAQxI,KAAKqI,aAAaI,cAAe,CAC1DC,SAAU,EACVC,YAAa3I,KAAKW,QAAQiI,gBAAkB5I,KAAKW,QAAQiI,gBAAkB,SAKjFrC,EAAA9F,UAAAoI,YAAA,WACM7I,KAAKuI,UACPvI,KAAKuI,QAAQO,UACb9I,KAAKuI,QAAU,OAInBhC,EAAA9F,UAAAiH,cAAA,SAAcxE,GAAd,IAAAnD,EAAAC,KACEA,KAAKG,OAASwG,EAAOoC,QAErB/I,KAAKyG,SAASxD,QAAQC,EAAKlD,KAAKW,SAASyB,UAAU,SAAAtC,GACjD,GAAIC,EAAKY,QAAQsH,aAAc,CAE7B,IAAMe,EAAsB,CAC1BlJ,KAAMA,EACNoD,IAAK+F,IAAIC,gBAAgBpJ,IAG3BC,EAAKoJ,OAAOH,GAAQI,KAAK,SAAAC,GACvBtJ,EAAKkH,gBAAkBoC,EAAEC,QAAQC,QACjCxJ,EAAKI,OAASwG,EAAO6C,aAElB,CACCR,EAAsB,CAC1BlJ,KAAM,KACNoD,IAAK,MAGPnD,EAAK0J,cAAc3J,EAAMkJ,GAAQI,KAAK,SAAAC,GACpCtJ,EAAKkH,gBAAkBoC,EAAEE,QACzBxJ,EAAKI,OAASwG,EAAO6C,WAGxB,SAAAzG,GACDhD,EAAK2J,aAAe3G,GAAS,kCAIjCwD,EAAA9F,UAAAkJ,eAAA,WACE3J,KAAKwG,SAASoD,oBAAoB5J,KAAK6J,iBAAiBpB,cAAe,UAGzElC,EAAA9F,UAAAqJ,cAAA,WACE,IAAMhK,EAAOE,KAAK6J,iBAAiBpB,cAAcsB,MAAM,GAClDjK,GAILE,KAAKgK,kBAAkBlK,IAGzByG,EAAA9F,UAAAuJ,kBAAA,SAAkBlK,GAAlB,IAAAC,EAAAC,KAGE,GAFAA,KAAKmH,gBAAgB,MAEjBnH,KAAKW,SAAWX,KAAKW,QAAQsJ,oBAC1BjK,KAAKW,QAAQsJ,kBAAkBC,KAAK,SAAAC,GAAe,OAAArK,EAAKwC,OAAS6H,IACpEnK,KAAK0J,aAAe,uCAAyC1J,KAAKW,QAAQsJ,kBAAkBG,KAAK,WAKrG,GAAIpK,KAAKW,SAAWX,KAAKW,QAAQ0J,cAC3BvK,EAAKwK,KAAmC,KAA5BtK,KAAKW,QAAQ0J,aAAsB,KACjDrK,KAAK0J,aAAe,iCAAiC1J,KAAKW,QAAQ0J,aAAY,UAFlF,CAOArK,KAAKsI,aAAexI,EAEhBE,KAAKW,SAAWX,KAAKW,QAAQuH,YAC/BlI,KAAKuK,cAIP,IAAMvB,EAAsB,CAC1BlJ,KAAMA,EACNoD,IAAK+F,IAAIC,gBAAgBpJ,IAG3BE,KAAKmJ,OAAOH,GAAQI,KAAK,SAAAC,GACvBtJ,EAAKkH,gBAAkBoC,EAAEC,QAAQC,QACjCxJ,EAAKyK,eAAiBnB,EAAE/H,MACxBvB,EAAK0K,gBAAkBpB,EAAE9H,OAErBxB,EAAKY,UAAYZ,EAAKY,QAAQuH,aAChCnI,EAAKI,OAASwG,EAAOS,cAK3Bb,EAAA9F,UAAA8J,YAAA,WAAA,IAIM3J,EAJNb,EAAAC,KAME,GALAA,KAAKgE,SAAW,EAChBhE,KAAKG,OAASwG,EAAO+D,UAIjB1K,KAAKuI,QAAS,CAChB,IAAMoC,EAAQ3K,KAAKwK,eAAiBxK,KAAKuI,QAAQqC,eAAeC,aAC1DC,EAAW9K,KAAKuI,QAAQwC,UAE9BnK,EAAc,CACZO,EAAG8C,KAAKC,MAAM4G,EAAS3J,EAAIwJ,GAC3BtJ,EAAG4C,KAAKC,MAAM4G,EAASzJ,EAAIsJ,GAC3BrJ,MAAO2C,KAAKC,MAAM4G,EAASxJ,MAAQqJ,GACnCpJ,OAAQ0C,KAAKC,MAAM4G,EAASvJ,OAASoJ,IAOzC3K,KAAKyG,SAAS/F,WAAWV,KAAKsI,aAActI,KAAKW,QAASC,GAAawB,UAAU,SAAAtC,GAC/EC,EAAKiE,SAAWlE,EAAKkE,SAEjBlE,EAAKkL,YACHlL,EAAKuE,SAASlE,QAAUL,EAAKuE,SAAS4G,WACxClL,EAAK2J,aAAkB5J,EAAKuE,SAASlE,OAAM,KAAKL,EAAKuE,SAAS4G,WAE9DlL,EAAK2J,aAAe,wBAGtB3J,EAAK2G,eAAewE,iBAGjBpL,EAAKqL,eAEJrL,EAAKsL,cACPrL,EAAKoH,gBAAgBpH,EAAKkH,iBAC1BlH,EAAKI,OAASwG,EAAOS,SACrBrH,EAAKuI,aAAezB,WAGtB9G,EAAKsL,OAAO7D,KAAK1H,OAKvByG,EAAA9F,UAAA6K,YAAA,WACEtL,KAAK6J,iBAAiBpB,cAAcvB,MAAQ,KAC5ClH,KAAKuL,eAAiB1E,UAElB7G,KAAKuI,UACPvI,KAAKuI,QAAQO,UACb9I,KAAKuI,QAAU,OAInBhC,EAAA9F,UAAA+K,aAAA,WACExL,KAAK0J,aAAe7C,UACpB7G,KAAKsL,eAG2B/E,EAAA9F,UAAAgL,cAAKC,GACrCA,EAAEC,iBACFD,EAAEE,kBAEGF,EAAEG,cAAiBH,EAAEG,aAAa9B,MAAM+B,SAI7C9L,KAAKgK,kBAAkB0B,EAAEG,aAAa9B,MAAM,IAC5C/J,KAAK+L,yBAAwB,KAGQxF,EAAA9F,UAAAuL,mBAAUN,GAC/CA,EAAEC,iBACFD,EAAEE,mBAGkCrF,EAAA9F,UAAAwL,kBAASP,GAC7CA,EAAEC,iBACFD,EAAEE,kBACF5L,KAAK+L,yBAAwB,IAGQxF,EAAA9F,UAAAyL,mBAAUR,GAC/CA,EAAEC,iBACFD,EAAEE,kBACF5L,KAAK+L,yBAAwB,IAGvBxF,EAAA9F,UAAAsL,iCAAwBI,KASxB5F,EAAA9F,UAAA0I,gBAAOH,cACPoD,EAA+B,CACnCnH,aAAcjF,KAAKgI,gBACnB9C,YAAalF,KAAK+H,eAClBzC,WAAY0D,EAAOlJ,KAAKwC,KACxBkD,WAAYxF,KAAKW,QAAQ0L,qBAG3B,OAAO,IAAIC,QAAQ,SAACC,GD5ZxB,IAA4BrJ,EAAasJ,EACjCC,EADoBvJ,EC6ZV8F,EAAO9F,ID7ZgBsJ,EC6ZX,SAAAC,GACtB,IAAMC,EAAU9H,EAAY6H,EAAOL,GAEnCpD,EAAO1H,MAAQmL,EAAMnL,MACrB0H,EAAOzH,OAASkL,EAAMlL,OACtByH,EAAOM,QAAU,CACfC,QAASmD,EACTpK,KAAMvC,EAAK4M,QAAQD,IAGrBH,EAAQvD,KDtaRyD,EAAQ,IAAIG,OACZC,OAAS,WACbL,EAAGC,IAELA,EAAMK,IAAM5J,KCuaJqD,EAAA9F,UAAAkM,iBAAQD,GACd,OAAOA,EAAQK,MAAM,cAAc,IAG7BxG,EAAA9F,UAAAgJ,uBAAc3J,EAAYkJ,GAChC,OAAO,IAAIsD,QAAQ,SAACC,GAClB,IAAMS,EAAS,IAAIC,WACnBD,EAAOH,OAAS,SAAUnB,GACxB1C,EAAOO,QAAUyD,EAAOhE,OACxBuD,EAAQvD,IAEVgE,EAAOE,cAAcpN,0BApa1BqN,EAAAA,UAAS3I,KAAA,CAAC,CACT4I,SAAU,qBACVC,SAAU,0xEAgEVC,OAAQ,CAAC,u3HACTC,KAAM,CACJC,gBAAiB,wBACjBC,iBAAkB,0BAEpBC,UAAW,CACT,CACEC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,OAAAvH,IAC9BwH,OAAO,iDA9FXC,EAAAA,gBAKOzN,SALgC0N,EAAAA,2DAiHtCC,EAAAA,UAAS1J,KAAA,CAAC,0CACV0J,EAAAA,UAAS1J,KAAA,CAAC,yCACV0J,EAAAA,UAAS1J,KAAA,CAAC,gCACV2J,EAAAA,sBACAC,EAAAA,6BACAA,EAAAA,qBAwPAC,EAAAA,aAAY7J,KAAA,CAAC,OAAQ,CAAC,8BAYtB6J,EAAAA,aAAY7J,KAAA,CAAC,YAAa,CAAC,6BAK3B6J,EAAAA,aAAY7J,KAAA,CAAC,WAAY,CAAC,8BAM1B6J,EAAAA,aAAY7J,KAAA,CAAC,YAAa,CAAC,mBCvY9B8J,EAAA,oDAMCC,EAAAA,SAAQ/J,KAAA,CAAC,CACRgK,QAAS,CACPC,EAAAA,aACAC,EAAAA,kBAEFC,aAAc,CAACpI,GACfqI,QAAS,CAACrI,SAZZ","sourcesContent":["import { HttpResponse, HttpErrorResponse } from '@angular/common/http';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { FileQueueStatus } from './file-queue-status';\r\n\r\nexport class FileQueueObject {\r\n  public file: any;\r\n  public status: FileQueueStatus = FileQueueStatus.Pending;\r\n  public progress: number = 0;\r\n  public request: Subscription = null;\r\n  public response: HttpResponse<any> | HttpErrorResponse = null;\r\n\r\n  constructor(file: any) {\r\n    this.file = file;\r\n  }\r\n\r\n  // actions\r\n  // public upload = () => { /* set in service */ };\r\n  // public cancel = () => { /* set in service */ };\r\n  // public remove = () => { /* set in service */ };\r\n\r\n  // statuses\r\n  public isPending = () => this.status === FileQueueStatus.Pending;\r\n  public isSuccess = () => this.status === FileQueueStatus.Success;\r\n  public isError = () => this.status === FileQueueStatus.Error;\r\n  public inProgress = () => this.status === FileQueueStatus.Progress;\r\n  public isUploadable = () => this.status === FileQueueStatus.Pending || this.status === FileQueueStatus.Error;\r\n}\r\n","import { Observer, Observable } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpRequest, HttpEventType, HttpResponse, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\n\r\nimport { FileQueueObject } from './file-queue-object';\r\nimport { FileQueueStatus } from './file-queue-status';\r\nimport { FileUploaderOptions, CropOptions } from './interfaces';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ImageUploaderService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  uploadFile(file: File, options: FileUploaderOptions, cropOptions?: CropOptions): Observable<FileQueueObject> {\r\n    this.setDefaults(options);\r\n\r\n    const form = new FormData();\r\n    form.append(options.fieldName, file, file.name);\r\n\r\n    if (cropOptions) {\r\n      form.append('X', cropOptions.x.toString());\r\n      form.append('Y', cropOptions.y.toString());\r\n      form.append('Width', cropOptions.width.toString());\r\n      form.append('Height', cropOptions.height.toString());\r\n    }\r\n\r\n    // upload file and report progress\r\n    const req = new HttpRequest('POST', options.uploadUrl, form, {\r\n      reportProgress: true,\r\n      withCredentials: options.withCredentials,\r\n      headers: this._buildHeaders(options)\r\n    });\r\n\r\n    return Observable.create(obs => {\r\n      const queueObj = new FileQueueObject(file);\r\n\r\n      queueObj.request = this.http.request(req).subscribe(\r\n        (event: any) => {\r\n          if (event.type === HttpEventType.UploadProgress) {\r\n            this._uploadProgress(queueObj, event);\r\n            obs.next(queueObj);\r\n          } else if (event instanceof HttpResponse) {\r\n            this._uploadComplete(queueObj, event);\r\n            obs.next(queueObj);\r\n            obs.complete();\r\n          }\r\n        },\r\n        (err: HttpErrorResponse) => {\r\n          if (err.error instanceof Error) {\r\n            // A client-side or network error occurred. Handle it accordingly.\r\n            this._uploadFailed(queueObj, err);\r\n            obs.next(queueObj);\r\n            obs.complete();\r\n          } else {\r\n            // The backend returned an unsuccessful response code.\r\n            this._uploadFailed(queueObj, err);\r\n            obs.next(queueObj);\r\n            obs.complete();\r\n          }\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  getFile(url: string, options: { authToken?: string, authTokenPrefix?: string }): Observable<File> {\r\n    return Observable.create((observer: Observer<File>) => {\r\n      let headers = new HttpHeaders();\r\n\r\n      if (options.authToken) {\r\n        headers = headers.append('Authorization', `${options.authTokenPrefix} ${options.authToken}`);\r\n      }\r\n\r\n      this.http.get(url, { responseType: 'blob', headers: headers}).subscribe(res => {\r\n        const file = new File([res], 'filename', { type: res.type });\r\n        observer.next(file);\r\n        observer.complete();\r\n      }, err => {\r\n        observer.error(err.status);\r\n        observer.complete();\r\n      });\r\n    });\r\n  }\r\n\r\n  private _buildHeaders(options: FileUploaderOptions): HttpHeaders {\r\n    let headers = new HttpHeaders();\r\n\r\n    if (options.authToken) {\r\n      headers = headers.append('Authorization', `${options.authTokenPrefix} ${options.authToken}`);\r\n    }\r\n\r\n    if (options.customHeaders) {\r\n      Object.keys(options.customHeaders).forEach((key) => {\r\n        headers = headers.append(key, options.customHeaders[key]);\r\n      });\r\n    }\r\n\r\n    return headers;\r\n  }\r\n\r\n  private _uploadProgress(queueObj: FileQueueObject, event: any) {\r\n    // update the FileQueueObject with the current progress\r\n    const progress = Math.round(100 * event.loaded / event.total);\r\n    queueObj.progress = progress;\r\n    queueObj.status = FileQueueStatus.Progress;\r\n    // this._queue.next(this._files);\r\n  }\r\n\r\n  private _uploadComplete(queueObj: FileQueueObject, response: HttpResponse<any>) {\r\n    // update the FileQueueObject as completed\r\n    queueObj.progress = 100;\r\n    queueObj.status = FileQueueStatus.Success;\r\n    queueObj.response = response;\r\n    // this._queue.next(this._files);\r\n    // this.onCompleteItem(queueObj, response.body);\r\n  }\r\n\r\n  private _uploadFailed(queueObj: FileQueueObject, response: HttpErrorResponse) {\r\n    // update the FileQueueObject as errored\r\n    queueObj.progress = 0;\r\n    queueObj.status = FileQueueStatus.Error;\r\n    queueObj.response = response;\r\n    // this._queue.next(this._files);\r\n  }\r\n\r\n  private setDefaults(options: FileUploaderOptions) {\r\n    options.withCredentials = options.withCredentials || false;\r\n    options.httpMethod = options.httpMethod || 'POST';\r\n    options.authTokenPrefix = options.authTokenPrefix || 'Bearer';\r\n    options.fieldName = options.fieldName || 'file';\r\n  }\r\n}\r\n","import {ResizeOptions} from './interfaces';\r\n\r\nexport function createImage(url: string, cb: (i: HTMLImageElement) => void) {\r\n  const image = new Image();\r\n  image.onload = function () {\r\n    cb(image);\r\n  };\r\n  image.src = url;\r\n}\r\n\r\nconst resizeAreaId = 'imageupload-resize-area';\r\n\r\nfunction getResizeArea() {\r\n  let resizeArea = document.getElementById(resizeAreaId);\r\n  if (!resizeArea) {\r\n    resizeArea = document.createElement('canvas');\r\n    resizeArea.id = resizeAreaId;\r\n    resizeArea.style.display = 'none';\r\n    document.body.appendChild(resizeArea);\r\n  }\r\n\r\n  return <HTMLCanvasElement>resizeArea;\r\n}\r\n\r\nexport function resizeImage(origImage: HTMLImageElement, {\r\n  resizeHeight,\r\n  resizeWidth,\r\n  resizeQuality = 0.7,\r\n  resizeType = 'image/jpeg',\r\n  resizeMode = 'fill'\r\n}: ResizeOptions = {}) {\r\n\r\n  const canvas = getResizeArea();\r\n\r\n  let height = origImage.height;\r\n  let width = origImage.width;\r\n  let offsetX = 0;\r\n  let offsetY = 0;\r\n\r\n  if (resizeMode === 'fill') {\r\n    // calculate the width and height, constraining the proportions\r\n    if (width / height > resizeWidth / resizeHeight) {\r\n      width = Math.round(height * resizeWidth / resizeHeight);\r\n    } else {\r\n      height = Math.round(width * resizeHeight / resizeWidth);\r\n    }\r\n\r\n    canvas.width = resizeWidth <= width ? resizeWidth : width;\r\n    canvas.height = resizeHeight <= height ? resizeHeight : height;\r\n\r\n    offsetX = origImage.width / 2 - width / 2;\r\n    offsetY = origImage.height / 2 - height / 2;\r\n\r\n    // draw image on canvas\r\n    const ctx = canvas.getContext('2d');\r\n    ctx.drawImage(origImage, offsetX, offsetY, width, height, 0, 0, canvas.width, canvas.height);\r\n  } else if (resizeMode === 'fit') {\r\n      // calculate the width and height, constraining the proportions\r\n      if (width > height) {\r\n          if (width > resizeWidth) {\r\n              height = Math.round(height *= resizeWidth / width);\r\n              width = resizeWidth;\r\n          }\r\n      } else {\r\n          if (height > resizeHeight) {\r\n              width = Math.round(width *= resizeHeight / height);\r\n              height = resizeHeight;\r\n          }\r\n      }\r\n\r\n      canvas.width = width;\r\n      canvas.height = height;\r\n\r\n      // draw image on canvas\r\n      const ctx = canvas.getContext('2d');\r\n      ctx.drawImage(origImage, 0, 0, width, height);\r\n  } else {\r\n    throw new Error('Unknown resizeMode: ' + resizeMode);\r\n  }\r\n\r\n  // get the data from canvas as 70% jpg (or specified type).\r\n  return canvas.toDataURL(resizeType, resizeQuality);\r\n}\r\n\r\n\r\n","import {\r\n  Component, OnInit, OnDestroy, AfterViewChecked, ViewChild, ElementRef,\r\n  Renderer, Input, Output, EventEmitter, ChangeDetectorRef, forwardRef, HostListener\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport Cropper from 'cropperjs';\r\n\r\nimport { ImageUploaderService } from './image-uploader.service';\r\nimport { ImageUploaderOptions, ImageResult, ResizeOptions, CropOptions } from './interfaces';\r\nimport { createImage, resizeImage } from './utils';\r\nimport { FileQueueObject } from './file-queue-object';\r\n\r\nexport enum Status {\r\n  NotSelected,\r\n  Selected,\r\n  Uploading,\r\n  Loading,\r\n  Loaded,\r\n  Error\r\n}\r\n\r\n@Component({\r\n  selector: 'ngx-image-uploader',\r\n  template: `<div class=\"image-container\">\r\n  <div class=\"match-parent\" [ngSwitch]=\"status\">\r\n\r\n    <div class=\"match-parent\" *ngSwitchCase=\"statusEnum.NotSelected\">\r\n      <button type=\"button\" class=\"add-image-btn\" (click)=\"onImageClicked()\">\r\n          <div>\r\n            <p class=\"plus\">+</p>\r\n            <p>Click here to add image</p>\r\n            <p>Or drop image here</p>\r\n          </div>\r\n      </button>\r\n    </div>\r\n\r\n    <div class=\"selected-status-wrapper match-parent\" *ngSwitchCase=\"statusEnum.Loaded\">\r\n      <img [src]=\"imageThumbnail\" #imageElement>\r\n\r\n      <button type=\"button\" class=\"remove\" (click)=\"removeImage()\">Ã</button>\r\n    </div>\r\n\r\n    <div class=\"selected-status-wrapper match-parent\" *ngSwitchCase=\"statusEnum.Selected\">\r\n      <img [src]=\"imageThumbnail\" #imageElement>\r\n\r\n      <button type=\"button\" class=\"remove\" (click)=\"removeImage()\">Ã</button>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"statusEnum.Uploading\">\r\n      <img [attr.src]=\"imageThumbnail ? imageThumbnail : null\" (click)=\"onImageClicked()\">\r\n\r\n      <div class=\"progress-bar\">\r\n        <div class=\"bar\" [style.width]=\"progress+'%'\"></div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"match-parent\" *ngSwitchCase=\"statusEnum.Loading\">\r\n      <div class=\"sk-fading-circle\">\r\n        <div class=\"sk-circle1 sk-circle\"></div>\r\n        <div class=\"sk-circle2 sk-circle\"></div>\r\n        <div class=\"sk-circle3 sk-circle\"></div>\r\n        <div class=\"sk-circle4 sk-circle\"></div>\r\n        <div class=\"sk-circle5 sk-circle\"></div>\r\n        <div class=\"sk-circle6 sk-circle\"></div>\r\n        <div class=\"sk-circle7 sk-circle\"></div>\r\n        <div class=\"sk-circle8 sk-circle\"></div>\r\n        <div class=\"sk-circle9 sk-circle\"></div>\r\n        <div class=\"sk-circle10 sk-circle\"></div>\r\n        <div class=\"sk-circle11 sk-circle\"></div>\r\n        <div class=\"sk-circle12 sk-circle\"></div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"match-parent\" *ngSwitchCase=\"statusEnum.Error\">\r\n      <div class=\"error\">\r\n        <div class=\"error-message\">\r\n          <p>{{errorMessage}}</p>\r\n        </div>\r\n        <button type=\"button\" class=\"remove\" (click)=\"dismissError()\">Ã</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <input type=\"file\" #fileInput (change)=\"onFileChanged()\">\r\n  <div class=\"drag-overlay\" [hidden]=\"true\" #dragOverlay></div>\r\n</div>\r\n`,\r\n  styles: [`:host{display:block}.match-parent{width:100%;height:100%}.add-image-btn{width:100%;height:100%;font-weight:700;opacity:.5;border:0}.add-image-btn:hover{opacity:.7;cursor:pointer;background-color:#ddd;box-shadow:inset 0 0 5px rgba(0,0,0,.3)}.add-image-btn .plus{font-size:30px;font-weight:400;margin-bottom:5px;margin-top:5px}img{cursor:pointer;position:absolute;top:50%;left:50%;margin-right:-50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);max-width:100%}.image-container{width:100%;height:100%;position:relative;display:inline-block;background-color:#f1f1f1;box-shadow:inset 0 0 5px rgba(0,0,0,.2)}.remove{position:absolute;top:0;right:0;width:40px;height:40px;font-size:25px;text-align:center;opacity:.8;border:0;cursor:pointer}.selected-status-wrapper>.remove:hover{opacity:.7;background-color:#fff}.error .remove{opacity:.5}.error .remove:hover{opacity:.7}input{display:none}.error{width:100%;height:100%;border:1px solid #e3a5a2;color:#d2706b;background-color:#fbf1f0;position:relative;text-align:center;display:flex;align-items:center}.error-message{width:100%;line-height:18px}.progress-bar{position:absolute;bottom:10%;left:10%;width:80%;height:5px;background-color:grey;opacity:.9;overflow:hidden}.bar{position:absolute;height:100%;background-color:#a4c639}.drag-overlay{position:absolute;top:0;left:0;width:100%;height:100%;background-color:#ff0;opacity:.3}.sk-fading-circle{width:40px;height:40px;position:relative;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}.sk-fading-circle .sk-circle{width:100%;height:100%;position:absolute;left:0;top:0}.sk-fading-circle .sk-circle:before{content:'';display:block;margin:0 auto;width:15%;height:15%;background-color:#333;border-radius:100%;-webkit-animation:1.2s ease-in-out infinite both sk-circleFadeDelay;animation:1.2s ease-in-out infinite both sk-circleFadeDelay}.sk-fading-circle .sk-circle2{-webkit-transform:rotate(30deg);transform:rotate(30deg)}.sk-fading-circle .sk-circle3{-webkit-transform:rotate(60deg);transform:rotate(60deg)}.sk-fading-circle .sk-circle4{-webkit-transform:rotate(90deg);transform:rotate(90deg)}.sk-fading-circle .sk-circle5{-webkit-transform:rotate(120deg);transform:rotate(120deg)}.sk-fading-circle .sk-circle6{-webkit-transform:rotate(150deg);transform:rotate(150deg)}.sk-fading-circle .sk-circle7{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.sk-fading-circle .sk-circle8{-webkit-transform:rotate(210deg);transform:rotate(210deg)}.sk-fading-circle .sk-circle9{-webkit-transform:rotate(240deg);transform:rotate(240deg)}.sk-fading-circle .sk-circle10{-webkit-transform:rotate(270deg);transform:rotate(270deg)}.sk-fading-circle .sk-circle11{-webkit-transform:rotate(300deg);transform:rotate(300deg)}.sk-fading-circle .sk-circle12{-webkit-transform:rotate(330deg);transform:rotate(330deg)}.sk-fading-circle .sk-circle2:before{-webkit-animation-delay:-1.1s;animation-delay:-1.1s}.sk-fading-circle .sk-circle3:before{-webkit-animation-delay:-1s;animation-delay:-1s}.sk-fading-circle .sk-circle4:before{-webkit-animation-delay:-.9s;animation-delay:-.9s}.sk-fading-circle .sk-circle5:before{-webkit-animation-delay:-.8s;animation-delay:-.8s}.sk-fading-circle .sk-circle6:before{-webkit-animation-delay:-.7s;animation-delay:-.7s}.sk-fading-circle .sk-circle7:before{-webkit-animation-delay:-.6s;animation-delay:-.6s}.sk-fading-circle .sk-circle8:before{-webkit-animation-delay:-.5s;animation-delay:-.5s}.sk-fading-circle .sk-circle9:before{-webkit-animation-delay:-.4s;animation-delay:-.4s}.sk-fading-circle .sk-circle10:before{-webkit-animation-delay:-.3s;animation-delay:-.3s}.sk-fading-circle .sk-circle11:before{-webkit-animation-delay:-.2s;animation-delay:-.2s}.sk-fading-circle .sk-circle12:before{-webkit-animation-delay:-.1s;animation-delay:-.1s}@-webkit-keyframes sk-circleFadeDelay{0%,100%,39%{opacity:0}40%{opacity:1}}@keyframes sk-circleFadeDelay{0%,100%,39%{opacity:0}40%{opacity:1}}`],\r\n  host: {\r\n    '[style.width]': 'thumbnailWidth + \"px\"',\r\n    '[style.height]': 'thumbnailHeight + \"px\"'\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => ImageUploaderComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class ImageUploaderComponent implements OnInit, OnDestroy, AfterViewChecked, ControlValueAccessor {\r\n  statusEnum = Status;\r\n  _status: Status = Status.NotSelected;\r\n\r\n  thumbnailWidth = 150;\r\n  thumbnailHeight = 150;\r\n  _imageThumbnail: any;\r\n  _errorMessage: string;\r\n  progress: number;\r\n  origImageWidth: number;\r\n  orgiImageHeight: number;\r\n\r\n  cropper: Cropper = undefined;\r\n  fileToUpload: File;\r\n\r\n  @ViewChild('imageElement') imageElement: ElementRef;\r\n  @ViewChild('fileInput') fileInputElement: ElementRef;\r\n  @ViewChild('dragOverlay') dragOverlayElement: ElementRef;\r\n  @Input() options: ImageUploaderOptions;\r\n  @Output() upload: EventEmitter<FileQueueObject> = new EventEmitter<FileQueueObject>();\r\n  @Output() statusChange: EventEmitter<Status> = new EventEmitter<Status>();\r\n\r\n  propagateChange = (_: any) => {};\r\n\r\n  constructor(\r\n    private renderer: Renderer,\r\n    private uploader: ImageUploaderService,\r\n    private changeDetector: ChangeDetectorRef) { }\r\n\r\n  get imageThumbnail() {\r\n    return this._imageThumbnail;\r\n  }\r\n\r\n  set imageThumbnail(value) {\r\n    this._imageThumbnail = value;\r\n    this.propagateChange(this._imageThumbnail);\r\n\r\n    if (value !== undefined) {\r\n      this.status = Status.Selected;\r\n    } else {\r\n      this.status = Status.NotSelected;\r\n    }\r\n  }\r\n\r\n  get errorMessage() {\r\n    return this._errorMessage;\r\n  }\r\n\r\n  set errorMessage(value) {\r\n    this._errorMessage = value;\r\n\r\n    if (value) {\r\n      this.status = Status.Error;\r\n    } else {\r\n      this.status = Status.NotSelected;\r\n    }\r\n  }\r\n\r\n  get status() {\r\n    return this._status;\r\n  }\r\n\r\n  set status(value) {\r\n    this._status = value;\r\n    this.statusChange.emit(value);\r\n  }\r\n\r\n  writeValue(value: any) {\r\n    if (value) {\r\n      this.loadAndResize(value);\r\n    } else {\r\n      this._imageThumbnail = undefined;\r\n      this.status = Status.NotSelected;\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: (_: any) => void) {\r\n    this.propagateChange = fn;\r\n  }\r\n\r\n  registerOnTouched() {}\r\n\r\n  ngOnInit() {\r\n    if (this.options) {\r\n      if (this.options.thumbnailWidth) {\r\n        this.thumbnailWidth = this.options.thumbnailWidth;\r\n      }\r\n      if (this.options.thumbnailHeight) {\r\n        this.thumbnailHeight = this.options.thumbnailHeight;\r\n      }\r\n      if (this.options.resizeOnLoad === undefined) {\r\n        this.options.resizeOnLoad = true;\r\n      }\r\n      if (this.options.autoUpload === undefined) {\r\n        this.options.autoUpload = true;\r\n      }\r\n      if (this.options.cropEnabled === undefined) {\r\n        this.options.cropEnabled = false;\r\n      }\r\n\r\n      if (this.options.autoUpload && this.options.cropEnabled) {\r\n        throw new Error('autoUpload and cropEnabled cannot be enabled simultaneously');\r\n      }\r\n    }\r\n  }\r\n\r\n  ngAfterViewChecked() {\r\n    if (this.options && this.options.cropEnabled && this.imageElement && this.fileToUpload && !this.cropper) {\r\n      this.cropper = new Cropper(this.imageElement.nativeElement, {\r\n        viewMode: 1,\r\n        aspectRatio: this.options.cropAspectRatio ? this.options.cropAspectRatio : null\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.cropper) {\r\n      this.cropper.destroy();\r\n      this.cropper = null;\r\n    }\r\n  }\r\n\r\n  loadAndResize(url: string) {\r\n    this.status = Status.Loading;\r\n\r\n    this.uploader.getFile(url, this.options).subscribe(file => {\r\n      if (this.options.resizeOnLoad) {\r\n        // thumbnail\r\n        const result: ImageResult = {\r\n          file: file,\r\n          url: URL.createObjectURL(file)\r\n        };\r\n\r\n        this.resize(result).then(r => {\r\n          this._imageThumbnail = r.resized.dataURL;\r\n          this.status = Status.Loaded;\r\n        });\r\n      } else {\r\n        const result: ImageResult = {\r\n          file: null,\r\n          url: null\r\n        };\r\n\r\n        this.fileToDataURL(file, result).then(r => {\r\n          this._imageThumbnail = r.dataURL;\r\n          this.status = Status.Loaded;\r\n        });\r\n      }\r\n    }, error => {\r\n      this.errorMessage = error || 'Error while getting an image';\r\n    });\r\n  }\r\n\r\n  onImageClicked() {\r\n    this.renderer.invokeElementMethod(this.fileInputElement.nativeElement, 'click');\r\n  }\r\n\r\n  onFileChanged() {\r\n    const file = this.fileInputElement.nativeElement.files[0];\r\n    if (!file) {\r\n      return;\r\n    }\r\n\r\n    this.validateAndUpload(file);\r\n  }\r\n\r\n  validateAndUpload(file: File) {\r\n    this.propagateChange(null);\r\n\r\n    if (this.options && this.options.allowedImageTypes) {\r\n      if (!this.options.allowedImageTypes.some(allowedType => file.type === allowedType)) {\r\n        this.errorMessage = 'Only these image types are allowed: ' + this.options.allowedImageTypes.join(', ');\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (this.options && this.options.maxImageSize) {\r\n      if (file.size > this.options.maxImageSize * 1024 * 1024) {\r\n        this.errorMessage = `Image must not be larger than ${this.options.maxImageSize} MB`;\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.fileToUpload = file;\r\n\r\n    if (this.options && this.options.autoUpload) {\r\n      this.uploadImage();\r\n    }\r\n\r\n    // thumbnail\r\n    const result: ImageResult = {\r\n      file: file,\r\n      url: URL.createObjectURL(file)\r\n    };\r\n\r\n    this.resize(result).then(r => {\r\n      this._imageThumbnail = r.resized.dataURL;\r\n      this.origImageWidth = r.width;\r\n      this.orgiImageHeight = r.height;\r\n\r\n      if (this.options && !this.options.autoUpload) {\r\n        this.status = Status.Selected;\r\n      }\r\n    });\r\n  }\r\n\r\n  uploadImage() {\r\n    this.progress = 0;\r\n    this.status = Status.Uploading;\r\n\r\n    let cropOptions: CropOptions;\r\n\r\n    if (this.cropper) {\r\n      const scale = this.origImageWidth / this.cropper.getImageData().naturalWidth;\r\n      const cropData = this.cropper.getData();\r\n\r\n      cropOptions = {\r\n        x: Math.round(cropData.x * scale),\r\n        y: Math.round(cropData.y * scale),\r\n        width: Math.round(cropData.width * scale),\r\n        height: Math.round(cropData.height * scale)\r\n      };\r\n    }\r\n\r\n   // const queueObj = this.uploader.uploadFile(this.fileToUpload, this.options, cropOptions);\r\n\r\n    // file progress\r\n    this.uploader.uploadFile(this.fileToUpload, this.options, cropOptions).subscribe(file => {\r\n      this.progress = file.progress;\r\n\r\n      if (file.isError()) {\r\n        if (file.response.status || file.response.statusText) {\r\n          this.errorMessage = `${file.response.status}: ${file.response.statusText}`;\r\n        } else {\r\n          this.errorMessage = 'Error while uploading';\r\n        }\r\n        // on some upload errors change detection does not work, so we are forcing manually\r\n        this.changeDetector.detectChanges();\r\n      }\r\n\r\n      if (!file.inProgress()) {\r\n        // notify that value was changed only when image was uploaded and no error\r\n        if (file.isSuccess()) {\r\n          this.propagateChange(this._imageThumbnail);\r\n          this.status = Status.Selected;\r\n          this.fileToUpload = undefined;\r\n        }\r\n\r\n        this.upload.emit(file);\r\n      }\r\n    });\r\n  }\r\n\r\n  removeImage() {\r\n    this.fileInputElement.nativeElement.value = null;\r\n    this.imageThumbnail = undefined;\r\n\r\n    if (this.cropper) {\r\n      this.cropper.destroy();\r\n      this.cropper = null;\r\n    }\r\n  }\r\n\r\n  dismissError() {\r\n    this.errorMessage = undefined;\r\n    this.removeImage();\r\n  }\r\n\r\n  @HostListener('drop', ['$event']) drop(e: DragEvent) {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n\r\n    if (!e.dataTransfer || !e.dataTransfer.files.length) {\r\n      return;\r\n    }\r\n\r\n    this.validateAndUpload(e.dataTransfer.files[0]);\r\n    this.updateDragOverlayStyles(false);\r\n  }\r\n\r\n  @HostListener('dragenter', ['$event']) dragenter(e: DragEvent) {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n  }\r\n\r\n  @HostListener('dragover', ['$event']) dragover(e: DragEvent) {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    this.updateDragOverlayStyles(true);\r\n  }\r\n\r\n  @HostListener('dragleave', ['$event']) dragleave(e: DragEvent) {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    this.updateDragOverlayStyles(false);\r\n  }\r\n\r\n  private updateDragOverlayStyles(isDragOver: boolean) {\r\n    // TODO: find a way that does not trigger dragleave when displaying overlay\r\n    // if (isDragOver) {\r\n    //  this.renderer.setElementStyle(this.dragOverlayElement.nativeElement, 'display', 'block');\r\n    // } else {\r\n    //  this.renderer.setElementStyle(this.dragOverlayElement.nativeElement, 'display', 'none');\r\n    // }\r\n  }\r\n\r\n  private resize(result: ImageResult): Promise<ImageResult> {\r\n    const resizeOptions: ResizeOptions = {\r\n      resizeHeight: this.thumbnailHeight,\r\n      resizeWidth: this.thumbnailWidth,\r\n      resizeType: result.file.type,\r\n      resizeMode: this.options.thumbnailResizeMode\r\n    };\r\n\r\n    return new Promise((resolve) => {\r\n      createImage(result.url, image => {\r\n        const dataUrl = resizeImage(image, resizeOptions);\r\n\r\n        result.width = image.width;\r\n        result.height = image.height;\r\n        result.resized = {\r\n          dataURL: dataUrl,\r\n          type: this.getType(dataUrl)\r\n        };\r\n\r\n        resolve(result);\r\n      });\r\n    });\r\n  }\r\n\r\n  private getType(dataUrl: string) {\r\n    return dataUrl.match(/:(.+\\/.+;)/)[1];\r\n  }\r\n\r\n  private fileToDataURL(file: File, result: ImageResult): Promise<ImageResult> {\r\n    return new Promise((resolve) => {\r\n      const reader = new FileReader();\r\n      reader.onload = function (e) {\r\n        result.dataURL = reader.result;\r\n        resolve(result);\r\n      };\r\n      reader.readAsDataURL(file);\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\nimport { ImageUploaderComponent } from './image-uploader.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule\r\n  ],\r\n  declarations: [ImageUploaderComponent],\r\n  exports: [ImageUploaderComponent]\r\n})\r\nexport class ImageUploaderModule { }\r\n"]}