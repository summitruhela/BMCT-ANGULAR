/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Observable } from 'rxjs';
import { Injectable } from '@angular/core';
import { HttpClient, HttpRequest, HttpEventType, HttpResponse, HttpHeaders } from '@angular/common/http';
import { FileQueueObject } from './file-queue-object';
import { FileQueueStatus } from './file-queue-status';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
var ImageUploaderService = /** @class */ (function () {
    function ImageUploaderService(http) {
        this.http = http;
    }
    /**
     * @param {?} file
     * @param {?} options
     * @param {?=} cropOptions
     * @return {?}
     */
    ImageUploaderService.prototype.uploadFile = /**
     * @param {?} file
     * @param {?} options
     * @param {?=} cropOptions
     * @return {?}
     */
    function (file, options, cropOptions) {
        var _this = this;
        this.setDefaults(options);
        var /** @type {?} */ form = new FormData();
        form.append(options.fieldName, file, file.name);
        if (cropOptions) {
            form.append('X', cropOptions.x.toString());
            form.append('Y', cropOptions.y.toString());
            form.append('Width', cropOptions.width.toString());
            form.append('Height', cropOptions.height.toString());
        }
        // upload file and report progress
        var /** @type {?} */ req = new HttpRequest('POST', options.uploadUrl, form, {
            reportProgress: true,
            withCredentials: options.withCredentials,
            headers: this._buildHeaders(options)
        });
        return Observable.create(function (obs) {
            var /** @type {?} */ queueObj = new FileQueueObject(file);
            queueObj.request = _this.http.request(req).subscribe(function (event) {
                if (event.type === HttpEventType.UploadProgress) {
                    _this._uploadProgress(queueObj, event);
                    obs.next(queueObj);
                }
                else if (event instanceof HttpResponse) {
                    _this._uploadComplete(queueObj, event);
                    obs.next(queueObj);
                    obs.complete();
                }
            }, function (err) {
                if (err.error instanceof Error) {
                    // A client-side or network error occurred. Handle it accordingly.
                    // A client-side or network error occurred. Handle it accordingly.
                    _this._uploadFailed(queueObj, err);
                    obs.next(queueObj);
                    obs.complete();
                }
                else {
                    // The backend returned an unsuccessful response code.
                    // The backend returned an unsuccessful response code.
                    _this._uploadFailed(queueObj, err);
                    obs.next(queueObj);
                    obs.complete();
                }
            });
        });
    };
    /**
     * @param {?} url
     * @param {?} options
     * @return {?}
     */
    ImageUploaderService.prototype.getFile = /**
     * @param {?} url
     * @param {?} options
     * @return {?}
     */
    function (url, options) {
        var _this = this;
        return Observable.create(function (observer) {
            var /** @type {?} */ headers = new HttpHeaders();
            if (options.authToken) {
                headers = headers.append('Authorization', options.authTokenPrefix + " " + options.authToken);
            }
            _this.http.get(url, { responseType: 'blob', headers: headers }).subscribe(function (res) {
                var /** @type {?} */ file = new File([res], 'filename', { type: res.type });
                observer.next(file);
                observer.complete();
            }, function (err) {
                observer.error(err.status);
                observer.complete();
            });
        });
    };
    /**
     * @param {?} options
     * @return {?}
     */
    ImageUploaderService.prototype._buildHeaders = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        var /** @type {?} */ headers = new HttpHeaders();
        if (options.authToken) {
            headers = headers.append('Authorization', options.authTokenPrefix + " " + options.authToken);
        }
        if (options.customHeaders) {
            Object.keys(options.customHeaders).forEach(function (key) {
                headers = headers.append(key, options.customHeaders[key]);
            });
        }
        return headers;
    };
    /**
     * @param {?} queueObj
     * @param {?} event
     * @return {?}
     */
    ImageUploaderService.prototype._uploadProgress = /**
     * @param {?} queueObj
     * @param {?} event
     * @return {?}
     */
    function (queueObj, event) {
        // update the FileQueueObject with the current progress
        var /** @type {?} */ progress = Math.round(100 * event.loaded / event.total);
        queueObj.progress = progress;
        queueObj.status = FileQueueStatus.Progress;
        // this._queue.next(this._files);
    };
    /**
     * @param {?} queueObj
     * @param {?} response
     * @return {?}
     */
    ImageUploaderService.prototype._uploadComplete = /**
     * @param {?} queueObj
     * @param {?} response
     * @return {?}
     */
    function (queueObj, response) {
        // update the FileQueueObject as completed
        queueObj.progress = 100;
        queueObj.status = FileQueueStatus.Success;
        queueObj.response = response;
        // this._queue.next(this._files);
        // this.onCompleteItem(queueObj, response.body);
    };
    /**
     * @param {?} queueObj
     * @param {?} response
     * @return {?}
     */
    ImageUploaderService.prototype._uploadFailed = /**
     * @param {?} queueObj
     * @param {?} response
     * @return {?}
     */
    function (queueObj, response) {
        // update the FileQueueObject as errored
        queueObj.progress = 0;
        queueObj.status = FileQueueStatus.Error;
        queueObj.response = response;
        // this._queue.next(this._files);
    };
    /**
     * @param {?} options
     * @return {?}
     */
    ImageUploaderService.prototype.setDefaults = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        options.withCredentials = options.withCredentials || false;
        options.httpMethod = options.httpMethod || 'POST';
        options.authTokenPrefix = options.authTokenPrefix || 'Bearer';
        options.fieldName = options.fieldName || 'file';
    };
    ImageUploaderService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    ImageUploaderService.ctorParameters = function () { return [
        { type: HttpClient, },
    ]; };
    /** @nocollapse */ ImageUploaderService.ngInjectableDef = i0.defineInjectable({ factory: function ImageUploaderService_Factory() { return new ImageUploaderService(i0.inject(i1.HttpClient)); }, token: ImageUploaderService, providedIn: "root" });
    return ImageUploaderService;
}());
export { ImageUploaderService };
function ImageUploaderService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    ImageUploaderService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    ImageUploaderService.ctorParameters;
    /** @type {?} */
    ImageUploaderService.prototype.http;
}

//# sourceMappingURL=data:application/json;base64,