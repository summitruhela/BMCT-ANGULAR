/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { NgDatepickerModule } from 'ng2-datepicker';
import { DynamicFormComponent } from './containers/dynamic-form/dynamic-form.component';
import { FormInputComponent } from './components/form-input/form-input.component';
import { DynamicAddFieldDirective } from './directives/dynamic-add-field/dynamic-add-field.component';
import { FormSelectComponent, FormFileUploadComponent, FormDatetimeComponent, FormButtonComponent } from '../public_api';
export class DynamicFormModule {
}
DynamicFormModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    NgDatepickerModule,
                    ReactiveFormsModule
                ],
                declarations: [
                    DynamicAddFieldDirective,
                    DynamicFormComponent,
                    FormInputComponent,
                    FormSelectComponent,
                    FormFileUploadComponent,
                    FormDatetimeComponent,
                    FormButtonComponent
                ],
                providers: [],
                exports: [
                    NgDatepickerModule,
                    DynamicFormComponent
                ], schemas: [
                    CUSTOM_ELEMENTS_SCHEMA
                ],
                entryComponents: [
                    FormInputComponent,
                    FormSelectComponent,
                    FormFileUploadComponent,
                    FormDatetimeComponent,
                    FormButtonComponent
                ]
            },] },
];

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1mb3JtLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1keW5hbWljLWZvcm0vIiwic291cmNlcyI6WyJsaWIvZHluYW1pYy1mb3JtLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLG1CQUFtQixFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXBELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBRXhGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBQ2xGLE9BQU8sRUFBQyx3QkFBd0IsRUFBQyxNQUFNLDREQUE0RCxDQUFDO0FBQ3BHLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSx1QkFBdUIsRUFBRSxxQkFBcUIsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQW1DekgsTUFBTTs7O1lBaENMLFFBQVEsU0FBQztnQkFDUixPQUFPLEVBQUU7b0JBQ1AsWUFBWTtvQkFDWixXQUFXO29CQUNYLGtCQUFrQjtvQkFDbEIsbUJBQW1CO2lCQUNwQjtnQkFDRCxZQUFZLEVBQUU7b0JBQ1Ysd0JBQXdCO29CQUN4QixvQkFBb0I7b0JBQ3BCLGtCQUFrQjtvQkFDbEIsbUJBQW1CO29CQUNuQix1QkFBdUI7b0JBQ3ZCLHFCQUFxQjtvQkFDckIsbUJBQW1CO2lCQUN0QjtnQkFDRCxTQUFTLEVBQUUsRUFDVjtnQkFDRCxPQUFPLEVBQUU7b0JBQ1Asa0JBQWtCO29CQUNsQixvQkFBb0I7aUJBQ3JCLEVBQUUsT0FBTyxFQUFFO29CQUNWLHNCQUFzQjtpQkFDekI7Z0JBQ0MsZUFBZSxFQUFFO29CQUNmLGtCQUFrQjtvQkFDbEIsbUJBQW1CO29CQUNuQix1QkFBdUI7b0JBQ3ZCLHFCQUFxQjtvQkFDckIsbUJBQW1CO2lCQUNwQjthQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIENVU1RPTV9FTEVNRU5UU19TQ0hFTUEgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBSZWFjdGl2ZUZvcm1zTW9kdWxlLCBGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IE5nRGF0ZXBpY2tlck1vZHVsZSB9IGZyb20gJ25nMi1kYXRlcGlja2VyJztcblxuaW1wb3J0IHsgRHluYW1pY0Zvcm1Db21wb25lbnQgfSBmcm9tICcuL2NvbnRhaW5lcnMvZHluYW1pYy1mb3JtL2R5bmFtaWMtZm9ybS5jb21wb25lbnQnO1xuXG5pbXBvcnQgeyBGb3JtSW5wdXRDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvZm9ybS1pbnB1dC9mb3JtLWlucHV0LmNvbXBvbmVudCc7XG5pbXBvcnQge0R5bmFtaWNBZGRGaWVsZERpcmVjdGl2ZX0gZnJvbSAnLi9kaXJlY3RpdmVzL2R5bmFtaWMtYWRkLWZpZWxkL2R5bmFtaWMtYWRkLWZpZWxkLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBGb3JtU2VsZWN0Q29tcG9uZW50LCBGb3JtRmlsZVVwbG9hZENvbXBvbmVudCwgRm9ybURhdGV0aW1lQ29tcG9uZW50LCBGb3JtQnV0dG9uQ29tcG9uZW50IH0gZnJvbSAnLi4vcHVibGljX2FwaSc7XG5cblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZSxcbiAgICBGb3Jtc01vZHVsZSxcbiAgICBOZ0RhdGVwaWNrZXJNb2R1bGUsXG4gICAgUmVhY3RpdmVGb3Jtc01vZHVsZVxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICAgIER5bmFtaWNBZGRGaWVsZERpcmVjdGl2ZSxcbiAgICAgIER5bmFtaWNGb3JtQ29tcG9uZW50LFxuICAgICAgRm9ybUlucHV0Q29tcG9uZW50LFxuICAgICAgRm9ybVNlbGVjdENvbXBvbmVudCxcbiAgICAgIEZvcm1GaWxlVXBsb2FkQ29tcG9uZW50LFxuICAgICAgRm9ybURhdGV0aW1lQ29tcG9uZW50LFxuICAgICAgRm9ybUJ1dHRvbkNvbXBvbmVudFxuICBdLFxuICBwcm92aWRlcnM6IFtcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIE5nRGF0ZXBpY2tlck1vZHVsZSxcbiAgICBEeW5hbWljRm9ybUNvbXBvbmVudFxuICBdLCBzY2hlbWFzOiBbXG4gICAgQ1VTVE9NX0VMRU1FTlRTX1NDSEVNQVxuXSxcbiAgZW50cnlDb21wb25lbnRzOiBbXG4gICAgRm9ybUlucHV0Q29tcG9uZW50LFxuICAgIEZvcm1TZWxlY3RDb21wb25lbnQsXG4gICAgRm9ybUZpbGVVcGxvYWRDb21wb25lbnQsXG4gICAgRm9ybURhdGV0aW1lQ29tcG9uZW50LFxuICAgIEZvcm1CdXR0b25Db21wb25lbnRcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBEeW5hbWljRm9ybU1vZHVsZSB7fVxuIl19