/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, HostBinding } from '@angular/core';
export class FormFileUploadComponent {
    /**
     * @return {?}
     */
    get hostClass() {
        return this.config.divClass;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleFileUpload(event) {
        (/** @type {?} */ (this.formGroup.controls[this.config.name]))
            .setValue(this.config.multiple ? event.currentTarget.files : event.currentTarget.files[0]);
    }
}
FormFileUploadComponent.decorators = [
    { type: Component, args: [{
                selector: 'form-file-upload',
                styles: [``, `input[type=submit]{margin-top:.5rem 1rem}.form-input{height:38px;border-radius:3.5px;background-color:#fff;border:1px solid #bdbdbd;margin-bottom:15px}label{margin-bottom:8px;font-size:16px}`],
                template: `<div *ngIf='!config.hidden' [formGroup]="formGroup">
    <label [ngClass]="config.labelClass" *ngIf="config.label && config.label!=''">{{ config.label }}</label>
    <div class="dynamic-field form-select">
        <input [disabled]="config.disabled" class="form-input" type='file' (change)='handleFileUpload($event)' [accept]="config.accept" [ngClass]="config.class" [attr.placeholder]="config.placeholder" />
    </div>
</div>`
            },] },
];
FormFileUploadComponent.propDecorators = {
    hostClass: [{ type: HostBinding, args: ['class',] }]
};
function FormFileUploadComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    FormFileUploadComponent.prototype.config;
    /** @type {?} */
    FormFileUploadComponent.prototype.formGroup;
}
/**
 * @record
 */
export function FileConfig() { }
function FileConfig_tsickle_Closure_declarations() {
    /** @type {?} */
    FileConfig.prototype.multiple;
    /** @type {?} */
    FileConfig.prototype.accept;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS11cGxvYWQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWR5bmFtaWMtZm9ybS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2ZpbGUtdXBsb2FkL2ZpbGUtdXBsb2FkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFnQnZELE1BQU07Ozs7SUFJSixJQUNNLFNBQVM7UUFDTCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7S0FDL0I7Ozs7O0lBRVAsZ0JBQWdCLENBQUMsS0FBSztRQUNwQixtQkFBYyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFDO2FBQ3ZELFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQSxDQUFDLENBQUUsS0FBSyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDekY7OztZQXRCSixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjtnQkFDNUIsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLGdNQUFnTSxDQUFDO2dCQUM5TSxRQUFRLEVBQUU7Ozs7O09BS0w7YUFDTjs7O3dCQUtFLFdBQVcsU0FBQyxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBIb3N0QmluZGluZyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUdyb3VwLCBGb3JtQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgRmllbGQgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL2ZpZWxkLmludGVyZmFjZSc7XG5pbXBvcnQgeyBGaWVsZENvbmZpZyB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvZmllbGQtY29uZmlnLmludGVyZmFjZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Zvcm0tZmlsZS11cGxvYWQnLFxuICBzdHlsZXM6IFtgYCwgYGlucHV0W3R5cGU9c3VibWl0XXttYXJnaW4tdG9wOi41cmVtIDFyZW19LmZvcm0taW5wdXR7aGVpZ2h0OjM4cHg7Ym9yZGVyLXJhZGl1czozLjVweDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Ym9yZGVyOjFweCBzb2xpZCAjYmRiZGJkO21hcmdpbi1ib3R0b206MTVweH1sYWJlbHttYXJnaW4tYm90dG9tOjhweDtmb250LXNpemU6MTZweH1gXSxcbiAgdGVtcGxhdGU6IGA8ZGl2ICpuZ0lmPSchY29uZmlnLmhpZGRlbicgW2Zvcm1Hcm91cF09XCJmb3JtR3JvdXBcIj5cbiAgICA8bGFiZWwgW25nQ2xhc3NdPVwiY29uZmlnLmxhYmVsQ2xhc3NcIiAqbmdJZj1cImNvbmZpZy5sYWJlbCAmJiBjb25maWcubGFiZWwhPScnXCI+e3sgY29uZmlnLmxhYmVsIH19PC9sYWJlbD5cbiAgICA8ZGl2IGNsYXNzPVwiZHluYW1pYy1maWVsZCBmb3JtLXNlbGVjdFwiPlxuICAgICAgICA8aW5wdXQgW2Rpc2FibGVkXT1cImNvbmZpZy5kaXNhYmxlZFwiIGNsYXNzPVwiZm9ybS1pbnB1dFwiIHR5cGU9J2ZpbGUnIChjaGFuZ2UpPSdoYW5kbGVGaWxlVXBsb2FkKCRldmVudCknIFthY2NlcHRdPVwiY29uZmlnLmFjY2VwdFwiIFtuZ0NsYXNzXT1cImNvbmZpZy5jbGFzc1wiIFthdHRyLnBsYWNlaG9sZGVyXT1cImNvbmZpZy5wbGFjZWhvbGRlclwiIC8+XG4gICAgPC9kaXY+XG48L2Rpdj5gXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1GaWxlVXBsb2FkQ29tcG9uZW50IGltcGxlbWVudHMgRmllbGQge1xuICBjb25maWc6IEZpbGVDb25maWc7XG4gIGZvcm1Hcm91cDogRm9ybUdyb3VwO1xuXG4gIEBIb3N0QmluZGluZygnY2xhc3MnKVxuICAgIGdldCBob3N0Q2xhc3MoKTogc3RyaW5nIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmZpZy5kaXZDbGFzcztcbiAgICAgICAgfVxuXG4gIGhhbmRsZUZpbGVVcGxvYWQoZXZlbnQpe1xuICAgICg8Rm9ybUNvbnRyb2w+dGhpcy5mb3JtR3JvdXAuY29udHJvbHNbdGhpcy5jb25maWcubmFtZV0pXG4gICAgLnNldFZhbHVlKHRoaXMuY29uZmlnLm11bHRpcGxlPyAgZXZlbnQuY3VycmVudFRhcmdldC5maWxlczogZXZlbnQuY3VycmVudFRhcmdldC5maWxlc1swXSk7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlsZUNvbmZpZyBleHRlbmRzIEZpZWxkQ29uZmlne1xuICAgICAgbXVsdGlwbGU6IGJvb2xlYW4sXG4gICAgICBhY2NlcHQ6IHN0cmluZyxcblxufSJdfQ==