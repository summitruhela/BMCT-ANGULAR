/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, HostBinding } from '@angular/core';
export class FormSelectComponent {
    /**
     * @return {?}
     */
    get hostClass() {
        return this.config.divClass;
    }
    /**
     * Converts and Enum Object to an Array
     * @param {?} arg  Enum
     * @return {?} Array<Array<any>>
     */
    enumToArray(arg) {
        /** @type {?} */
        const numKeyArr = [];
        /** @type {?} */
        const valArr = [];
        /** @type {?} */
        const returnedArray = [];
        /** @type {?} */
        const objKeys = Object.keys(arg);
        objKeys.forEach(key => {
            /** @type {?} */
            const numberKey = Number(key);
            if (!isNaN(numberKey)) {
                numKeyArr.push(numberKey);
            }
            else {
                valArr.push(key);
            }
            ;
        });
        returnedArray[0] = numKeyArr;
        returnedArray[1] = valArr;
        return returnedArray;
    }
}
FormSelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'form-select',
                styles: [``, `input[type=submit]{margin-top:.5rem 1rem}.form-input{height:38px;border-radius:3.5px;background-color:#fff;border:1px solid #bdbdbd;margin-bottom:15px}label{margin-bottom:8px;font-size:16px}`],
                template: `<div *ngIf='!config.hidden' [formGroup]="formGroup">
    <label [ngClass]="config.labelClass" *ngIf="config.label && config.label!=''">{{ config.label }}</label>
    <div class="dynamic-field form-select">
        <select *ngIf="!config.enum" class="form-input" [hidden]='config.hidden' [formControlName]="config.name" [ngClass]=config.class>
                <option value='' [selected]="true">{{ config.placeholder }}</option>
                <option *ngFor="let option of config.options"
                        [value]='option'>
                        {{option}}
                </option>

        </select>
        <select [formControlName]="config.name" class="form-input" [ngClass]=config.class *ngIf="config.enum">
                <option value='' [selected]="true">{{ config.placeholder }}</option>
                <option *ngFor="let o of enumToArray(config.enum)[0]; let i=index"
                        [value]='enumToArray(config.enum)[0][i]'>
                        {{ enumToArray(config.enum)[1][i] }}
                </option>
        </select>
    </div>
</div>`
            },] },
];
FormSelectComponent.propDecorators = {
    hostClass: [{ type: HostBinding, args: ['class',] }]
};
function FormSelectComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    FormSelectComponent.prototype.config;
    /** @type {?} */
    FormSelectComponent.prototype.formGroup;
}
/**
 * @record
 */
function SelectConfig() { }
function SelectConfig_tsickle_Closure_declarations() {
    /** @type {?} */
    SelectConfig.prototype.enum;
    /** @type {?|undefined} */
    SelectConfig.prototype.options;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1keW5hbWljLWZvcm0vIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9zZWxlY3Qvc2VsZWN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUE4QnZELE1BQU07Ozs7SUFJSixJQUNNLFNBQVM7UUFDTCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7S0FDL0I7Ozs7OztJQU1QLFdBQVcsQ0FBQyxHQUFXOztRQUNyQixNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUM7O1FBQ3JCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQzs7UUFDbEIsTUFBTSxhQUFhLEdBQUcsRUFBRSxDQUFDOztRQUV6QixNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQy9CLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7O1lBQ3BCLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUM3QixFQUFFLENBQUEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFBLENBQUM7Z0JBQ3RCLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDekI7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDSixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO2FBQ25CO1lBQUEsQ0FBQztTQUNMLENBQUMsQ0FBQztRQUVILGFBQWEsQ0FBQyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUM7UUFDN0IsYUFBYSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUMxQixNQUFNLENBQUMsYUFBYSxDQUFDO0tBQ3RCOzs7WUF2REYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxhQUFhO2dCQUN2QixNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsZ01BQWdNLENBQUM7Z0JBQzlNLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQW1CTDthQUNOOzs7d0JBS0UsV0FBVyxTQUFDLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEhvc3RCaW5kaW5nIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtR3JvdXAgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IEZpZWxkIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9maWVsZC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgRmllbGRDb25maWcgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL2ZpZWxkLWNvbmZpZy5pbnRlcmZhY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdmb3JtLXNlbGVjdCcsXG4gIHN0eWxlczogW2BgLCBgaW5wdXRbdHlwZT1zdWJtaXRde21hcmdpbi10b3A6LjVyZW0gMXJlbX0uZm9ybS1pbnB1dHtoZWlnaHQ6MzhweDtib3JkZXItcmFkaXVzOjMuNXB4O2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3JkZXI6MXB4IHNvbGlkICNiZGJkYmQ7bWFyZ2luLWJvdHRvbToxNXB4fWxhYmVse21hcmdpbi1ib3R0b206OHB4O2ZvbnQtc2l6ZToxNnB4fWBdLFxuICB0ZW1wbGF0ZTogYDxkaXYgKm5nSWY9JyFjb25maWcuaGlkZGVuJyBbZm9ybUdyb3VwXT1cImZvcm1Hcm91cFwiPlxuICAgIDxsYWJlbCBbbmdDbGFzc109XCJjb25maWcubGFiZWxDbGFzc1wiICpuZ0lmPVwiY29uZmlnLmxhYmVsICYmIGNvbmZpZy5sYWJlbCE9JydcIj57eyBjb25maWcubGFiZWwgfX08L2xhYmVsPlxuICAgIDxkaXYgY2xhc3M9XCJkeW5hbWljLWZpZWxkIGZvcm0tc2VsZWN0XCI+XG4gICAgICAgIDxzZWxlY3QgKm5nSWY9XCIhY29uZmlnLmVudW1cIiBjbGFzcz1cImZvcm0taW5wdXRcIiBbaGlkZGVuXT0nY29uZmlnLmhpZGRlbicgW2Zvcm1Db250cm9sTmFtZV09XCJjb25maWcubmFtZVwiIFtuZ0NsYXNzXT1jb25maWcuY2xhc3M+XG4gICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0nJyBbc2VsZWN0ZWRdPVwidHJ1ZVwiPnt7IGNvbmZpZy5wbGFjZWhvbGRlciB9fTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgIDxvcHRpb24gKm5nRm9yPVwibGV0IG9wdGlvbiBvZiBjb25maWcub3B0aW9uc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICBbdmFsdWVdPSdvcHRpb24nPlxuICAgICAgICAgICAgICAgICAgICAgICAge3tvcHRpb259fVxuICAgICAgICAgICAgICAgIDwvb3B0aW9uPlxuXG4gICAgICAgIDwvc2VsZWN0PlxuICAgICAgICA8c2VsZWN0IFtmb3JtQ29udHJvbE5hbWVdPVwiY29uZmlnLm5hbWVcIiBjbGFzcz1cImZvcm0taW5wdXRcIiBbbmdDbGFzc109Y29uZmlnLmNsYXNzICpuZ0lmPVwiY29uZmlnLmVudW1cIj5cbiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPScnIFtzZWxlY3RlZF09XCJ0cnVlXCI+e3sgY29uZmlnLnBsYWNlaG9sZGVyIH19PC9vcHRpb24+XG4gICAgICAgICAgICAgICAgPG9wdGlvbiAqbmdGb3I9XCJsZXQgbyBvZiBlbnVtVG9BcnJheShjb25maWcuZW51bSlbMF07IGxldCBpPWluZGV4XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIFt2YWx1ZV09J2VudW1Ub0FycmF5KGNvbmZpZy5lbnVtKVswXVtpXSc+XG4gICAgICAgICAgICAgICAgICAgICAgICB7eyBlbnVtVG9BcnJheShjb25maWcuZW51bSlbMV1baV0gfX1cbiAgICAgICAgICAgICAgICA8L29wdGlvbj5cbiAgICAgICAgPC9zZWxlY3Q+XG4gICAgPC9kaXY+XG48L2Rpdj5gXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1TZWxlY3RDb21wb25lbnQgaW1wbGVtZW50cyBGaWVsZCB7XG4gIGNvbmZpZzogRmllbGRDb25maWc7XG4gIGZvcm1Hcm91cDogRm9ybUdyb3VwO1xuXG4gIEBIb3N0QmluZGluZygnY2xhc3MnKVxuICAgIGdldCBob3N0Q2xhc3MoKTogc3RyaW5nIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmZpZy5kaXZDbGFzcztcbiAgICAgICAgfVxuICAvKipcbiAgICogQ29udmVydHMgYW5kIEVudW0gT2JqZWN0IHRvIGFuIEFycmF5IFxuICAgKiBAcGFyYW0gYXJnICBFbnVtXG4gICAqIEByZXR1cm5zIEFycmF5PEFycmF5PGFueT4+XG4gICAqL1xuICBlbnVtVG9BcnJheShhcmc6IE9iamVjdCk6IG51bWJlcltdIHtcbiAgICBjb25zdCBudW1LZXlBcnIgPSBbXTsgXG4gICAgY29uc3QgdmFsQXJyID0gW107IFxuICAgIGNvbnN0IHJldHVybmVkQXJyYXkgPSBbXTtcblxuICAgIGNvbnN0IG9iaktleXMgPSBPYmplY3Qua2V5cyhhcmcpO1xuICAgICAgb2JqS2V5cy5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIGNvbnN0IG51bWJlcktleSA9IE51bWJlcihrZXkpXG4gICAgICAgIGlmKCFpc05hTihudW1iZXJLZXkpKXtcbiAgICAgICAgbnVtS2V5QXJyLnB1c2gobnVtYmVyS2V5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbEFyci5wdXNoKGtleSlcbiAgICAgICAgfTtcbiAgICB9KTtcblxuICAgIHJldHVybmVkQXJyYXlbMF0gPSBudW1LZXlBcnI7XG4gICAgcmV0dXJuZWRBcnJheVsxXSA9IHZhbEFycjtcbiAgICByZXR1cm4gcmV0dXJuZWRBcnJheTtcbiAgfVxuXG59XG5cblxuaW50ZXJmYWNlIFNlbGVjdENvbmZpZyBleHRlbmRzIEZpZWxkQ29uZmlne1xuICAgIGVudW06IGJvb2xlYW4sXG4gICAgb3B0aW9ucz86IHN0cmluZ1tdXG59Il19