{"version":3,"file":"ngx-dynamic-form.js.map","sources":["ng://ngx-dynamic-form/lib/components/form-input/form-input.component.ts","ng://ngx-dynamic-form/lib/components/select/select.component.ts","ng://ngx-dynamic-form/lib/components/file-upload/file-upload.component.ts","ng://ngx-dynamic-form/lib/components/datetime/datetime.component.ts","ng://ngx-dynamic-form/lib/components/button/button.component.ts","ng://ngx-dynamic-form/lib/containers/dynamic-form/dynamic-form.component.ts","ng://ngx-dynamic-form/lib/directives/dynamic-add-field/dynamic-add-field.component.ts","ng://ngx-dynamic-form/lib/dynamic-form.module.ts"],"sourcesContent":["import { Component, HostBinding } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Field } from '../../interfaces/field.interface';\nimport { FieldConfig } from '../../interfaces/field-config.interface';\n\n\n@Component({\n    // tslint:disable-next-line:component-selector\n    selector: 'form-input',\n    styles: [`input[type=submit]{margin-top:.5rem 1rem}.form-input{height:38px;border-radius:3.5px;background-color:#fff;border:1px solid #bdbdbd;margin-bottom:15px}label{margin-bottom:8px;font-size:16px}`, `input[type=submit]{margin-top:.5rem 1rem}.form-input{height:38px;border-radius:3.5px;background-color:#fff;border:1px solid #bdbdbd;margin-bottom:15px}label{margin-bottom:8px;font-size:16px}`],\n    template: `<div *ngIf='!config.hidden' [formGroup]=\"formGroup\">\n    <label [ngClass]=\"config.labelClass\" *ngIf=\"config.label && config.label!=''\">{{ config.label }}</label>\n    <input *ngIf=\"config.type ==='input' && !config.fromEnum \" class=\"form-input\" value={{config.text}} [disabled]=\"config.disabled\" type={{config.inputType}} [ngClass]=\"config.class\" [attr.placeholder]=\"config.placeholder\" [formControlName]=\"config.name\"\n    />\n\n    <select *ngIf=\"config.type==='select' && !config.fromEnum && !config.hidden\" class=\"form-input\" [formControlName]=\"config.name\" [ngClass]=config.class>\n        <option value='' [selected]=\"true\">{{ config.placeholder }}</option>\n        <option value={{option}}\n                *ngFor=\"let option of config.options\">\n                {{option}}\n        </option>\n    </select>\n    <select class=\"form-input\" *ngIf=\"config.type==='select' && config.fromEnum && !config.hidden\" [formControlName]=\"config.name\" [ngClass]=config.class>\n        <option value=\"\" [selected]=\"true\">{{ config.placeholder }}</option>\n        <option value={{config.options[0][i]}}\n                *ngFor=\"let o of config.options[0]; let i=index\">\n                {{ config.options[1][i] }}\n        </option>\n    </select>\n\n    <textarea class=\"form-input\" *ngIf=\"config.type==='textarea' && !config.hidden\" [formControlName]=\"config.name\" [attr.placeholder]=\"config.placeholder\" rows={{config.rows}} cols={{config.cols}}></textarea>\n\n    <ng-datepicker class=\"form-input\" [ngClass]=\"config.class\" *ngIf=\"config.type ==='date'\" [formControlName]=\"config.name\"></ng-datepicker>\n</div>`\n})\n\nexport class FormInputComponent implements Field {\n    config: FieldConfig;\n    formGroup: FormGroup;\n    constructor() { }\n\n    @HostBinding('class')\n    get hostClass(): string {\n            return this.config.divClass;\n        }\n}\n\n","import { Component, HostBinding } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { Field } from '../../interfaces/field.interface';\nimport { FieldConfig } from '../../interfaces/field-config.interface';\n\n@Component({\n  selector: 'form-select',\n  styles: [``, `input[type=submit]{margin-top:.5rem 1rem}.form-input{height:38px;border-radius:3.5px;background-color:#fff;border:1px solid #bdbdbd;margin-bottom:15px}label{margin-bottom:8px;font-size:16px}`],\n  template: `<div *ngIf='!config.hidden' [formGroup]=\"formGroup\">\n    <label [ngClass]=\"config.labelClass\" *ngIf=\"config.label && config.label!=''\">{{ config.label }}</label>\n    <div class=\"dynamic-field form-select\">\n        <select *ngIf=\"!config.enum\" class=\"form-input\" [hidden]='config.hidden' [formControlName]=\"config.name\" [ngClass]=config.class>\n                <option value='' [selected]=\"true\">{{ config.placeholder }}</option>\n                <option *ngFor=\"let option of config.options\"\n                        [value]='option'>\n                        {{option}}\n                </option>\n\n        </select>\n        <select [formControlName]=\"config.name\" class=\"form-input\" [ngClass]=config.class *ngIf=\"config.enum\">\n                <option value='' [selected]=\"true\">{{ config.placeholder }}</option>\n                <option *ngFor=\"let o of enumToArray(config.enum)[0]; let i=index\"\n                        [value]='enumToArray(config.enum)[0][i]'>\n                        {{ enumToArray(config.enum)[1][i] }}\n                </option>\n        </select>\n    </div>\n</div>`\n})\nexport class FormSelectComponent implements Field {\n  config: FieldConfig;\n  formGroup: FormGroup;\n\n  @HostBinding('class')\n    get hostClass(): string {\n            return this.config.divClass;\n        }\n  /**\n   * Converts and Enum Object to an Array \n   * @param arg  Enum\n   * @returns Array<Array<any>>\n   */\n  enumToArray(arg: Object): number[] {\n    const numKeyArr = []; \n    const valArr = []; \n    const returnedArray = [];\n\n    const objKeys = Object.keys(arg);\n      objKeys.forEach(key => {\n        const numberKey = Number(key)\n        if(!isNaN(numberKey)){\n        numKeyArr.push(numberKey);\n        } else {\n            valArr.push(key)\n        };\n    });\n\n    returnedArray[0] = numKeyArr;\n    returnedArray[1] = valArr;\n    return returnedArray;\n  }\n\n}\n\n\ninterface SelectConfig extends FieldConfig{\n    enum: boolean,\n    options?: string[]\n}","import { Component, HostBinding } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\n\nimport { Field } from '../../interfaces/field.interface';\nimport { FieldConfig } from '../../interfaces/field-config.interface';\n\n@Component({\n  selector: 'form-file-upload',\n  styles: [``, `input[type=submit]{margin-top:.5rem 1rem}.form-input{height:38px;border-radius:3.5px;background-color:#fff;border:1px solid #bdbdbd;margin-bottom:15px}label{margin-bottom:8px;font-size:16px}`],\n  template: `<div *ngIf='!config.hidden' [formGroup]=\"formGroup\">\n    <label [ngClass]=\"config.labelClass\" *ngIf=\"config.label && config.label!=''\">{{ config.label }}</label>\n    <div class=\"dynamic-field form-select\">\n        <input [disabled]=\"config.disabled\" class=\"form-input\" type='file' (change)='handleFileUpload($event)' [accept]=\"config.accept\" [ngClass]=\"config.class\" [attr.placeholder]=\"config.placeholder\" />\n    </div>\n</div>`\n})\nexport class FormFileUploadComponent implements Field {\n  config: FileConfig;\n  formGroup: FormGroup;\n\n  @HostBinding('class')\n    get hostClass(): string {\n            return this.config.divClass;\n        }\n\n  handleFileUpload(event){\n    (<FormControl>this.formGroup.controls[this.config.name])\n    .setValue(this.config.multiple?  event.currentTarget.files: event.currentTarget.files[0]);\n    }\n\n}\n\nexport interface FileConfig extends FieldConfig{\n      multiple: boolean,\n      accept: string,\n\n}","import { Component, HostBinding } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\n\nimport { Field } from '../../interfaces/field.interface';\nimport { FieldConfig } from '../../interfaces/field-config.interface';\nimport { OnInit } from '@angular/core/src/metadata/lifecycle_hooks';\n\n@Component({\n  selector: 'form-datetime',\n  styles: [``, `input[type=submit]{margin-top:.5rem 1rem}.form-input{height:38px;border-radius:3.5px;background-color:#fff;border:1px solid #bdbdbd;margin-bottom:15px}label{margin-bottom:8px;font-size:16px}`],\n  template: `<div *ngIf='!config.hidden' [formGroup]=\"formGroup\">\n    <label *ngIf=\"config.label && config.label!=''\">{{ config.label }}</label>\n    <div class=\"dynamic-field form-datetime\">\n        <ng-datepicker class=\"form-input\" [formControlName]=\"config.name\"></ng-datepicker>\n\n    </div>\n</div>`\n})\nexport class FormDatetimeComponent implements Field, OnInit {\n  \n  config: FieldConfig;\n  formGroup: FormGroup;\n\n  @HostBinding('class')\n    get hostClass(): string {\n            return this.config.divClass;\n        }\n\n  ngOnInit(): void {\n    (<FormControl>this.formGroup.controls[this.config.name])\n    .setValue(new Date(), { onlySelf: true });\n  }\n}","import { Component, ElementRef, IterableDiffers, AfterViewInit, DoCheck, HostBinding } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { Field } from '../../interfaces/field.interface';\nimport { FieldConfig } from '../../interfaces/field-config.interface';\n\n@Component({\n  selector: 'form-button',\n  styles: [``],\n  template: `<div *ngIf='!config.hidden' class=\"form-input\" [formGroup]=\"formGroup\">\n    <label [ngClass]=\"config.labelClass\" *ngIf=\"config.label && config.label!=''\">{{ config.label }}</label>\n    <div class=\"dynamic-field form-button\">\n        <button [disabled]=\"config.disabled\" [ngClass]=\"config.class\" type=\"submit\">\n        {{ config.text }}\n        </button>\n    </div>\n</div>`\n})\nexport class FormButtonComponent implements Field, AfterViewInit, DoCheck {\n  config: FieldConfig;\n  formGroup: FormGroup;\n  differ: any;\n  btn: any;\n\n  constructor(\n    differs: IterableDiffers) {\n      this.differ = differs.find([]).create(null);\n}\n\n\n@HostBinding('class')\nget hostClass(): string {\n        return this.config.divClass;\n    }\n\n  ngAfterViewInit() {\n  }\n\n  ngDoCheck() {\n      setTimeout(() => {\n      const change = this.differ.diff(this.btn);\n      if (document.querySelector('form').className.includes('ng-invalid')\n          && this.config.inputType.toLowerCase() === 'submit') {\n            this.config.disabled = true;\n      } else {\n        this.config.disabled = false;\n      }\n    }, 10 );\n  }\n}\n","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { FieldConfig } from '../../interfaces/field-config.interface';\nimport { Observable } from 'rxjs';\n\n@Component({\n    exportAs: 'dynamicForm',\n    // tslint:disable-next-line:component-selector\n    selector: 'dynamic-form',\n    styles: [`.__ngx-form-container{display:flex;flex-wrap:wrap}`],\n    template: `<form [formGroup]=\"form\" #newForm=\"ngForm\" (ngSubmit)=\"handleSubmit($event)\">\n    <div class=\"__ngx-form-container\">\n        <div dynamicField *ngFor=\"let field of config\" [config]=\"field\" [formGroup]=\"form\">\n        </div>\n    </div>\n</form>`\n})\n\nexport class DynamicFormComponent implements OnInit {\n    @Input() config: FieldConfig[] = [];\n    field;\n\n    @Output()  submit: EventEmitter<any> = new EventEmitter<any>();\n    form: FormGroup;\n\n    get controls() { return this.config.filter(({type}) => type !== 'button'); }\n    get changes() { return this.form.valueChanges; }\n    get valid() { return this.form.valid; }\n    get value() { return this.form.value; }\n    reset(){ this.form.reset()}\n\n    constructor(private fb: FormBuilder) {\n    }\n\n    ngOnInit() {\n        this.form = this.createGroup();\n    \n    }\n\n\n     /**\n      * Create FormGroup for the Form to be generated\n      */\n    private createGroup(): FormGroup {\n        const formGroup = this.fb.group({});\n        this.config.forEach(control => {\n            formGroup.addControl(control.name, this.createControl(control));\n        })\n        return formGroup;\n    }\n\n     /**\n      * Create Form Control in FormBuilder\n      * @param config \n      */\n    private createControl(config: FieldConfig) {\n        const { disabled, validation, value } = config;\n        return this.fb.control({ disabled, value }, validation);\n    }\n\n\n\n    /**\n     * Handle Form Submit\n     * @param event \n     */\n    handleSubmit(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.submit.emit(this.value);\n    }\n\n\n/**\n * Disables an element in the form\n * @param name \n * @param disable \n */\n    setDisabled(name: string, disable: boolean) {\n        if (this.form.controls[name]) {\n        const method = disable ? 'disable' : 'enable';\n        this.form.controls[name][method]();\n        return;\n        }\n\n        this.config = this.config.map((item) => {\n            if (item.name === name) {\n                item.disabled = disable;\n            }\n            return item;\n        });\n    }\n\n    /**\n     * Sets value of a Form control/element\n     * @param name \n     * @param value \n     */\n    setValue(name: string, value: any) {\n    this.form.controls[name].setValue(value, {emitEvent: true});\n    }\n}\n","import { Directive,\n        Input,\n        ViewContainerRef,\n        ComponentFactoryResolver,\n        OnInit, OnChanges, SimpleChanges,\n        ComponentRef, \n        Type} from '@angular/core';\n\nimport { FormGroup } from '@angular/forms'\n\nimport { Field } from '../../interfaces/field.interface';\nimport { FieldConfig} from '../../interfaces/field-config.interface';\n\nimport { FormInputComponent } from '../../components/form-input/form-input.component';\nimport { FormButtonComponent } from '../../components/button/button.component';\nimport { FormSelectComponent } from '../../components/select/select.component';\nimport { FormFileUploadComponent } from '../../components/file-upload/file-upload.component';\nimport { FormDatetimeComponent } from '../../components/datetime/datetime.component';\n\nconst components: {[type: string]: Type<Field>} = {\n  button: FormButtonComponent,\n  input: FormInputComponent,\n  select: FormSelectComponent,\n  file: FormFileUploadComponent,\n  date: FormDatetimeComponent\n};\n\n// tslint:disable-next-line:directive-selector\n@Directive({ selector: '[dynamicField]' })\nexport class DynamicAddFieldDirective implements OnInit, Field, OnChanges {\n\n  @Input() config;\n  @Input() formGroup: FormGroup;\n\n  component: ComponentRef<Field>;\n\n    constructor(private resolver: ComponentFactoryResolver,\n                private vcr: ViewContainerRef) {\n\n                }\n    ngOnInit(): void {\n      if (!components[this.config.type]) {\n          const supportedTypes = Object.keys(components).join(', ');\n          throw new Error(\n            `Trying to use an unsupported type (${this.config.type}).\n            Supported types: ${supportedTypes}`\n          );\n        }\n\n        const component = components[this.config.type];\n        const factory = this.resolver.resolveComponentFactory<Field>(component);\n        this.component = this.vcr.createComponent(factory);\n        this.component.instance.config = this.config;\n        this.component.instance.formGroup = this.formGroup;\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n    if (this.component)  {\n        this.component.instance.config = this.config;\n        this.component.instance.formGroup = this.formGroup;\n    }\n  }\n}\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { NgDatepickerModule } from 'ng2-datepicker';\n\nimport { DynamicFormComponent } from './containers/dynamic-form/dynamic-form.component';\n\nimport { FormInputComponent } from './components/form-input/form-input.component';\nimport {DynamicAddFieldDirective} from './directives/dynamic-add-field/dynamic-add-field.component';\nimport { FormSelectComponent, FormFileUploadComponent, FormDatetimeComponent, FormButtonComponent } from '../public_api';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    NgDatepickerModule,\n    ReactiveFormsModule\n  ],\n  declarations: [\n      DynamicAddFieldDirective,\n      DynamicFormComponent,\n      FormInputComponent,\n      FormSelectComponent,\n      FormFileUploadComponent,\n      FormDatetimeComponent,\n      FormButtonComponent\n  ],\n  providers: [\n  ],\n  exports: [\n    NgDatepickerModule,\n    DynamicFormComponent\n  ], schemas: [\n    CUSTOM_ELEMENTS_SCHEMA\n],\n  entryComponents: [\n    FormInputComponent,\n    FormSelectComponent,\n    FormFileUploadComponent,\n    FormDatetimeComponent,\n    FormButtonComponent\n  ]\n})\nexport class DynamicFormModule {}\n"],"names":[],"mappings":"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"}
