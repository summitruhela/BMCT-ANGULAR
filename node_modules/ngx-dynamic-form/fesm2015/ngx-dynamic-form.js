import { Component, HostBinding, IterableDiffers, Input, EventEmitter, Output, Directive, ViewContainerRef, ComponentFactoryResolver, NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
import { FormBuilder, ReactiveFormsModule, FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { NgDatepickerModule } from 'ng2-datepicker';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FormInputComponent {
    constructor() { }
    /**
     * @return {?}
     */
    get hostClass() {
        return this.config.divClass;
    }
}
FormInputComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'form-input',
                styles: [`input[type=submit]{margin-top:.5rem 1rem}.form-input{height:38px;border-radius:3.5px;background-color:#fff;border:1px solid #bdbdbd;margin-bottom:15px}label{margin-bottom:8px;font-size:16px}`, `input[type=submit]{margin-top:.5rem 1rem}.form-input{height:38px;border-radius:3.5px;background-color:#fff;border:1px solid #bdbdbd;margin-bottom:15px}label{margin-bottom:8px;font-size:16px}`],
                template: `<div *ngIf='!config.hidden' [formGroup]="formGroup">
    <label [ngClass]="config.labelClass" *ngIf="config.label && config.label!=''">{{ config.label }}</label>
    <input *ngIf="config.type ==='input' && !config.fromEnum " class="form-input" value={{config.text}} [disabled]="config.disabled" type={{config.inputType}} [ngClass]="config.class" [attr.placeholder]="config.placeholder" [formControlName]="config.name"
    />

    <select *ngIf="config.type==='select' && !config.fromEnum && !config.hidden" class="form-input" [formControlName]="config.name" [ngClass]=config.class>
        <option value='' [selected]="true">{{ config.placeholder }}</option>
        <option value={{option}}
                *ngFor="let option of config.options">
                {{option}}
        </option>
    </select>
    <select class="form-input" *ngIf="config.type==='select' && config.fromEnum && !config.hidden" [formControlName]="config.name" [ngClass]=config.class>
        <option value="" [selected]="true">{{ config.placeholder }}</option>
        <option value={{config.options[0][i]}}
                *ngFor="let o of config.options[0]; let i=index">
                {{ config.options[1][i] }}
        </option>
    </select>

    <textarea class="form-input" *ngIf="config.type==='textarea' && !config.hidden" [formControlName]="config.name" [attr.placeholder]="config.placeholder" rows={{config.rows}} cols={{config.cols}}></textarea>

    <ng-datepicker class="form-input" [ngClass]="config.class" *ngIf="config.type ==='date'" [formControlName]="config.name"></ng-datepicker>
</div>`
            },] },
];
/** @nocollapse */
FormInputComponent.ctorParameters = () => [];
FormInputComponent.propDecorators = {
    hostClass: [{ type: HostBinding, args: ['class',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FormSelectComponent {
    /**
     * @return {?}
     */
    get hostClass() {
        return this.config.divClass;
    }
    /**
     * Converts and Enum Object to an Array
     * @param {?} arg  Enum
     * @return {?} Array<Array<any>>
     */
    enumToArray(arg) {
        /** @type {?} */
        const numKeyArr = [];
        /** @type {?} */
        const valArr = [];
        /** @type {?} */
        const returnedArray = [];
        /** @type {?} */
        const objKeys = Object.keys(arg);
        objKeys.forEach(key => {
            /** @type {?} */
            const numberKey = Number(key);
            if (!isNaN(numberKey)) {
                numKeyArr.push(numberKey);
            }
            else {
                valArr.push(key);
            }
        });
        returnedArray[0] = numKeyArr;
        returnedArray[1] = valArr;
        return returnedArray;
    }
}
FormSelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'form-select',
                styles: [``, `input[type=submit]{margin-top:.5rem 1rem}.form-input{height:38px;border-radius:3.5px;background-color:#fff;border:1px solid #bdbdbd;margin-bottom:15px}label{margin-bottom:8px;font-size:16px}`],
                template: `<div *ngIf='!config.hidden' [formGroup]="formGroup">
    <label [ngClass]="config.labelClass" *ngIf="config.label && config.label!=''">{{ config.label }}</label>
    <div class="dynamic-field form-select">
        <select *ngIf="!config.enum" class="form-input" [hidden]='config.hidden' [formControlName]="config.name" [ngClass]=config.class>
                <option value='' [selected]="true">{{ config.placeholder }}</option>
                <option *ngFor="let option of config.options"
                        [value]='option'>
                        {{option}}
                </option>

        </select>
        <select [formControlName]="config.name" class="form-input" [ngClass]=config.class *ngIf="config.enum">
                <option value='' [selected]="true">{{ config.placeholder }}</option>
                <option *ngFor="let o of enumToArray(config.enum)[0]; let i=index"
                        [value]='enumToArray(config.enum)[0][i]'>
                        {{ enumToArray(config.enum)[1][i] }}
                </option>
        </select>
    </div>
</div>`
            },] },
];
FormSelectComponent.propDecorators = {
    hostClass: [{ type: HostBinding, args: ['class',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FormFileUploadComponent {
    /**
     * @return {?}
     */
    get hostClass() {
        return this.config.divClass;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleFileUpload(event) {
        (/** @type {?} */ (this.formGroup.controls[this.config.name]))
            .setValue(this.config.multiple ? event.currentTarget.files : event.currentTarget.files[0]);
    }
}
FormFileUploadComponent.decorators = [
    { type: Component, args: [{
                selector: 'form-file-upload',
                styles: [``, `input[type=submit]{margin-top:.5rem 1rem}.form-input{height:38px;border-radius:3.5px;background-color:#fff;border:1px solid #bdbdbd;margin-bottom:15px}label{margin-bottom:8px;font-size:16px}`],
                template: `<div *ngIf='!config.hidden' [formGroup]="formGroup">
    <label [ngClass]="config.labelClass" *ngIf="config.label && config.label!=''">{{ config.label }}</label>
    <div class="dynamic-field form-select">
        <input [disabled]="config.disabled" class="form-input" type='file' (change)='handleFileUpload($event)' [accept]="config.accept" [ngClass]="config.class" [attr.placeholder]="config.placeholder" />
    </div>
</div>`
            },] },
];
FormFileUploadComponent.propDecorators = {
    hostClass: [{ type: HostBinding, args: ['class',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FormDatetimeComponent {
    /**
     * @return {?}
     */
    get hostClass() {
        return this.config.divClass;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        (/** @type {?} */ (this.formGroup.controls[this.config.name]))
            .setValue(new Date(), { onlySelf: true });
    }
}
FormDatetimeComponent.decorators = [
    { type: Component, args: [{
                selector: 'form-datetime',
                styles: [``, `input[type=submit]{margin-top:.5rem 1rem}.form-input{height:38px;border-radius:3.5px;background-color:#fff;border:1px solid #bdbdbd;margin-bottom:15px}label{margin-bottom:8px;font-size:16px}`],
                template: `<div *ngIf='!config.hidden' [formGroup]="formGroup">
    <label *ngIf="config.label && config.label!=''">{{ config.label }}</label>
    <div class="dynamic-field form-datetime">
        <ng-datepicker class="form-input" [formControlName]="config.name"></ng-datepicker>

    </div>
</div>`
            },] },
];
FormDatetimeComponent.propDecorators = {
    hostClass: [{ type: HostBinding, args: ['class',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FormButtonComponent {
    /**
     * @param {?} differs
     */
    constructor(differs) {
        this.differ = differs.find([]).create(null);
    }
    /**
     * @return {?}
     */
    get hostClass() {
        return this.config.divClass;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        setTimeout(() => {
            /** @type {?} */
            const change = this.differ.diff(this.btn);
            if (document.querySelector('form').className.includes('ng-invalid')
                && this.config.inputType.toLowerCase() === 'submit') {
                this.config.disabled = true;
            }
            else {
                this.config.disabled = false;
            }
        }, 10);
    }
}
FormButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'form-button',
                styles: [``],
                template: `<div *ngIf='!config.hidden' class="form-input" [formGroup]="formGroup">
    <label [ngClass]="config.labelClass" *ngIf="config.label && config.label!=''">{{ config.label }}</label>
    <div class="dynamic-field form-button">
        <button [disabled]="config.disabled" [ngClass]="config.class" type="submit">
        {{ config.text }}
        </button>
    </div>
</div>`
            },] },
];
/** @nocollapse */
FormButtonComponent.ctorParameters = () => [
    { type: IterableDiffers }
];
FormButtonComponent.propDecorators = {
    hostClass: [{ type: HostBinding, args: ['class',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DynamicFormComponent {
    /**
     * @param {?} fb
     */
    constructor(fb) {
        this.fb = fb;
        this.config = [];
        this.submit = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get controls() { return this.config.filter(({ type }) => type !== 'button'); }
    /**
     * @return {?}
     */
    get changes() { return this.form.valueChanges; }
    /**
     * @return {?}
     */
    get valid() { return this.form.valid; }
    /**
     * @return {?}
     */
    get value() { return this.form.value; }
    /**
     * @return {?}
     */
    reset() { this.form.reset(); }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.form = this.createGroup();
    }
    /**
     * Create FormGroup for the Form to be generated
     * @return {?}
     */
    createGroup() {
        /** @type {?} */
        const formGroup = this.fb.group({});
        this.config.forEach(control => {
            formGroup.addControl(control.name, this.createControl(control));
        });
        return formGroup;
    }
    /**
     * Create Form Control in FormBuilder
     * @param {?} config
     * @return {?}
     */
    createControl(config) {
        const { disabled, validation, value } = config;
        return this.fb.control({ disabled, value }, validation);
    }
    /**
     * Handle Form Submit
     * @param {?} event
     * @return {?}
     */
    handleSubmit(event) {
        event.preventDefault();
        event.stopPropagation();
        this.submit.emit(this.value);
    }
    /**
     * Disables an element in the form
     * @param {?} name
     * @param {?} disable
     * @return {?}
     */
    setDisabled(name, disable) {
        if (this.form.controls[name]) {
            /** @type {?} */
            const method = disable ? 'disable' : 'enable';
            this.form.controls[name][method]();
            return;
        }
        this.config = this.config.map((item) => {
            if (item.name === name) {
                item.disabled = disable;
            }
            return item;
        });
    }
    /**
     * Sets value of a Form control/element
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    setValue(name, value) {
        this.form.controls[name].setValue(value, { emitEvent: true });
    }
}
DynamicFormComponent.decorators = [
    { type: Component, args: [{
                exportAs: 'dynamicForm',
                // tslint:disable-next-line:component-selector
                selector: 'dynamic-form',
                styles: [`.__ngx-form-container{display:flex;flex-wrap:wrap}`],
                template: `<form [formGroup]="form" #newForm="ngForm" (ngSubmit)="handleSubmit($event)">
    <div class="__ngx-form-container">
        <div dynamicField *ngFor="let field of config" [config]="field" [formGroup]="form">
        </div>
    </div>
</form>`
            },] },
];
/** @nocollapse */
DynamicFormComponent.ctorParameters = () => [
    { type: FormBuilder }
];
DynamicFormComponent.propDecorators = {
    config: [{ type: Input }],
    submit: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @type {?} */
const components = {
    button: FormButtonComponent,
    input: FormInputComponent,
    select: FormSelectComponent,
    file: FormFileUploadComponent,
    date: FormDatetimeComponent
};
class DynamicAddFieldDirective {
    /**
     * @param {?} resolver
     * @param {?} vcr
     */
    constructor(resolver, vcr) {
        this.resolver = resolver;
        this.vcr = vcr;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!components[this.config.type]) {
            /** @type {?} */
            const supportedTypes = Object.keys(components).join(', ');
            throw new Error(`Trying to use an unsupported type (${this.config.type}).
            Supported types: ${supportedTypes}`);
        }
        /** @type {?} */
        const component = components[this.config.type];
        /** @type {?} */
        const factory = this.resolver.resolveComponentFactory(component);
        this.component = this.vcr.createComponent(factory);
        this.component.instance.config = this.config;
        this.component.instance.formGroup = this.formGroup;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.component) {
            this.component.instance.config = this.config;
            this.component.instance.formGroup = this.formGroup;
        }
    }
}
DynamicAddFieldDirective.decorators = [
    { type: Directive, args: [{ selector: '[dynamicField]' },] },
];
/** @nocollapse */
DynamicAddFieldDirective.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: ViewContainerRef }
];
DynamicAddFieldDirective.propDecorators = {
    config: [{ type: Input }],
    formGroup: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DynamicFormModule$$1 {
}
DynamicFormModule$$1.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    NgDatepickerModule,
                    ReactiveFormsModule
                ],
                declarations: [
                    DynamicAddFieldDirective,
                    DynamicFormComponent,
                    FormInputComponent,
                    FormSelectComponent,
                    FormFileUploadComponent,
                    FormDatetimeComponent,
                    FormButtonComponent
                ],
                providers: [],
                exports: [
                    NgDatepickerModule,
                    DynamicFormComponent
                ], schemas: [
                    CUSTOM_ELEMENTS_SCHEMA
                ],
                entryComponents: [
                    FormInputComponent,
                    FormSelectComponent,
                    FormFileUploadComponent,
                    FormDatetimeComponent,
                    FormButtonComponent
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { FormInputComponent, FormSelectComponent, FormFileUploadComponent, FormDatetimeComponent, FormButtonComponent, DynamicFormComponent, DynamicAddFieldDirective, DynamicFormModule$$1 as DynamicFormModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,