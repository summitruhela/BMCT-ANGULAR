import { Component, HostBinding, IterableDiffers, Input, EventEmitter, Output, Directive, ViewContainerRef, ComponentFactoryResolver, NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
import { FormBuilder, ReactiveFormsModule, FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { NgDatepickerModule } from 'ng2-datepicker';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var FormInputComponent = /** @class */ (function () {
    function FormInputComponent() {
    }
    Object.defineProperty(FormInputComponent.prototype, "hostClass", {
        get: /**
         * @return {?}
         */
        function () {
            return this.config.divClass;
        },
        enumerable: true,
        configurable: true
    });
    FormInputComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'form-input',
                    styles: ["input[type=submit]{margin-top:.5rem 1rem}.form-input{height:38px;border-radius:3.5px;background-color:#fff;border:1px solid #bdbdbd;margin-bottom:15px}label{margin-bottom:8px;font-size:16px}", "input[type=submit]{margin-top:.5rem 1rem}.form-input{height:38px;border-radius:3.5px;background-color:#fff;border:1px solid #bdbdbd;margin-bottom:15px}label{margin-bottom:8px;font-size:16px}"],
                    template: "<div *ngIf='!config.hidden' [formGroup]=\"formGroup\">\n    <label [ngClass]=\"config.labelClass\" *ngIf=\"config.label && config.label!=''\">{{ config.label }}</label>\n    <input *ngIf=\"config.type ==='input' && !config.fromEnum \" class=\"form-input\" value={{config.text}} [disabled]=\"config.disabled\" type={{config.inputType}} [ngClass]=\"config.class\" [attr.placeholder]=\"config.placeholder\" [formControlName]=\"config.name\"\n    />\n\n    <select *ngIf=\"config.type==='select' && !config.fromEnum && !config.hidden\" class=\"form-input\" [formControlName]=\"config.name\" [ngClass]=config.class>\n        <option value='' [selected]=\"true\">{{ config.placeholder }}</option>\n        <option value={{option}}\n                *ngFor=\"let option of config.options\">\n                {{option}}\n        </option>\n    </select>\n    <select class=\"form-input\" *ngIf=\"config.type==='select' && config.fromEnum && !config.hidden\" [formControlName]=\"config.name\" [ngClass]=config.class>\n        <option value=\"\" [selected]=\"true\">{{ config.placeholder }}</option>\n        <option value={{config.options[0][i]}}\n                *ngFor=\"let o of config.options[0]; let i=index\">\n                {{ config.options[1][i] }}\n        </option>\n    </select>\n\n    <textarea class=\"form-input\" *ngIf=\"config.type==='textarea' && !config.hidden\" [formControlName]=\"config.name\" [attr.placeholder]=\"config.placeholder\" rows={{config.rows}} cols={{config.cols}}></textarea>\n\n    <ng-datepicker class=\"form-input\" [ngClass]=\"config.class\" *ngIf=\"config.type ==='date'\" [formControlName]=\"config.name\"></ng-datepicker>\n</div>"
                },] },
    ];
    /** @nocollapse */
    FormInputComponent.ctorParameters = function () { return []; };
    FormInputComponent.propDecorators = {
        hostClass: [{ type: HostBinding, args: ['class',] }]
    };
    return FormInputComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var FormSelectComponent = /** @class */ (function () {
    function FormSelectComponent() {
    }
    Object.defineProperty(FormSelectComponent.prototype, "hostClass", {
        get: /**
         * @return {?}
         */
        function () {
            return this.config.divClass;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Converts and Enum Object to an Array
     * @param arg  Enum
     * @returns Array<Array<any>>
     */
    /**
     * Converts and Enum Object to an Array
     * @param {?} arg  Enum
     * @return {?} Array<Array<any>>
     */
    FormSelectComponent.prototype.enumToArray = /**
     * Converts and Enum Object to an Array
     * @param {?} arg  Enum
     * @return {?} Array<Array<any>>
     */
    function (arg) {
        /** @type {?} */
        var numKeyArr = [];
        /** @type {?} */
        var valArr = [];
        /** @type {?} */
        var returnedArray = [];
        /** @type {?} */
        var objKeys = Object.keys(arg);
        objKeys.forEach(function (key) {
            /** @type {?} */
            var numberKey = Number(key);
            if (!isNaN(numberKey)) {
                numKeyArr.push(numberKey);
            }
            else {
                valArr.push(key);
            }
        });
        returnedArray[0] = numKeyArr;
        returnedArray[1] = valArr;
        return returnedArray;
    };
    FormSelectComponent.decorators = [
        { type: Component, args: [{
                    selector: 'form-select',
                    styles: ["", "input[type=submit]{margin-top:.5rem 1rem}.form-input{height:38px;border-radius:3.5px;background-color:#fff;border:1px solid #bdbdbd;margin-bottom:15px}label{margin-bottom:8px;font-size:16px}"],
                    template: "<div *ngIf='!config.hidden' [formGroup]=\"formGroup\">\n    <label [ngClass]=\"config.labelClass\" *ngIf=\"config.label && config.label!=''\">{{ config.label }}</label>\n    <div class=\"dynamic-field form-select\">\n        <select *ngIf=\"!config.enum\" class=\"form-input\" [hidden]='config.hidden' [formControlName]=\"config.name\" [ngClass]=config.class>\n                <option value='' [selected]=\"true\">{{ config.placeholder }}</option>\n                <option *ngFor=\"let option of config.options\"\n                        [value]='option'>\n                        {{option}}\n                </option>\n\n        </select>\n        <select [formControlName]=\"config.name\" class=\"form-input\" [ngClass]=config.class *ngIf=\"config.enum\">\n                <option value='' [selected]=\"true\">{{ config.placeholder }}</option>\n                <option *ngFor=\"let o of enumToArray(config.enum)[0]; let i=index\"\n                        [value]='enumToArray(config.enum)[0][i]'>\n                        {{ enumToArray(config.enum)[1][i] }}\n                </option>\n        </select>\n    </div>\n</div>"
                },] },
    ];
    FormSelectComponent.propDecorators = {
        hostClass: [{ type: HostBinding, args: ['class',] }]
    };
    return FormSelectComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var FormFileUploadComponent = /** @class */ (function () {
    function FormFileUploadComponent() {
    }
    Object.defineProperty(FormFileUploadComponent.prototype, "hostClass", {
        get: /**
         * @return {?}
         */
        function () {
            return this.config.divClass;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    FormFileUploadComponent.prototype.handleFileUpload = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        (/** @type {?} */ (this.formGroup.controls[this.config.name]))
            .setValue(this.config.multiple ? event.currentTarget.files : event.currentTarget.files[0]);
    };
    FormFileUploadComponent.decorators = [
        { type: Component, args: [{
                    selector: 'form-file-upload',
                    styles: ["", "input[type=submit]{margin-top:.5rem 1rem}.form-input{height:38px;border-radius:3.5px;background-color:#fff;border:1px solid #bdbdbd;margin-bottom:15px}label{margin-bottom:8px;font-size:16px}"],
                    template: "<div *ngIf='!config.hidden' [formGroup]=\"formGroup\">\n    <label [ngClass]=\"config.labelClass\" *ngIf=\"config.label && config.label!=''\">{{ config.label }}</label>\n    <div class=\"dynamic-field form-select\">\n        <input [disabled]=\"config.disabled\" class=\"form-input\" type='file' (change)='handleFileUpload($event)' [accept]=\"config.accept\" [ngClass]=\"config.class\" [attr.placeholder]=\"config.placeholder\" />\n    </div>\n</div>"
                },] },
    ];
    FormFileUploadComponent.propDecorators = {
        hostClass: [{ type: HostBinding, args: ['class',] }]
    };
    return FormFileUploadComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var FormDatetimeComponent = /** @class */ (function () {
    function FormDatetimeComponent() {
    }
    Object.defineProperty(FormDatetimeComponent.prototype, "hostClass", {
        get: /**
         * @return {?}
         */
        function () {
            return this.config.divClass;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FormDatetimeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        (/** @type {?} */ (this.formGroup.controls[this.config.name]))
            .setValue(new Date(), { onlySelf: true });
    };
    FormDatetimeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'form-datetime',
                    styles: ["", "input[type=submit]{margin-top:.5rem 1rem}.form-input{height:38px;border-radius:3.5px;background-color:#fff;border:1px solid #bdbdbd;margin-bottom:15px}label{margin-bottom:8px;font-size:16px}"],
                    template: "<div *ngIf='!config.hidden' [formGroup]=\"formGroup\">\n    <label *ngIf=\"config.label && config.label!=''\">{{ config.label }}</label>\n    <div class=\"dynamic-field form-datetime\">\n        <ng-datepicker class=\"form-input\" [formControlName]=\"config.name\"></ng-datepicker>\n\n    </div>\n</div>"
                },] },
    ];
    FormDatetimeComponent.propDecorators = {
        hostClass: [{ type: HostBinding, args: ['class',] }]
    };
    return FormDatetimeComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var FormButtonComponent = /** @class */ (function () {
    function FormButtonComponent(differs) {
        this.differ = differs.find([]).create(null);
    }
    Object.defineProperty(FormButtonComponent.prototype, "hostClass", {
        get: /**
         * @return {?}
         */
        function () {
            return this.config.divClass;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FormButtonComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    FormButtonComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            /** @type {?} */
            var change = _this.differ.diff(_this.btn);
            if (document.querySelector('form').className.includes('ng-invalid')
                && _this.config.inputType.toLowerCase() === 'submit') {
                _this.config.disabled = true;
            }
            else {
                _this.config.disabled = false;
            }
        }, 10);
    };
    FormButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'form-button',
                    styles: [""],
                    template: "<div *ngIf='!config.hidden' class=\"form-input\" [formGroup]=\"formGroup\">\n    <label [ngClass]=\"config.labelClass\" *ngIf=\"config.label && config.label!=''\">{{ config.label }}</label>\n    <div class=\"dynamic-field form-button\">\n        <button [disabled]=\"config.disabled\" [ngClass]=\"config.class\" type=\"submit\">\n        {{ config.text }}\n        </button>\n    </div>\n</div>"
                },] },
    ];
    /** @nocollapse */
    FormButtonComponent.ctorParameters = function () { return [
        { type: IterableDiffers }
    ]; };
    FormButtonComponent.propDecorators = {
        hostClass: [{ type: HostBinding, args: ['class',] }]
    };
    return FormButtonComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DynamicFormComponent = /** @class */ (function () {
    function DynamicFormComponent(fb) {
        this.fb = fb;
        this.config = [];
        this.submit = new EventEmitter();
    }
    Object.defineProperty(DynamicFormComponent.prototype, "controls", {
        get: /**
         * @return {?}
         */
        function () { return this.config.filter(function (_a) {
            var type = _a.type;
            return type !== 'button';
        }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormComponent.prototype, "changes", {
        get: /**
         * @return {?}
         */
        function () { return this.form.valueChanges; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormComponent.prototype, "valid", {
        get: /**
         * @return {?}
         */
        function () { return this.form.valid; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () { return this.form.value; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DynamicFormComponent.prototype.reset = /**
     * @return {?}
     */
    function () { this.form.reset(); };
    /**
     * @return {?}
     */
    DynamicFormComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.form = this.createGroup();
    };
    /**
     * Create FormGroup for the Form to be generated
     * @return {?}
     */
    DynamicFormComponent.prototype.createGroup = /**
     * Create FormGroup for the Form to be generated
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var formGroup = this.fb.group({});
        this.config.forEach(function (control) {
            formGroup.addControl(control.name, _this.createControl(control));
        });
        return formGroup;
    };
    /**
     * Create Form Control in FormBuilder
     * @param {?} config
     * @return {?}
     */
    DynamicFormComponent.prototype.createControl = /**
     * Create Form Control in FormBuilder
     * @param {?} config
     * @return {?}
     */
    function (config) {
        var disabled = config.disabled, validation = config.validation, value = config.value;
        return this.fb.control({ disabled: disabled, value: value }, validation);
    };
    /**
     * Handle Form Submit
     * @param event
     */
    /**
     * Handle Form Submit
     * @param {?} event
     * @return {?}
     */
    DynamicFormComponent.prototype.handleSubmit = /**
     * Handle Form Submit
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        event.stopPropagation();
        this.submit.emit(this.value);
    };
    /**
     * Disables an element in the form
     * @param name
     * @param disable
     */
    /**
     * Disables an element in the form
     * @param {?} name
     * @param {?} disable
     * @return {?}
     */
    DynamicFormComponent.prototype.setDisabled = /**
     * Disables an element in the form
     * @param {?} name
     * @param {?} disable
     * @return {?}
     */
    function (name, disable) {
        if (this.form.controls[name]) {
            /** @type {?} */
            var method = disable ? 'disable' : 'enable';
            this.form.controls[name][method]();
            return;
        }
        this.config = this.config.map(function (item) {
            if (item.name === name) {
                item.disabled = disable;
            }
            return item;
        });
    };
    /**
     * Sets value of a Form control/element
     * @param name
     * @param value
     */
    /**
     * Sets value of a Form control/element
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    DynamicFormComponent.prototype.setValue = /**
     * Sets value of a Form control/element
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    function (name, value) {
        this.form.controls[name].setValue(value, { emitEvent: true });
    };
    DynamicFormComponent.decorators = [
        { type: Component, args: [{
                    exportAs: 'dynamicForm',
                    // tslint:disable-next-line:component-selector
                    selector: 'dynamic-form',
                    styles: [".__ngx-form-container{display:flex;flex-wrap:wrap}"],
                    template: "<form [formGroup]=\"form\" #newForm=\"ngForm\" (ngSubmit)=\"handleSubmit($event)\">\n    <div class=\"__ngx-form-container\">\n        <div dynamicField *ngFor=\"let field of config\" [config]=\"field\" [formGroup]=\"form\">\n        </div>\n    </div>\n</form>"
                },] },
    ];
    /** @nocollapse */
    DynamicFormComponent.ctorParameters = function () { return [
        { type: FormBuilder }
    ]; };
    DynamicFormComponent.propDecorators = {
        config: [{ type: Input }],
        submit: [{ type: Output }]
    };
    return DynamicFormComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @type {?} */
var components = {
    button: FormButtonComponent,
    input: FormInputComponent,
    select: FormSelectComponent,
    file: FormFileUploadComponent,
    date: FormDatetimeComponent
};
var DynamicAddFieldDirective = /** @class */ (function () {
    function DynamicAddFieldDirective(resolver, vcr) {
        this.resolver = resolver;
        this.vcr = vcr;
    }
    /**
     * @return {?}
     */
    DynamicAddFieldDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!components[this.config.type]) {
            /** @type {?} */
            var supportedTypes = Object.keys(components).join(', ');
            throw new Error("Trying to use an unsupported type (" + this.config.type + ").\n            Supported types: " + supportedTypes);
        }
        /** @type {?} */
        var component = components[this.config.type];
        /** @type {?} */
        var factory = this.resolver.resolveComponentFactory(component);
        this.component = this.vcr.createComponent(factory);
        this.component.instance.config = this.config;
        this.component.instance.formGroup = this.formGroup;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    DynamicAddFieldDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.component) {
            this.component.instance.config = this.config;
            this.component.instance.formGroup = this.formGroup;
        }
    };
    DynamicAddFieldDirective.decorators = [
        { type: Directive, args: [{ selector: '[dynamicField]' },] },
    ];
    /** @nocollapse */
    DynamicAddFieldDirective.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: ViewContainerRef }
    ]; };
    DynamicAddFieldDirective.propDecorators = {
        config: [{ type: Input }],
        formGroup: [{ type: Input }]
    };
    return DynamicAddFieldDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DynamicFormModule$$1 = /** @class */ (function () {
    function DynamicFormModule$$1() {
    }
    DynamicFormModule$$1.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        NgDatepickerModule,
                        ReactiveFormsModule
                    ],
                    declarations: [
                        DynamicAddFieldDirective,
                        DynamicFormComponent,
                        FormInputComponent,
                        FormSelectComponent,
                        FormFileUploadComponent,
                        FormDatetimeComponent,
                        FormButtonComponent
                    ],
                    providers: [],
                    exports: [
                        NgDatepickerModule,
                        DynamicFormComponent
                    ], schemas: [
                        CUSTOM_ELEMENTS_SCHEMA
                    ],
                    entryComponents: [
                        FormInputComponent,
                        FormSelectComponent,
                        FormFileUploadComponent,
                        FormDatetimeComponent,
                        FormButtonComponent
                    ]
                },] },
    ];
    return DynamicFormModule$$1;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { FormInputComponent, FormSelectComponent, FormFileUploadComponent, FormDatetimeComponent, FormButtonComponent, DynamicFormComponent, DynamicAddFieldDirective, DynamicFormModule$$1 as DynamicFormModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWR5bmFtaWMtZm9ybS5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vbmd4LWR5bmFtaWMtZm9ybS9saWIvY29tcG9uZW50cy9mb3JtLWlucHV0L2Zvcm0taW5wdXQuY29tcG9uZW50LnRzIiwibmc6Ly9uZ3gtZHluYW1pYy1mb3JtL2xpYi9jb21wb25lbnRzL3NlbGVjdC9zZWxlY3QuY29tcG9uZW50LnRzIiwibmc6Ly9uZ3gtZHluYW1pYy1mb3JtL2xpYi9jb21wb25lbnRzL2ZpbGUtdXBsb2FkL2ZpbGUtdXBsb2FkLmNvbXBvbmVudC50cyIsIm5nOi8vbmd4LWR5bmFtaWMtZm9ybS9saWIvY29tcG9uZW50cy9kYXRldGltZS9kYXRldGltZS5jb21wb25lbnQudHMiLCJuZzovL25neC1keW5hbWljLWZvcm0vbGliL2NvbXBvbmVudHMvYnV0dG9uL2J1dHRvbi5jb21wb25lbnQudHMiLCJuZzovL25neC1keW5hbWljLWZvcm0vbGliL2NvbnRhaW5lcnMvZHluYW1pYy1mb3JtL2R5bmFtaWMtZm9ybS5jb21wb25lbnQudHMiLCJuZzovL25neC1keW5hbWljLWZvcm0vbGliL2RpcmVjdGl2ZXMvZHluYW1pYy1hZGQtZmllbGQvZHluYW1pYy1hZGQtZmllbGQuY29tcG9uZW50LnRzIiwibmc6Ly9uZ3gtZHluYW1pYy1mb3JtL2xpYi9keW5hbWljLWZvcm0ubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSG9zdEJpbmRpbmcgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEZpZWxkIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9maWVsZC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgRmllbGRDb25maWcgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL2ZpZWxkLWNvbmZpZy5pbnRlcmZhY2UnO1xuXG5cbkBDb21wb25lbnQoe1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjb21wb25lbnQtc2VsZWN0b3JcbiAgICBzZWxlY3RvcjogJ2Zvcm0taW5wdXQnLFxuICAgIHN0eWxlczogW2BpbnB1dFt0eXBlPXN1Ym1pdF17bWFyZ2luLXRvcDouNXJlbSAxcmVtfS5mb3JtLWlucHV0e2hlaWdodDozOHB4O2JvcmRlci1yYWRpdXM6My41cHg7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JvcmRlcjoxcHggc29saWQgI2JkYmRiZDttYXJnaW4tYm90dG9tOjE1cHh9bGFiZWx7bWFyZ2luLWJvdHRvbTo4cHg7Zm9udC1zaXplOjE2cHh9YCwgYGlucHV0W3R5cGU9c3VibWl0XXttYXJnaW4tdG9wOi41cmVtIDFyZW19LmZvcm0taW5wdXR7aGVpZ2h0OjM4cHg7Ym9yZGVyLXJhZGl1czozLjVweDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Ym9yZGVyOjFweCBzb2xpZCAjYmRiZGJkO21hcmdpbi1ib3R0b206MTVweH1sYWJlbHttYXJnaW4tYm90dG9tOjhweDtmb250LXNpemU6MTZweH1gXSxcbiAgICB0ZW1wbGF0ZTogYDxkaXYgKm5nSWY9JyFjb25maWcuaGlkZGVuJyBbZm9ybUdyb3VwXT1cImZvcm1Hcm91cFwiPlxuICAgIDxsYWJlbCBbbmdDbGFzc109XCJjb25maWcubGFiZWxDbGFzc1wiICpuZ0lmPVwiY29uZmlnLmxhYmVsICYmIGNvbmZpZy5sYWJlbCE9JydcIj57eyBjb25maWcubGFiZWwgfX08L2xhYmVsPlxuICAgIDxpbnB1dCAqbmdJZj1cImNvbmZpZy50eXBlID09PSdpbnB1dCcgJiYgIWNvbmZpZy5mcm9tRW51bSBcIiBjbGFzcz1cImZvcm0taW5wdXRcIiB2YWx1ZT17e2NvbmZpZy50ZXh0fX0gW2Rpc2FibGVkXT1cImNvbmZpZy5kaXNhYmxlZFwiIHR5cGU9e3tjb25maWcuaW5wdXRUeXBlfX0gW25nQ2xhc3NdPVwiY29uZmlnLmNsYXNzXCIgW2F0dHIucGxhY2Vob2xkZXJdPVwiY29uZmlnLnBsYWNlaG9sZGVyXCIgW2Zvcm1Db250cm9sTmFtZV09XCJjb25maWcubmFtZVwiXG4gICAgLz5cblxuICAgIDxzZWxlY3QgKm5nSWY9XCJjb25maWcudHlwZT09PSdzZWxlY3QnICYmICFjb25maWcuZnJvbUVudW0gJiYgIWNvbmZpZy5oaWRkZW5cIiBjbGFzcz1cImZvcm0taW5wdXRcIiBbZm9ybUNvbnRyb2xOYW1lXT1cImNvbmZpZy5uYW1lXCIgW25nQ2xhc3NdPWNvbmZpZy5jbGFzcz5cbiAgICAgICAgPG9wdGlvbiB2YWx1ZT0nJyBbc2VsZWN0ZWRdPVwidHJ1ZVwiPnt7IGNvbmZpZy5wbGFjZWhvbGRlciB9fTwvb3B0aW9uPlxuICAgICAgICA8b3B0aW9uIHZhbHVlPXt7b3B0aW9ufX1cbiAgICAgICAgICAgICAgICAqbmdGb3I9XCJsZXQgb3B0aW9uIG9mIGNvbmZpZy5vcHRpb25zXCI+XG4gICAgICAgICAgICAgICAge3tvcHRpb259fVxuICAgICAgICA8L29wdGlvbj5cbiAgICA8L3NlbGVjdD5cbiAgICA8c2VsZWN0IGNsYXNzPVwiZm9ybS1pbnB1dFwiICpuZ0lmPVwiY29uZmlnLnR5cGU9PT0nc2VsZWN0JyAmJiBjb25maWcuZnJvbUVudW0gJiYgIWNvbmZpZy5oaWRkZW5cIiBbZm9ybUNvbnRyb2xOYW1lXT1cImNvbmZpZy5uYW1lXCIgW25nQ2xhc3NdPWNvbmZpZy5jbGFzcz5cbiAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlwiIFtzZWxlY3RlZF09XCJ0cnVlXCI+e3sgY29uZmlnLnBsYWNlaG9sZGVyIH19PC9vcHRpb24+XG4gICAgICAgIDxvcHRpb24gdmFsdWU9e3tjb25maWcub3B0aW9uc1swXVtpXX19XG4gICAgICAgICAgICAgICAgKm5nRm9yPVwibGV0IG8gb2YgY29uZmlnLm9wdGlvbnNbMF07IGxldCBpPWluZGV4XCI+XG4gICAgICAgICAgICAgICAge3sgY29uZmlnLm9wdGlvbnNbMV1baV0gfX1cbiAgICAgICAgPC9vcHRpb24+XG4gICAgPC9zZWxlY3Q+XG5cbiAgICA8dGV4dGFyZWEgY2xhc3M9XCJmb3JtLWlucHV0XCIgKm5nSWY9XCJjb25maWcudHlwZT09PSd0ZXh0YXJlYScgJiYgIWNvbmZpZy5oaWRkZW5cIiBbZm9ybUNvbnRyb2xOYW1lXT1cImNvbmZpZy5uYW1lXCIgW2F0dHIucGxhY2Vob2xkZXJdPVwiY29uZmlnLnBsYWNlaG9sZGVyXCIgcm93cz17e2NvbmZpZy5yb3dzfX0gY29scz17e2NvbmZpZy5jb2xzfX0+PC90ZXh0YXJlYT5cblxuICAgIDxuZy1kYXRlcGlja2VyIGNsYXNzPVwiZm9ybS1pbnB1dFwiIFtuZ0NsYXNzXT1cImNvbmZpZy5jbGFzc1wiICpuZ0lmPVwiY29uZmlnLnR5cGUgPT09J2RhdGUnXCIgW2Zvcm1Db250cm9sTmFtZV09XCJjb25maWcubmFtZVwiPjwvbmctZGF0ZXBpY2tlcj5cbjwvZGl2PmBcbn0pXG5cbmV4cG9ydCBjbGFzcyBGb3JtSW5wdXRDb21wb25lbnQgaW1wbGVtZW50cyBGaWVsZCB7XG4gICAgY29uZmlnOiBGaWVsZENvbmZpZztcbiAgICBmb3JtR3JvdXA6IEZvcm1Hcm91cDtcbiAgICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcycpXG4gICAgZ2V0IGhvc3RDbGFzcygpOiBzdHJpbmcge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLmRpdkNsYXNzO1xuICAgICAgICB9XG59XG5cbiIsImltcG9ydCB7IENvbXBvbmVudCwgSG9zdEJpbmRpbmcgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgRmllbGQgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL2ZpZWxkLmludGVyZmFjZSc7XG5pbXBvcnQgeyBGaWVsZENvbmZpZyB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvZmllbGQtY29uZmlnLmludGVyZmFjZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Zvcm0tc2VsZWN0JyxcbiAgc3R5bGVzOiBbYGAsIGBpbnB1dFt0eXBlPXN1Ym1pdF17bWFyZ2luLXRvcDouNXJlbSAxcmVtfS5mb3JtLWlucHV0e2hlaWdodDozOHB4O2JvcmRlci1yYWRpdXM6My41cHg7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JvcmRlcjoxcHggc29saWQgI2JkYmRiZDttYXJnaW4tYm90dG9tOjE1cHh9bGFiZWx7bWFyZ2luLWJvdHRvbTo4cHg7Zm9udC1zaXplOjE2cHh9YF0sXG4gIHRlbXBsYXRlOiBgPGRpdiAqbmdJZj0nIWNvbmZpZy5oaWRkZW4nIFtmb3JtR3JvdXBdPVwiZm9ybUdyb3VwXCI+XG4gICAgPGxhYmVsIFtuZ0NsYXNzXT1cImNvbmZpZy5sYWJlbENsYXNzXCIgKm5nSWY9XCJjb25maWcubGFiZWwgJiYgY29uZmlnLmxhYmVsIT0nJ1wiPnt7IGNvbmZpZy5sYWJlbCB9fTwvbGFiZWw+XG4gICAgPGRpdiBjbGFzcz1cImR5bmFtaWMtZmllbGQgZm9ybS1zZWxlY3RcIj5cbiAgICAgICAgPHNlbGVjdCAqbmdJZj1cIiFjb25maWcuZW51bVwiIGNsYXNzPVwiZm9ybS1pbnB1dFwiIFtoaWRkZW5dPSdjb25maWcuaGlkZGVuJyBbZm9ybUNvbnRyb2xOYW1lXT1cImNvbmZpZy5uYW1lXCIgW25nQ2xhc3NdPWNvbmZpZy5jbGFzcz5cbiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPScnIFtzZWxlY3RlZF09XCJ0cnVlXCI+e3sgY29uZmlnLnBsYWNlaG9sZGVyIH19PC9vcHRpb24+XG4gICAgICAgICAgICAgICAgPG9wdGlvbiAqbmdGb3I9XCJsZXQgb3B0aW9uIG9mIGNvbmZpZy5vcHRpb25zXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIFt2YWx1ZV09J29wdGlvbic+XG4gICAgICAgICAgICAgICAgICAgICAgICB7e29wdGlvbn19XG4gICAgICAgICAgICAgICAgPC9vcHRpb24+XG5cbiAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgIDxzZWxlY3QgW2Zvcm1Db250cm9sTmFtZV09XCJjb25maWcubmFtZVwiIGNsYXNzPVwiZm9ybS1pbnB1dFwiIFtuZ0NsYXNzXT1jb25maWcuY2xhc3MgKm5nSWY9XCJjb25maWcuZW51bVwiPlxuICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9JycgW3NlbGVjdGVkXT1cInRydWVcIj57eyBjb25maWcucGxhY2Vob2xkZXIgfX08L29wdGlvbj5cbiAgICAgICAgICAgICAgICA8b3B0aW9uICpuZ0Zvcj1cImxldCBvIG9mIGVudW1Ub0FycmF5KGNvbmZpZy5lbnVtKVswXTsgbGV0IGk9aW5kZXhcIlxuICAgICAgICAgICAgICAgICAgICAgICAgW3ZhbHVlXT0nZW51bVRvQXJyYXkoY29uZmlnLmVudW0pWzBdW2ldJz5cbiAgICAgICAgICAgICAgICAgICAgICAgIHt7IGVudW1Ub0FycmF5KGNvbmZpZy5lbnVtKVsxXVtpXSB9fVxuICAgICAgICAgICAgICAgIDwvb3B0aW9uPlxuICAgICAgICA8L3NlbGVjdD5cbiAgICA8L2Rpdj5cbjwvZGl2PmBcbn0pXG5leHBvcnQgY2xhc3MgRm9ybVNlbGVjdENvbXBvbmVudCBpbXBsZW1lbnRzIEZpZWxkIHtcbiAgY29uZmlnOiBGaWVsZENvbmZpZztcbiAgZm9ybUdyb3VwOiBGb3JtR3JvdXA7XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcycpXG4gICAgZ2V0IGhvc3RDbGFzcygpOiBzdHJpbmcge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLmRpdkNsYXNzO1xuICAgICAgICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhbmQgRW51bSBPYmplY3QgdG8gYW4gQXJyYXkgXG4gICAqIEBwYXJhbSBhcmcgIEVudW1cbiAgICogQHJldHVybnMgQXJyYXk8QXJyYXk8YW55Pj5cbiAgICovXG4gIGVudW1Ub0FycmF5KGFyZzogT2JqZWN0KTogbnVtYmVyW10ge1xuICAgIGNvbnN0IG51bUtleUFyciA9IFtdOyBcbiAgICBjb25zdCB2YWxBcnIgPSBbXTsgXG4gICAgY29uc3QgcmV0dXJuZWRBcnJheSA9IFtdO1xuXG4gICAgY29uc3Qgb2JqS2V5cyA9IE9iamVjdC5rZXlzKGFyZyk7XG4gICAgICBvYmpLZXlzLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgY29uc3QgbnVtYmVyS2V5ID0gTnVtYmVyKGtleSlcbiAgICAgICAgaWYoIWlzTmFOKG51bWJlcktleSkpe1xuICAgICAgICBudW1LZXlBcnIucHVzaChudW1iZXJLZXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsQXJyLnB1c2goa2V5KVxuICAgICAgICB9O1xuICAgIH0pO1xuXG4gICAgcmV0dXJuZWRBcnJheVswXSA9IG51bUtleUFycjtcbiAgICByZXR1cm5lZEFycmF5WzFdID0gdmFsQXJyO1xuICAgIHJldHVybiByZXR1cm5lZEFycmF5O1xuICB9XG5cbn1cblxuXG5pbnRlcmZhY2UgU2VsZWN0Q29uZmlnIGV4dGVuZHMgRmllbGRDb25maWd7XG4gICAgZW51bTogYm9vbGVhbixcbiAgICBvcHRpb25zPzogc3RyaW5nW11cbn0iLCJpbXBvcnQgeyBDb21wb25lbnQsIEhvc3RCaW5kaW5nIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtR3JvdXAsIEZvcm1Db250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBGaWVsZCB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvZmllbGQuaW50ZXJmYWNlJztcbmltcG9ydCB7IEZpZWxkQ29uZmlnIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9maWVsZC1jb25maWcuaW50ZXJmYWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZm9ybS1maWxlLXVwbG9hZCcsXG4gIHN0eWxlczogW2BgLCBgaW5wdXRbdHlwZT1zdWJtaXRde21hcmdpbi10b3A6LjVyZW0gMXJlbX0uZm9ybS1pbnB1dHtoZWlnaHQ6MzhweDtib3JkZXItcmFkaXVzOjMuNXB4O2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3JkZXI6MXB4IHNvbGlkICNiZGJkYmQ7bWFyZ2luLWJvdHRvbToxNXB4fWxhYmVse21hcmdpbi1ib3R0b206OHB4O2ZvbnQtc2l6ZToxNnB4fWBdLFxuICB0ZW1wbGF0ZTogYDxkaXYgKm5nSWY9JyFjb25maWcuaGlkZGVuJyBbZm9ybUdyb3VwXT1cImZvcm1Hcm91cFwiPlxuICAgIDxsYWJlbCBbbmdDbGFzc109XCJjb25maWcubGFiZWxDbGFzc1wiICpuZ0lmPVwiY29uZmlnLmxhYmVsICYmIGNvbmZpZy5sYWJlbCE9JydcIj57eyBjb25maWcubGFiZWwgfX08L2xhYmVsPlxuICAgIDxkaXYgY2xhc3M9XCJkeW5hbWljLWZpZWxkIGZvcm0tc2VsZWN0XCI+XG4gICAgICAgIDxpbnB1dCBbZGlzYWJsZWRdPVwiY29uZmlnLmRpc2FibGVkXCIgY2xhc3M9XCJmb3JtLWlucHV0XCIgdHlwZT0nZmlsZScgKGNoYW5nZSk9J2hhbmRsZUZpbGVVcGxvYWQoJGV2ZW50KScgW2FjY2VwdF09XCJjb25maWcuYWNjZXB0XCIgW25nQ2xhc3NdPVwiY29uZmlnLmNsYXNzXCIgW2F0dHIucGxhY2Vob2xkZXJdPVwiY29uZmlnLnBsYWNlaG9sZGVyXCIgLz5cbiAgICA8L2Rpdj5cbjwvZGl2PmBcbn0pXG5leHBvcnQgY2xhc3MgRm9ybUZpbGVVcGxvYWRDb21wb25lbnQgaW1wbGVtZW50cyBGaWVsZCB7XG4gIGNvbmZpZzogRmlsZUNvbmZpZztcbiAgZm9ybUdyb3VwOiBGb3JtR3JvdXA7XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcycpXG4gICAgZ2V0IGhvc3RDbGFzcygpOiBzdHJpbmcge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLmRpdkNsYXNzO1xuICAgICAgICB9XG5cbiAgaGFuZGxlRmlsZVVwbG9hZChldmVudCl7XG4gICAgKDxGb3JtQ29udHJvbD50aGlzLmZvcm1Hcm91cC5jb250cm9sc1t0aGlzLmNvbmZpZy5uYW1lXSlcbiAgICAuc2V0VmFsdWUodGhpcy5jb25maWcubXVsdGlwbGU/ICBldmVudC5jdXJyZW50VGFyZ2V0LmZpbGVzOiBldmVudC5jdXJyZW50VGFyZ2V0LmZpbGVzWzBdKTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBGaWxlQ29uZmlnIGV4dGVuZHMgRmllbGRDb25maWd7XG4gICAgICBtdWx0aXBsZTogYm9vbGVhbixcbiAgICAgIGFjY2VwdDogc3RyaW5nLFxuXG59IiwiaW1wb3J0IHsgQ29tcG9uZW50LCBIb3N0QmluZGluZyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUdyb3VwLCBGb3JtQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgRmllbGQgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL2ZpZWxkLmludGVyZmFjZSc7XG5pbXBvcnQgeyBGaWVsZENvbmZpZyB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvZmllbGQtY29uZmlnLmludGVyZmFjZSc7XG5pbXBvcnQgeyBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlL3NyYy9tZXRhZGF0YS9saWZlY3ljbGVfaG9va3MnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdmb3JtLWRhdGV0aW1lJyxcbiAgc3R5bGVzOiBbYGAsIGBpbnB1dFt0eXBlPXN1Ym1pdF17bWFyZ2luLXRvcDouNXJlbSAxcmVtfS5mb3JtLWlucHV0e2hlaWdodDozOHB4O2JvcmRlci1yYWRpdXM6My41cHg7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JvcmRlcjoxcHggc29saWQgI2JkYmRiZDttYXJnaW4tYm90dG9tOjE1cHh9bGFiZWx7bWFyZ2luLWJvdHRvbTo4cHg7Zm9udC1zaXplOjE2cHh9YF0sXG4gIHRlbXBsYXRlOiBgPGRpdiAqbmdJZj0nIWNvbmZpZy5oaWRkZW4nIFtmb3JtR3JvdXBdPVwiZm9ybUdyb3VwXCI+XG4gICAgPGxhYmVsICpuZ0lmPVwiY29uZmlnLmxhYmVsICYmIGNvbmZpZy5sYWJlbCE9JydcIj57eyBjb25maWcubGFiZWwgfX08L2xhYmVsPlxuICAgIDxkaXYgY2xhc3M9XCJkeW5hbWljLWZpZWxkIGZvcm0tZGF0ZXRpbWVcIj5cbiAgICAgICAgPG5nLWRhdGVwaWNrZXIgY2xhc3M9XCJmb3JtLWlucHV0XCIgW2Zvcm1Db250cm9sTmFtZV09XCJjb25maWcubmFtZVwiPjwvbmctZGF0ZXBpY2tlcj5cblxuICAgIDwvZGl2PlxuPC9kaXY+YFxufSlcbmV4cG9ydCBjbGFzcyBGb3JtRGF0ZXRpbWVDb21wb25lbnQgaW1wbGVtZW50cyBGaWVsZCwgT25Jbml0IHtcbiAgXG4gIGNvbmZpZzogRmllbGRDb25maWc7XG4gIGZvcm1Hcm91cDogRm9ybUdyb3VwO1xuXG4gIEBIb3N0QmluZGluZygnY2xhc3MnKVxuICAgIGdldCBob3N0Q2xhc3MoKTogc3RyaW5nIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmZpZy5kaXZDbGFzcztcbiAgICAgICAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgICg8Rm9ybUNvbnRyb2w+dGhpcy5mb3JtR3JvdXAuY29udHJvbHNbdGhpcy5jb25maWcubmFtZV0pXG4gICAgLnNldFZhbHVlKG5ldyBEYXRlKCksIHsgb25seVNlbGY6IHRydWUgfSk7XG4gIH1cbn0iLCJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEl0ZXJhYmxlRGlmZmVycywgQWZ0ZXJWaWV3SW5pdCwgRG9DaGVjaywgSG9zdEJpbmRpbmcgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgRmllbGQgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL2ZpZWxkLmludGVyZmFjZSc7XG5pbXBvcnQgeyBGaWVsZENvbmZpZyB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvZmllbGQtY29uZmlnLmludGVyZmFjZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Zvcm0tYnV0dG9uJyxcbiAgc3R5bGVzOiBbYGBdLFxuICB0ZW1wbGF0ZTogYDxkaXYgKm5nSWY9JyFjb25maWcuaGlkZGVuJyBjbGFzcz1cImZvcm0taW5wdXRcIiBbZm9ybUdyb3VwXT1cImZvcm1Hcm91cFwiPlxuICAgIDxsYWJlbCBbbmdDbGFzc109XCJjb25maWcubGFiZWxDbGFzc1wiICpuZ0lmPVwiY29uZmlnLmxhYmVsICYmIGNvbmZpZy5sYWJlbCE9JydcIj57eyBjb25maWcubGFiZWwgfX08L2xhYmVsPlxuICAgIDxkaXYgY2xhc3M9XCJkeW5hbWljLWZpZWxkIGZvcm0tYnV0dG9uXCI+XG4gICAgICAgIDxidXR0b24gW2Rpc2FibGVkXT1cImNvbmZpZy5kaXNhYmxlZFwiIFtuZ0NsYXNzXT1cImNvbmZpZy5jbGFzc1wiIHR5cGU9XCJzdWJtaXRcIj5cbiAgICAgICAge3sgY29uZmlnLnRleHQgfX1cbiAgICAgICAgPC9idXR0b24+XG4gICAgPC9kaXY+XG48L2Rpdj5gXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1CdXR0b25Db21wb25lbnQgaW1wbGVtZW50cyBGaWVsZCwgQWZ0ZXJWaWV3SW5pdCwgRG9DaGVjayB7XG4gIGNvbmZpZzogRmllbGRDb25maWc7XG4gIGZvcm1Hcm91cDogRm9ybUdyb3VwO1xuICBkaWZmZXI6IGFueTtcbiAgYnRuOiBhbnk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgZGlmZmVyczogSXRlcmFibGVEaWZmZXJzKSB7XG4gICAgICB0aGlzLmRpZmZlciA9IGRpZmZlcnMuZmluZChbXSkuY3JlYXRlKG51bGwpO1xufVxuXG5cbkBIb3N0QmluZGluZygnY2xhc3MnKVxuZ2V0IGhvc3RDbGFzcygpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25maWcuZGl2Q2xhc3M7XG4gICAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgfVxuXG4gIG5nRG9DaGVjaygpIHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgY29uc3QgY2hhbmdlID0gdGhpcy5kaWZmZXIuZGlmZih0aGlzLmJ0bik7XG4gICAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZm9ybScpLmNsYXNzTmFtZS5pbmNsdWRlcygnbmctaW52YWxpZCcpXG4gICAgICAgICAgJiYgdGhpcy5jb25maWcuaW5wdXRUeXBlLnRvTG93ZXJDYXNlKCkgPT09ICdzdWJtaXQnKSB7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5kaXNhYmxlZCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNvbmZpZy5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0sIDEwICk7XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgRXZlbnRFbWl0dGVyLCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Hcm91cCwgRm9ybUJ1aWxkZXIgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBGaWVsZENvbmZpZyB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvZmllbGQtY29uZmlnLmludGVyZmFjZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbkBDb21wb25lbnQoe1xuICAgIGV4cG9ydEFzOiAnZHluYW1pY0Zvcm0nLFxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjb21wb25lbnQtc2VsZWN0b3JcbiAgICBzZWxlY3RvcjogJ2R5bmFtaWMtZm9ybScsXG4gICAgc3R5bGVzOiBbYC5fX25neC1mb3JtLWNvbnRhaW5lcntkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXB9YF0sXG4gICAgdGVtcGxhdGU6IGA8Zm9ybSBbZm9ybUdyb3VwXT1cImZvcm1cIiAjbmV3Rm9ybT1cIm5nRm9ybVwiIChuZ1N1Ym1pdCk9XCJoYW5kbGVTdWJtaXQoJGV2ZW50KVwiPlxuICAgIDxkaXYgY2xhc3M9XCJfX25neC1mb3JtLWNvbnRhaW5lclwiPlxuICAgICAgICA8ZGl2IGR5bmFtaWNGaWVsZCAqbmdGb3I9XCJsZXQgZmllbGQgb2YgY29uZmlnXCIgW2NvbmZpZ109XCJmaWVsZFwiIFtmb3JtR3JvdXBdPVwiZm9ybVwiPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbjwvZm9ybT5gXG59KVxuXG5leHBvcnQgY2xhc3MgRHluYW1pY0Zvcm1Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIEBJbnB1dCgpIGNvbmZpZzogRmllbGRDb25maWdbXSA9IFtdO1xuICAgIGZpZWxkO1xuXG4gICAgQE91dHB1dCgpICBzdWJtaXQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gICAgZm9ybTogRm9ybUdyb3VwO1xuXG4gICAgZ2V0IGNvbnRyb2xzKCkgeyByZXR1cm4gdGhpcy5jb25maWcuZmlsdGVyKCh7dHlwZX0pID0+IHR5cGUgIT09ICdidXR0b24nKTsgfVxuICAgIGdldCBjaGFuZ2VzKCkgeyByZXR1cm4gdGhpcy5mb3JtLnZhbHVlQ2hhbmdlczsgfVxuICAgIGdldCB2YWxpZCgpIHsgcmV0dXJuIHRoaXMuZm9ybS52YWxpZDsgfVxuICAgIGdldCB2YWx1ZSgpIHsgcmV0dXJuIHRoaXMuZm9ybS52YWx1ZTsgfVxuICAgIHJlc2V0KCl7IHRoaXMuZm9ybS5yZXNldCgpfVxuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBmYjogRm9ybUJ1aWxkZXIpIHtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5mb3JtID0gdGhpcy5jcmVhdGVHcm91cCgpO1xuICAgIFxuICAgIH1cblxuXG4gICAgIC8qKlxuICAgICAgKiBDcmVhdGUgRm9ybUdyb3VwIGZvciB0aGUgRm9ybSB0byBiZSBnZW5lcmF0ZWRcbiAgICAgICovXG4gICAgcHJpdmF0ZSBjcmVhdGVHcm91cCgpOiBGb3JtR3JvdXAge1xuICAgICAgICBjb25zdCBmb3JtR3JvdXAgPSB0aGlzLmZiLmdyb3VwKHt9KTtcbiAgICAgICAgdGhpcy5jb25maWcuZm9yRWFjaChjb250cm9sID0+IHtcbiAgICAgICAgICAgIGZvcm1Hcm91cC5hZGRDb250cm9sKGNvbnRyb2wubmFtZSwgdGhpcy5jcmVhdGVDb250cm9sKGNvbnRyb2wpKTtcbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIGZvcm1Hcm91cDtcbiAgICB9XG5cbiAgICAgLyoqXG4gICAgICAqIENyZWF0ZSBGb3JtIENvbnRyb2wgaW4gRm9ybUJ1aWxkZXJcbiAgICAgICogQHBhcmFtIGNvbmZpZyBcbiAgICAgICovXG4gICAgcHJpdmF0ZSBjcmVhdGVDb250cm9sKGNvbmZpZzogRmllbGRDb25maWcpIHtcbiAgICAgICAgY29uc3QgeyBkaXNhYmxlZCwgdmFsaWRhdGlvbiwgdmFsdWUgfSA9IGNvbmZpZztcbiAgICAgICAgcmV0dXJuIHRoaXMuZmIuY29udHJvbCh7IGRpc2FibGVkLCB2YWx1ZSB9LCB2YWxpZGF0aW9uKTtcbiAgICB9XG5cblxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIEZvcm0gU3VibWl0XG4gICAgICogQHBhcmFtIGV2ZW50IFxuICAgICAqL1xuICAgIGhhbmRsZVN1Ym1pdChldmVudDogRXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHRoaXMuc3VibWl0LmVtaXQodGhpcy52YWx1ZSk7XG4gICAgfVxuXG5cbi8qKlxuICogRGlzYWJsZXMgYW4gZWxlbWVudCBpbiB0aGUgZm9ybVxuICogQHBhcmFtIG5hbWUgXG4gKiBAcGFyYW0gZGlzYWJsZSBcbiAqL1xuICAgIHNldERpc2FibGVkKG5hbWU6IHN0cmluZywgZGlzYWJsZTogYm9vbGVhbikge1xuICAgICAgICBpZiAodGhpcy5mb3JtLmNvbnRyb2xzW25hbWVdKSB7XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IGRpc2FibGUgPyAnZGlzYWJsZScgOiAnZW5hYmxlJztcbiAgICAgICAgdGhpcy5mb3JtLmNvbnRyb2xzW25hbWVdW21ldGhvZF0oKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jb25maWcgPSB0aGlzLmNvbmZpZy5tYXAoKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGlmIChpdGVtLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICAgICAgICBpdGVtLmRpc2FibGVkID0gZGlzYWJsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHZhbHVlIG9mIGEgRm9ybSBjb250cm9sL2VsZW1lbnRcbiAgICAgKiBAcGFyYW0gbmFtZSBcbiAgICAgKiBAcGFyYW0gdmFsdWUgXG4gICAgICovXG4gICAgc2V0VmFsdWUobmFtZTogc3RyaW5nLCB2YWx1ZTogYW55KSB7XG4gICAgdGhpcy5mb3JtLmNvbnRyb2xzW25hbWVdLnNldFZhbHVlKHZhbHVlLCB7ZW1pdEV2ZW50OiB0cnVlfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgRGlyZWN0aXZlLFxuICAgICAgICBJbnB1dCxcbiAgICAgICAgVmlld0NvbnRhaW5lclJlZixcbiAgICAgICAgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICAgICAgICBPbkluaXQsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyxcbiAgICAgICAgQ29tcG9uZW50UmVmLCBcbiAgICAgICAgVHlwZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJ1xuXG5pbXBvcnQgeyBGaWVsZCB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvZmllbGQuaW50ZXJmYWNlJztcbmltcG9ydCB7IEZpZWxkQ29uZmlnfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL2ZpZWxkLWNvbmZpZy5pbnRlcmZhY2UnO1xuXG5pbXBvcnQgeyBGb3JtSW5wdXRDb21wb25lbnQgfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2Zvcm0taW5wdXQvZm9ybS1pbnB1dC5jb21wb25lbnQnO1xuaW1wb3J0IHsgRm9ybUJ1dHRvbkNvbXBvbmVudCB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvYnV0dG9uL2J1dHRvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgRm9ybVNlbGVjdENvbXBvbmVudCB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvc2VsZWN0L3NlbGVjdC5jb21wb25lbnQnO1xuaW1wb3J0IHsgRm9ybUZpbGVVcGxvYWRDb21wb25lbnQgfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2ZpbGUtdXBsb2FkL2ZpbGUtdXBsb2FkLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBGb3JtRGF0ZXRpbWVDb21wb25lbnQgfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2RhdGV0aW1lL2RhdGV0aW1lLmNvbXBvbmVudCc7XG5cbmNvbnN0IGNvbXBvbmVudHM6IHtbdHlwZTogc3RyaW5nXTogVHlwZTxGaWVsZD59ID0ge1xuICBidXR0b246IEZvcm1CdXR0b25Db21wb25lbnQsXG4gIGlucHV0OiBGb3JtSW5wdXRDb21wb25lbnQsXG4gIHNlbGVjdDogRm9ybVNlbGVjdENvbXBvbmVudCxcbiAgZmlsZTogRm9ybUZpbGVVcGxvYWRDb21wb25lbnQsXG4gIGRhdGU6IEZvcm1EYXRldGltZUNvbXBvbmVudFxufTtcblxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW2R5bmFtaWNGaWVsZF0nIH0pXG5leHBvcnQgY2xhc3MgRHluYW1pY0FkZEZpZWxkRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBGaWVsZCwgT25DaGFuZ2VzIHtcblxuICBASW5wdXQoKSBjb25maWc7XG4gIEBJbnB1dCgpIGZvcm1Hcm91cDogRm9ybUdyb3VwO1xuXG4gIGNvbXBvbmVudDogQ29tcG9uZW50UmVmPEZpZWxkPjtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICAgICAgICAgICAgICBwcml2YXRlIHZjcjogVmlld0NvbnRhaW5lclJlZikge1xuXG4gICAgICAgICAgICAgICAgfVxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xuICAgICAgaWYgKCFjb21wb25lbnRzW3RoaXMuY29uZmlnLnR5cGVdKSB7XG4gICAgICAgICAgY29uc3Qgc3VwcG9ydGVkVHlwZXMgPSBPYmplY3Qua2V5cyhjb21wb25lbnRzKS5qb2luKCcsICcpO1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIGBUcnlpbmcgdG8gdXNlIGFuIHVuc3VwcG9ydGVkIHR5cGUgKCR7dGhpcy5jb25maWcudHlwZX0pLlxuICAgICAgICAgICAgU3VwcG9ydGVkIHR5cGVzOiAke3N1cHBvcnRlZFR5cGVzfWBcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY29tcG9uZW50ID0gY29tcG9uZW50c1t0aGlzLmNvbmZpZy50eXBlXTtcbiAgICAgICAgY29uc3QgZmFjdG9yeSA9IHRoaXMucmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3Rvcnk8RmllbGQ+KGNvbXBvbmVudCk7XG4gICAgICAgIHRoaXMuY29tcG9uZW50ID0gdGhpcy52Y3IuY3JlYXRlQ29tcG9uZW50KGZhY3RvcnkpO1xuICAgICAgICB0aGlzLmNvbXBvbmVudC5pbnN0YW5jZS5jb25maWcgPSB0aGlzLmNvbmZpZztcbiAgICAgICAgdGhpcy5jb21wb25lbnQuaW5zdGFuY2UuZm9ybUdyb3VwID0gdGhpcy5mb3JtR3JvdXA7XG4gICAgfVxuXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmICh0aGlzLmNvbXBvbmVudCkgIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnQuaW5zdGFuY2UuY29uZmlnID0gdGhpcy5jb25maWc7XG4gICAgICAgIHRoaXMuY29tcG9uZW50Lmluc3RhbmNlLmZvcm1Hcm91cCA9IHRoaXMuZm9ybUdyb3VwO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgTmdNb2R1bGUsIENVU1RPTV9FTEVNRU5UU19TQ0hFTUEgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBSZWFjdGl2ZUZvcm1zTW9kdWxlLCBGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IE5nRGF0ZXBpY2tlck1vZHVsZSB9IGZyb20gJ25nMi1kYXRlcGlja2VyJztcblxuaW1wb3J0IHsgRHluYW1pY0Zvcm1Db21wb25lbnQgfSBmcm9tICcuL2NvbnRhaW5lcnMvZHluYW1pYy1mb3JtL2R5bmFtaWMtZm9ybS5jb21wb25lbnQnO1xuXG5pbXBvcnQgeyBGb3JtSW5wdXRDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvZm9ybS1pbnB1dC9mb3JtLWlucHV0LmNvbXBvbmVudCc7XG5pbXBvcnQge0R5bmFtaWNBZGRGaWVsZERpcmVjdGl2ZX0gZnJvbSAnLi9kaXJlY3RpdmVzL2R5bmFtaWMtYWRkLWZpZWxkL2R5bmFtaWMtYWRkLWZpZWxkLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBGb3JtU2VsZWN0Q29tcG9uZW50LCBGb3JtRmlsZVVwbG9hZENvbXBvbmVudCwgRm9ybURhdGV0aW1lQ29tcG9uZW50LCBGb3JtQnV0dG9uQ29tcG9uZW50IH0gZnJvbSAnLi4vcHVibGljX2FwaSc7XG5cblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZSxcbiAgICBGb3Jtc01vZHVsZSxcbiAgICBOZ0RhdGVwaWNrZXJNb2R1bGUsXG4gICAgUmVhY3RpdmVGb3Jtc01vZHVsZVxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICAgIER5bmFtaWNBZGRGaWVsZERpcmVjdGl2ZSxcbiAgICAgIER5bmFtaWNGb3JtQ29tcG9uZW50LFxuICAgICAgRm9ybUlucHV0Q29tcG9uZW50LFxuICAgICAgRm9ybVNlbGVjdENvbXBvbmVudCxcbiAgICAgIEZvcm1GaWxlVXBsb2FkQ29tcG9uZW50LFxuICAgICAgRm9ybURhdGV0aW1lQ29tcG9uZW50LFxuICAgICAgRm9ybUJ1dHRvbkNvbXBvbmVudFxuICBdLFxuICBwcm92aWRlcnM6IFtcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIE5nRGF0ZXBpY2tlck1vZHVsZSxcbiAgICBEeW5hbWljRm9ybUNvbXBvbmVudFxuICBdLCBzY2hlbWFzOiBbXG4gICAgQ1VTVE9NX0VMRU1FTlRTX1NDSEVNQVxuXSxcbiAgZW50cnlDb21wb25lbnRzOiBbXG4gICAgRm9ybUlucHV0Q29tcG9uZW50LFxuICAgIEZvcm1TZWxlY3RDb21wb25lbnQsXG4gICAgRm9ybUZpbGVVcGxvYWRDb21wb25lbnQsXG4gICAgRm9ybURhdGV0aW1lQ29tcG9uZW50LFxuICAgIEZvcm1CdXR0b25Db21wb25lbnRcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBEeW5hbWljRm9ybU1vZHVsZSB7fVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0lBdUNJO0tBQWlCO0lBRWpCLHNCQUNJLHlDQUFTOzs7O1FBRGI7WUFFUSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1NBQy9COzs7T0FBQTs7Z0JBdENSLFNBQVMsU0FBQzs7b0JBRVAsUUFBUSxFQUFFLFlBQVk7b0JBQ3RCLE1BQU0sRUFBRSxDQUFDLGdNQUFnTSxFQUFFLGdNQUFnTSxDQUFDO29CQUM1WSxRQUFRLEVBQUUsbW9EQXVCUDtpQkFDTjs7Ozs7NEJBT0ksV0FBVyxTQUFDLE9BQU87OzZCQXpDeEI7Ozs7Ozs7QUNBQTs7O0lBa0NFLHNCQUNNLDBDQUFTOzs7O1FBRGY7WUFFVSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1NBQy9COzs7T0FBQTs7Ozs7Ozs7Ozs7SUFNUCx5Q0FBVzs7Ozs7SUFBWCxVQUFZLEdBQVc7O1FBQ3JCLElBQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQzs7UUFDckIsSUFBTSxNQUFNLEdBQUcs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