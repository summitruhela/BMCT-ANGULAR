/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input, EventEmitter, Output } from '@angular/core';
import { FormBuilder } from '@angular/forms';
var DynamicFormComponent = /** @class */ (function () {
    function DynamicFormComponent(fb) {
        this.fb = fb;
        this.config = [];
        this.submit = new EventEmitter();
    }
    Object.defineProperty(DynamicFormComponent.prototype, "controls", {
        get: /**
         * @return {?}
         */
        function () { return this.config.filter(function (_a) {
            var type = _a.type;
            return type !== 'button';
        }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormComponent.prototype, "changes", {
        get: /**
         * @return {?}
         */
        function () { return this.form.valueChanges; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormComponent.prototype, "valid", {
        get: /**
         * @return {?}
         */
        function () { return this.form.valid; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicFormComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () { return this.form.value; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DynamicFormComponent.prototype.reset = /**
     * @return {?}
     */
    function () { this.form.reset(); };
    /**
     * @return {?}
     */
    DynamicFormComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.form = this.createGroup();
    };
    /**
     * Create FormGroup for the Form to be generated
     * @return {?}
     */
    DynamicFormComponent.prototype.createGroup = /**
     * Create FormGroup for the Form to be generated
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var formGroup = this.fb.group({});
        this.config.forEach(function (control) {
            formGroup.addControl(control.name, _this.createControl(control));
        });
        return formGroup;
    };
    /**
     * Create Form Control in FormBuilder
     * @param {?} config
     * @return {?}
     */
    DynamicFormComponent.prototype.createControl = /**
     * Create Form Control in FormBuilder
     * @param {?} config
     * @return {?}
     */
    function (config) {
        var disabled = config.disabled, validation = config.validation, value = config.value;
        return this.fb.control({ disabled: disabled, value: value }, validation);
    };
    /**
     * Handle Form Submit
     * @param event
     */
    /**
     * Handle Form Submit
     * @param {?} event
     * @return {?}
     */
    DynamicFormComponent.prototype.handleSubmit = /**
     * Handle Form Submit
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        event.stopPropagation();
        this.submit.emit(this.value);
    };
    /**
     * Disables an element in the form
     * @param name
     * @param disable
     */
    /**
     * Disables an element in the form
     * @param {?} name
     * @param {?} disable
     * @return {?}
     */
    DynamicFormComponent.prototype.setDisabled = /**
     * Disables an element in the form
     * @param {?} name
     * @param {?} disable
     * @return {?}
     */
    function (name, disable) {
        if (this.form.controls[name]) {
            /** @type {?} */
            var method = disable ? 'disable' : 'enable';
            this.form.controls[name][method]();
            return;
        }
        this.config = this.config.map(function (item) {
            if (item.name === name) {
                item.disabled = disable;
            }
            return item;
        });
    };
    /**
     * Sets value of a Form control/element
     * @param name
     * @param value
     */
    /**
     * Sets value of a Form control/element
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    DynamicFormComponent.prototype.setValue = /**
     * Sets value of a Form control/element
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    function (name, value) {
        this.form.controls[name].setValue(value, { emitEvent: true });
    };
    DynamicFormComponent.decorators = [
        { type: Component, args: [{
                    exportAs: 'dynamicForm',
                    // tslint:disable-next-line:component-selector
                    selector: 'dynamic-form',
                    styles: [".__ngx-form-container{display:flex;flex-wrap:wrap}"],
                    template: "<form [formGroup]=\"form\" #newForm=\"ngForm\" (ngSubmit)=\"handleSubmit($event)\">\n    <div class=\"__ngx-form-container\">\n        <div dynamicField *ngFor=\"let field of config\" [config]=\"field\" [formGroup]=\"form\">\n        </div>\n    </div>\n</form>"
                },] },
    ];
    /** @nocollapse */
    DynamicFormComponent.ctorParameters = function () { return [
        { type: FormBuilder }
    ]; };
    DynamicFormComponent.propDecorators = {
        config: [{ type: Input }],
        submit: [{ type: Output }]
    };
    return DynamicFormComponent;
}());
export { DynamicFormComponent };
function DynamicFormComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    DynamicFormComponent.prototype.config;
    /** @type {?} */
    DynamicFormComponent.prototype.field;
    /** @type {?} */
    DynamicFormComponent.prototype.submit;
    /** @type {?} */
    DynamicFormComponent.prototype.form;
    /** @type {?} */
    DynamicFormComponent.prototype.fb;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1mb3JtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1keW5hbWljLWZvcm0vIiwic291cmNlcyI6WyJsaWIvY29udGFpbmVycy9keW5hbWljLWZvcm0vZHluYW1pYy1mb3JtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRSxPQUFPLEVBQWEsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0lBOEJwRCw4QkFBb0IsRUFBZTtRQUFmLE9BQUUsR0FBRixFQUFFLENBQWE7c0JBWkYsRUFBRTtzQkFHSSxJQUFJLFlBQVksRUFBTztLQVU3RDtJQVBELHNCQUFJLDBDQUFROzs7O1FBQVosY0FBaUIsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQUMsRUFBTTtnQkFBTCxjQUFJO1lBQU0sT0FBQSxJQUFJLEtBQUssUUFBUTtRQUFqQixDQUFpQixDQUFDLENBQUMsRUFBRTs7O09BQUE7SUFDNUUsc0JBQUkseUNBQU87Ozs7UUFBWCxjQUFnQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRTs7O09BQUE7SUFDaEQsc0JBQUksdUNBQUs7Ozs7UUFBVCxjQUFjLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFOzs7T0FBQTtJQUN2QyxzQkFBSSx1Q0FBSzs7OztRQUFULGNBQWMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7OztPQUFBOzs7O0lBQ3ZDLG9DQUFLOzs7SUFBTCxjQUFTLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUEsRUFBQzs7OztJQUszQix1Q0FBUTs7O0lBQVI7UUFDSSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztLQUVsQzs7Ozs7SUFNTywwQ0FBVzs7Ozs7OztRQUNmLElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQUEsT0FBTztZQUN2QixTQUFTLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsS0FBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1NBQ25FLENBQUMsQ0FBQTtRQUNGLE1BQU0sQ0FBQyxTQUFTLENBQUM7Ozs7Ozs7SUFPYiw0Q0FBYTs7Ozs7Y0FBQyxNQUFtQjtRQUM3QixJQUFBLDBCQUFRLEVBQUUsOEJBQVUsRUFBRSxvQkFBSyxDQUFZO1FBQy9DLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLFFBQVEsVUFBQSxFQUFFLEtBQUssT0FBQSxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7O0lBSzVEOzs7T0FHRzs7Ozs7O0lBQ0gsMkNBQVk7Ozs7O0lBQVosVUFBYSxLQUFZO1FBQ3JCLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN2QixLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ2hDO0lBR0w7Ozs7T0FJRzs7Ozs7OztJQUNDLDBDQUFXOzs7Ozs7SUFBWCxVQUFZLElBQVksRUFBRSxPQUFnQjtRQUN0QyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7O1lBQy9CLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7WUFDOUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztZQUNuQyxNQUFNLENBQUM7U0FDTjtRQUVELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBQyxJQUFJO1lBQy9CLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDckIsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7YUFDM0I7WUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDO1NBQ2YsQ0FBQyxDQUFDO0tBQ047SUFFRDs7OztPQUlHOzs7Ozs7O0lBQ0gsdUNBQVE7Ozs7OztJQUFSLFVBQVMsSUFBWSxFQUFFLEtBQVU7UUFDakMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO0tBQzNEOztnQkEvRkosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxhQUFhOztvQkFFdkIsUUFBUSxFQUFFLGNBQWM7b0JBQ3hCLE1BQU0sRUFBRSxDQUFDLG9EQUFvRCxDQUFDO29CQUM5RCxRQUFRLEVBQUUsdVFBS047aUJBQ1A7Ozs7Z0JBZm1CLFdBQVc7Ozt5QkFrQjFCLEtBQUs7eUJBR0wsTUFBTTs7K0JBdEJYOztTQWtCYSxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIEV2ZW50RW1pdHRlciwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtR3JvdXAsIEZvcm1CdWlsZGVyIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgRmllbGRDb25maWcgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL2ZpZWxkLWNvbmZpZy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBleHBvcnRBczogJ2R5bmFtaWNGb3JtJyxcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Y29tcG9uZW50LXNlbGVjdG9yXG4gICAgc2VsZWN0b3I6ICdkeW5hbWljLWZvcm0nLFxuICAgIHN0eWxlczogW2AuX19uZ3gtZm9ybS1jb250YWluZXJ7ZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwfWBdLFxuICAgIHRlbXBsYXRlOiBgPGZvcm0gW2Zvcm1Hcm91cF09XCJmb3JtXCIgI25ld0Zvcm09XCJuZ0Zvcm1cIiAobmdTdWJtaXQpPVwiaGFuZGxlU3VibWl0KCRldmVudClcIj5cbiAgICA8ZGl2IGNsYXNzPVwiX19uZ3gtZm9ybS1jb250YWluZXJcIj5cbiAgICAgICAgPGRpdiBkeW5hbWljRmllbGQgKm5nRm9yPVwibGV0IGZpZWxkIG9mIGNvbmZpZ1wiIFtjb25maWddPVwiZmllbGRcIiBbZm9ybUdyb3VwXT1cImZvcm1cIj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG48L2Zvcm0+YFxufSlcblxuZXhwb3J0IGNsYXNzIER5bmFtaWNGb3JtQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBASW5wdXQoKSBjb25maWc6IEZpZWxkQ29uZmlnW10gPSBbXTtcbiAgICBmaWVsZDtcblxuICAgIEBPdXRwdXQoKSAgc3VibWl0OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICAgIGZvcm06IEZvcm1Hcm91cDtcblxuICAgIGdldCBjb250cm9scygpIHsgcmV0dXJuIHRoaXMuY29uZmlnLmZpbHRlcigoe3R5cGV9KSA9PiB0eXBlICE9PSAnYnV0dG9uJyk7IH1cbiAgICBnZXQgY2hhbmdlcygpIHsgcmV0dXJuIHRoaXMuZm9ybS52YWx1ZUNoYW5nZXM7IH1cbiAgICBnZXQgdmFsaWQoKSB7IHJldHVybiB0aGlzLmZvcm0udmFsaWQ7IH1cbiAgICBnZXQgdmFsdWUoKSB7IHJldHVybiB0aGlzLmZvcm0udmFsdWU7IH1cbiAgICByZXNldCgpeyB0aGlzLmZvcm0ucmVzZXQoKX1cblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZmI6IEZvcm1CdWlsZGVyKSB7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMuZm9ybSA9IHRoaXMuY3JlYXRlR3JvdXAoKTtcbiAgICBcbiAgICB9XG5cblxuICAgICAvKipcbiAgICAgICogQ3JlYXRlIEZvcm1Hcm91cCBmb3IgdGhlIEZvcm0gdG8gYmUgZ2VuZXJhdGVkXG4gICAgICAqL1xuICAgIHByaXZhdGUgY3JlYXRlR3JvdXAoKTogRm9ybUdyb3VwIHtcbiAgICAgICAgY29uc3QgZm9ybUdyb3VwID0gdGhpcy5mYi5ncm91cCh7fSk7XG4gICAgICAgIHRoaXMuY29uZmlnLmZvckVhY2goY29udHJvbCA9PiB7XG4gICAgICAgICAgICBmb3JtR3JvdXAuYWRkQ29udHJvbChjb250cm9sLm5hbWUsIHRoaXMuY3JlYXRlQ29udHJvbChjb250cm9sKSk7XG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiBmb3JtR3JvdXA7XG4gICAgfVxuXG4gICAgIC8qKlxuICAgICAgKiBDcmVhdGUgRm9ybSBDb250cm9sIGluIEZvcm1CdWlsZGVyXG4gICAgICAqIEBwYXJhbSBjb25maWcgXG4gICAgICAqL1xuICAgIHByaXZhdGUgY3JlYXRlQ29udHJvbChjb25maWc6IEZpZWxkQ29uZmlnKSB7XG4gICAgICAgIGNvbnN0IHsgZGlzYWJsZWQsIHZhbGlkYXRpb24sIHZhbHVlIH0gPSBjb25maWc7XG4gICAgICAgIHJldHVybiB0aGlzLmZiLmNvbnRyb2woeyBkaXNhYmxlZCwgdmFsdWUgfSwgdmFsaWRhdGlvbik7XG4gICAgfVxuXG5cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZSBGb3JtIFN1Ym1pdFxuICAgICAqIEBwYXJhbSBldmVudCBcbiAgICAgKi9cbiAgICBoYW5kbGVTdWJtaXQoZXZlbnQ6IEV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB0aGlzLnN1Ym1pdC5lbWl0KHRoaXMudmFsdWUpO1xuICAgIH1cblxuXG4vKipcbiAqIERpc2FibGVzIGFuIGVsZW1lbnQgaW4gdGhlIGZvcm1cbiAqIEBwYXJhbSBuYW1lIFxuICogQHBhcmFtIGRpc2FibGUgXG4gKi9cbiAgICBzZXREaXNhYmxlZChuYW1lOiBzdHJpbmcsIGRpc2FibGU6IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKHRoaXMuZm9ybS5jb250cm9sc1tuYW1lXSkge1xuICAgICAgICBjb25zdCBtZXRob2QgPSBkaXNhYmxlID8gJ2Rpc2FibGUnIDogJ2VuYWJsZSc7XG4gICAgICAgIHRoaXMuZm9ybS5jb250cm9sc1tuYW1lXVttZXRob2RdKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY29uZmlnID0gdGhpcy5jb25maWcubWFwKChpdGVtKSA9PiB7XG4gICAgICAgICAgICBpZiAoaXRlbS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgICAgICAgaXRlbS5kaXNhYmxlZCA9IGRpc2FibGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB2YWx1ZSBvZiBhIEZvcm0gY29udHJvbC9lbGVtZW50XG4gICAgICogQHBhcmFtIG5hbWUgXG4gICAgICogQHBhcmFtIHZhbHVlIFxuICAgICAqL1xuICAgIHNldFZhbHVlKG5hbWU6IHN0cmluZywgdmFsdWU6IGFueSkge1xuICAgIHRoaXMuZm9ybS5jb250cm9sc1tuYW1lXS5zZXRWYWx1ZSh2YWx1ZSwge2VtaXRFdmVudDogdHJ1ZX0pO1xuICAgIH1cbn1cbiJdfQ==