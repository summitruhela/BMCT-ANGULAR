!function(o,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/core"),require("@angular/forms"),require("@angular/common"),require("ng2-datepicker")):"function"==typeof define&&define.amd?define("ngx-dynamic-form",["exports","@angular/core","@angular/forms","@angular/common","ng2-datepicker"],e):e(o["ngx-dynamic-form"]={},o.ng.core,o.ng.forms,o.ng.common,null)}(this,function(o,e,n,t,r){"use strict";var i=function(){function o(){}return Object.defineProperty(o.prototype,"hostClass",{get:function(){return this.config.divClass},enumerable:!0,configurable:!0}),o.decorators=[{type:e.Component,args:[{selector:"form-input",styles:["input[type=submit]{margin-top:.5rem 1rem}.form-input{height:38px;border-radius:3.5px;background-color:#fff;border:1px solid #bdbdbd;margin-bottom:15px}label{margin-bottom:8px;font-size:16px}","input[type=submit]{margin-top:.5rem 1rem}.form-input{height:38px;border-radius:3.5px;background-color:#fff;border:1px solid #bdbdbd;margin-bottom:15px}label{margin-bottom:8px;font-size:16px}"],template:'<div *ngIf=\'!config.hidden\' [formGroup]="formGroup">\n    <label [ngClass]="config.labelClass" *ngIf="config.label && config.label!=\'\'">{{ config.label }}</label>\n    <input *ngIf="config.type ===\'input\' && !config.fromEnum " class="form-input" value={{config.text}} [disabled]="config.disabled" type={{config.inputType}} [ngClass]="config.class" [attr.placeholder]="config.placeholder" [formControlName]="config.name"\n    />\n\n    <select *ngIf="config.type===\'select\' && !config.fromEnum && !config.hidden" class="form-input" [formControlName]="config.name" [ngClass]=config.class>\n        <option value=\'\' [selected]="true">{{ config.placeholder }}</option>\n        <option value={{option}}\n                *ngFor="let option of config.options">\n                {{option}}\n        </option>\n    </select>\n    <select class="form-input" *ngIf="config.type===\'select\' && config.fromEnum && !config.hidden" [formControlName]="config.name" [ngClass]=config.class>\n        <option value="" [selected]="true">{{ config.placeholder }}</option>\n        <option value={{config.options[0][i]}}\n                *ngFor="let o of config.options[0]; let i=index">\n                {{ config.options[1][i] }}\n        </option>\n    </select>\n\n    <textarea class="form-input" *ngIf="config.type===\'textarea\' && !config.hidden" [formControlName]="config.name" [attr.placeholder]="config.placeholder" rows={{config.rows}} cols={{config.cols}}></textarea>\n\n    <ng-datepicker class="form-input" [ngClass]="config.class" *ngIf="config.type ===\'date\'" [formControlName]="config.name"></ng-datepicker>\n</div>'}]}],o.ctorParameters=function(){return[]},o.propDecorators={hostClass:[{type:e.HostBinding,args:["class"]}]},o}(),s=function(){function o(){}return Object.defineProperty(o.prototype,"hostClass",{get:function(){return this.config.divClass},enumerable:!0,configurable:!0}),o.prototype.enumToArray=function(o){var n=[],t=[],e=[];return Object.keys(o).forEach(function(o){var e=Number(o);isNaN(e)?t.push(o):n.push(e)}),e[0]=n,e[1]=t,e},o.decorators=[{type:e.Component,args:[{selector:"form-select",styles:["","input[type=submit]{margin-top:.5rem 1rem}.form-input{height:38px;border-radius:3.5px;background-color:#fff;border:1px solid #bdbdbd;margin-bottom:15px}label{margin-bottom:8px;font-size:16px}"],template:'<div *ngIf=\'!config.hidden\' [formGroup]="formGroup">\n    <label [ngClass]="config.labelClass" *ngIf="config.label && config.label!=\'\'">{{ config.label }}</label>\n    <div class="dynamic-field form-select">\n        <select *ngIf="!config.enum" class="form-input" [hidden]=\'config.hidden\' [formControlName]="config.name" [ngClass]=config.class>\n                <option value=\'\' [selected]="true">{{ config.placeholder }}</option>\n                <option *ngFor="let option of config.options"\n                        [value]=\'option\'>\n                        {{option}}\n                </option>\n\n        </select>\n        <select [formControlName]="config.name" class="form-input" [ngClass]=config.class *ngIf="config.enum">\n                <option value=\'\' [selected]="true">{{ config.placeholder }}</option>\n                <option *ngFor="let o of enumToArray(config.enum)[0]; let i=index"\n                        [value]=\'enumToArray(config.enum)[0][i]\'>\n                        {{ enumToArray(config.enum)[1][i] }}\n                </option>\n        </select>\n    </div>\n</div>'}]}],o.propDecorators={hostClass:[{type:e.HostBinding,args:["class"]}]},o}(),a=function(){function o(){}return Object.defineProperty(o.prototype,"hostClass",{get:function(){return this.config.divClass},enumerable:!0,configurable:!0}),o.prototype.handleFileUpload=function(o){this.formGroup.controls[this.config.name].setValue(this.config.multiple?o.currentTarget.files:o.currentTarget.files[0])},o.decorators=[{type:e.Component,args:[{selector:"form-file-upload",styles:["","input[type=submit]{margin-top:.5rem 1rem}.form-input{height:38px;border-radius:3.5px;background-color:#fff;border:1px solid #bdbdbd;margin-bottom:15px}label{margin-bottom:8px;font-size:16px}"],template:'<div *ngIf=\'!config.hidden\' [formGroup]="formGroup">\n    <label [ngClass]="config.labelClass" *ngIf="config.label && config.label!=\'\'">{{ config.label }}</label>\n    <div class="dynamic-field form-select">\n        <input [disabled]="config.disabled" class="form-input" type=\'file\' (change)=\'handleFileUpload($event)\' [accept]="config.accept" [ngClass]="config.class" [attr.placeholder]="config.placeholder" />\n    </div>\n</div>'}]}],o.propDecorators={hostClass:[{type:e.HostBinding,args:["class"]}]},o}(),c=function(){function o(){}return Object.defineProperty(o.prototype,"hostClass",{get:function(){return this.config.divClass},enumerable:!0,configurable:!0}),o.prototype.ngOnInit=function(){this.formGroup.controls[this.config.name].setValue(new Date,{onlySelf:!0})},o.decorators=[{type:e.Component,args:[{selector:"form-datetime",styles:["","input[type=submit]{margin-top:.5rem 1rem}.form-input{height:38px;border-radius:3.5px;background-color:#fff;border:1px solid #bdbdbd;margin-bottom:15px}label{margin-bottom:8px;font-size:16px}"],template:'<div *ngIf=\'!config.hidden\' [formGroup]="formGroup">\n    <label *ngIf="config.label && config.label!=\'\'">{{ config.label }}</label>\n    <div class="dynamic-field form-datetime">\n        <ng-datepicker class="form-input" [formControlName]="config.name"></ng-datepicker>\n\n    </div>\n</div>'}]}],o.propDecorators={hostClass:[{type:e.HostBinding,args:["class"]}]},o}(),l=function(){function o(o){this.differ=o.find([]).create(null)}return Object.defineProperty(o.prototype,"hostClass",{get:function(){return this.config.divClass},enumerable:!0,configurable:!0}),o.prototype.ngAfterViewInit=function(){},o.prototype.ngDoCheck=function(){var o=this;setTimeout(function(){o.differ.diff(o.btn);document.querySelector("form").className.includes("ng-invalid")&&"submit"===o.config.inputType.toLowerCase()?o.config.disabled=!0:o.config.disabled=!1},10)},o.decorators=[{type:e.Component,args:[{selector:"form-button",styles:[""],template:'<div *ngIf=\'!config.hidden\' class="form-input" [formGroup]="formGroup">\n    <label [ngClass]="config.labelClass" *ngIf="config.label && config.label!=\'\'">{{ config.label }}</label>\n    <div class="dynamic-field form-button">\n        <button [disabled]="config.disabled" [ngClass]="config.class" type="submit">\n        {{ config.text }}\n        </button>\n    </div>\n</div>'}]}],o.ctorParameters=function(){return[{type:e.IterableDiffers}]},o.propDecorators={hostClass:[{type:e.HostBinding,args:["class"]}]},o}(),f=function(){function o(o){this.fb=o,this.config=[],this.submit=new e.EventEmitter}return Object.defineProperty(o.prototype,"controls",{get:function(){return this.config.filter(function(o){return"button"!==o.type})},enumerable:!0,configurable:!0}),Object.defineProperty(o.prototype,"changes",{get:function(){return this.form.valueChanges},enumerable:!0,configurable:!0}),Object.defineProperty(o.prototype,"valid",{get:function(){return this.form.valid},enumerable:!0,configurable:!0}),Object.defineProperty(o.prototype,"value",{get:function(){return this.form.value},enumerable:!0,configurable:!0}),o.prototype.reset=function(){this.form.reset()},o.prototype.ngOnInit=function(){this.form=this.createGroup()},o.prototype.createGroup=function(){var e=this,n=this.fb.group({});return this.config.forEach(function(o){n.addControl(o.name,e.createControl(o))}),n},o.prototype.createControl=function(o){var e=o.disabled,n=o.validation,t=o.value;return this.fb.control({disabled:e,value:t},n)},o.prototype.handleSubmit=function(o){o.preventDefault(),o.stopPropagation(),this.submit.emit(this.value)},o.prototype.setDisabled=function(e,n){if(this.form.controls[e]){var o=n?"disable":"enable";this.form.controls[e][o]()}else this.config=this.config.map(function(o){return o.name===e&&(o.disabled=n),o})},o.prototype.setValue=function(o,e){this.form.controls[o].setValue(e,{emitEvent:!0})},o.decorators=[{type:e.Component,args:[{exportAs:"dynamicForm",selector:"dynamic-form",styles:[".__ngx-form-container{display:flex;flex-wrap:wrap}"],template:'<form [formGroup]="form" #newForm="ngForm" (ngSubmit)="handleSubmit($event)">\n    <div class="__ngx-form-container">\n        <div dynamicField *ngFor="let field of config" [config]="field" [formGroup]="form">\n        </div>\n    </div>\n</form>'}]}],o.ctorParameters=function(){return[{type:n.FormBuilder}]},o.propDecorators={config:[{type:e.Input}],submit:[{type:e.Output}]},o}(),p={button:l,input:i,select:s,file:a,date:c},u=function(){function o(o,e){this.resolver=o,this.vcr=e}return o.prototype.ngOnInit=function(){if(!p[this.config.type]){var o=Object.keys(p).join(", ");throw new Error("Trying to use an unsupported type ("+this.config.type+").\n            Supported types: "+o)}var e=p[this.config.type],n=this.resolver.resolveComponentFactory(e);this.component=this.vcr.createComponent(n),this.component.instance.config=this.config,this.component.instance.formGroup=this.formGroup},o.prototype.ngOnChanges=function(o){this.component&&(this.component.instance.config=this.config,this.component.instance.formGroup=this.formGroup)},o.decorators=[{type:e.Directive,args:[{selector:"[dynamicField]"}]}],o.ctorParameters=function(){return[{type:e.ComponentFactoryResolver},{type:e.ViewContainerRef}]},o.propDecorators={config:[{type:e.Input}],formGroup:[{type:e.Input}]},o}(),m=function(){function o(){}return o.decorators=[{type:e.NgModule,args:[{imports:[t.CommonModule,n.FormsModule,r.NgDatepickerModule,n.ReactiveFormsModule],declarations:[u,f,i,s,a,c,l],providers:[],exports:[r.NgDatepickerModule,f],schemas:[e.CUSTOM_ELEMENTS_SCHEMA],entryComponents:[i,s,a,c,l]}]}],o}();o.FormInputComponent=i,o.FormSelectComponent=s,o.FormFileUploadComponent=a,o.FormDatetimeComponent=c,o.FormButtonComponent=l,o.DynamicFormComponent=f,o.DynamicAddFieldDirective=u,o.DynamicFormModule=m,Object.defineProperty(o,"__esModule",{value:!0})});
//# sourceMappingURL=ngx-dynamic-form.umd.min.js.map