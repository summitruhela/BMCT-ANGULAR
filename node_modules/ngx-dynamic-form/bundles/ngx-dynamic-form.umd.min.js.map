{"version":3,"sources":["ng://ngx-dynamic-form/lib/components/form-input/form-input.component.ts","ng://ngx-dynamic-form/lib/components/select/select.component.ts","ng://ngx-dynamic-form/lib/components/file-upload/file-upload.component.ts","ng://ngx-dynamic-form/lib/components/datetime/datetime.component.ts","ng://ngx-dynamic-form/lib/components/button/button.component.ts","ng://ngx-dynamic-form/lib/containers/dynamic-form/dynamic-form.component.ts","ng://ngx-dynamic-form/lib/directives/dynamic-add-field/dynamic-add-field.component.ts","ng://ngx-dynamic-form/lib/dynamic-form.module.ts"],"names":["FormInputComponent","Object","defineProperty","prototype","this","config","divClass","Component","args","selector","styles","template","HostBinding","FormSelectComponent","enumToArray","arg","numKeyArr","valArr","returnedArray","keys","forEach","key","numberKey","Number","isNaN","push","FormFileUploadComponent","handleFileUpload","event","formGroup","controls","name","setValue","multiple","currentTarget","files","FormDatetimeComponent","ngOnInit","Date","onlySelf","FormButtonComponent","differs","differ","find","create","ngAfterViewInit","ngDoCheck","_this","setTimeout","diff","btn","document","querySelector","className","includes","inputType","toLowerCase","disabled","IterableDiffers","DynamicFormComponent","fb","EventEmitter","filter","_a","type","form","valueChanges","valid","value","reset","createGroup","group","control","addControl","createControl","validation","handleSubmit","preventDefault","stopPropagation","submit","emit","setDisabled","disable","method","map","item","emitEvent","exportAs","FormBuilder","Input","Output","components","button","input","select","file","date","DynamicAddFieldDirective","resolver","vcr","supportedTypes","join","Error","component","factory","resolveComponentFactory","createComponent","instance","ngOnChanges","changes","Directive","ComponentFactoryResolver","ViewContainerRef","DynamicFormModule$$1","NgModule","imports","CommonModule","FormsModule","NgDatepickerModule","ReactiveFormsModule","declarations","providers","exports","schemas","CUSTOM_ELEMENTS_SCHEMA","entryComponents"],"mappings":"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","sourcesContent":["import { Component, HostBinding } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Field } from '../../interfaces/field.interface';\nimport { FieldConfig } from '../../interfaces/field-config.interface';\n\n\n@Component({\n    // tslint:disable-next-line:component-selector\n    selector: 'form-input',\n    styles: [`input[type=submit]{margin-top:.5rem 1rem}.form-input{height:38px;border-radius:3.5px;background-color:#fff;border:1px solid #bdbdbd;margin-bottom:15px}label{margin-bottom:8px;font-size:16px}`, `input[type=submit]{margin-top:.5rem 1rem}.form-input{height:38px;border-radius:3.5px;background-color:#fff;border:1px solid #bdbdbd;margin-bottom:15px}label{margin-bottom:8px;font-size:16px}`],\n    template: `<div *ngIf='!config.hidden' [formGroup]=\"formGroup\">\n    <label [ngClass]=\"config.labelClass\" *ngIf=\"config.label && config.label!=''\">{{ config.label }}</label>\n    <input *ngIf=\"config.type ==='input' && !config.fromEnum \" class=\"form-input\" value={{config.text}} [disabled]=\"config.disabled\" type={{config.inputType}} [ngClass]=\"config.class\" [attr.placeholder]=\"config.placeholder\" [formControlName]=\"config.name\"\n    />\n\n    <select *ngIf=\"config.type==='select' && !config.fromEnum && !config.hidden\" class=\"form-input\" [formControlName]=\"config.name\" [ngClass]=config.class>\n        <option value='' [selected]=\"true\">{{ config.placeholder }}</option>\n        <option value={{option}}\n                *ngFor=\"let option of config.options\">\n                {{option}}\n        </option>\n    </select>\n    <select class=\"form-input\" *ngIf=\"config.type==='select' && config.fromEnum && !config.hidden\" [formControlName]=\"config.name\" [ngClass]=config.class>\n        <option value=\"\" [selected]=\"true\">{{ config.placeholder }}</option>\n        <option value={{config.options[0][i]}}\n                *ngFor=\"let o of config.options[0]; let i=index\">\n                {{ config.options[1][i] }}\n        </option>\n    </select>\n\n    <textarea class=\"form-input\" *ngIf=\"config.type==='textarea' && !config.hidden\" [formControlName]=\"config.name\" [attr.placeholder]=\"config.placeholder\" rows={{config.rows}} cols={{config.cols}}></textarea>\n\n    <ng-datepicker class=\"form-input\" [ngClass]=\"config.class\" *ngIf=\"config.type ==='date'\" [formControlName]=\"config.name\"></ng-datepicker>\n</div>`\n})\n\nexport class FormInputComponent implements Field {\n    config: FieldConfig;\n    formGroup: FormGroup;\n    constructor() { }\n\n    @HostBinding('class')\n    get hostClass(): string {\n            return this.config.divClass;\n        }\n}\n\n","import { Component, HostBinding } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { Field } from '../../interfaces/field.interface';\nimport { FieldConfig } from '../../interfaces/field-config.interface';\n\n@Component({\n  selector: 'form-select',\n  styles: [``, `input[type=submit]{margin-top:.5rem 1rem}.form-input{height:38px;border-radius:3.5px;background-color:#fff;border:1px solid #bdbdbd;margin-bottom:15px}label{margin-bottom:8px;font-size:16px}`],\n  template: `<div *ngIf='!config.hidden' [formGroup]=\"formGroup\">\n    <label [ngClass]=\"config.labelClass\" *ngIf=\"config.label && config.label!=''\">{{ config.label }}</label>\n    <div class=\"dynamic-field form-select\">\n        <select *ngIf=\"!config.enum\" class=\"form-input\" [hidden]='config.hidden' [formControlName]=\"config.name\" [ngClass]=config.class>\n                <option value='' [selected]=\"true\">{{ config.placeholder }}</option>\n                <option *ngFor=\"let option of config.options\"\n                        [value]='option'>\n                        {{option}}\n                </option>\n\n        </select>\n        <select [formControlName]=\"config.name\" class=\"form-input\" [ngClass]=config.class *ngIf=\"config.enum\">\n                <option value='' [selected]=\"true\">{{ config.placeholder }}</option>\n                <option *ngFor=\"let o of enumToArray(config.enum)[0]; let i=index\"\n                        [value]='enumToArray(config.enum)[0][i]'>\n                        {{ enumToArray(config.enum)[1][i] }}\n                </option>\n        </select>\n    </div>\n</div>`\n})\nexport class FormSelectComponent implements Field {\n  config: FieldConfig;\n  formGroup: FormGroup;\n\n  @HostBinding('class')\n    get hostClass(): string {\n            return this.config.divClass;\n        }\n  /**\n   * Converts and Enum Object to an Array \n   * @param arg  Enum\n   * @returns Array<Array<any>>\n   */\n  enumToArray(arg: Object): number[] {\n    const numKeyArr = []; \n    const valArr = []; \n    const returnedArray = [];\n\n    const objKeys = Object.keys(arg);\n      objKeys.forEach(key => {\n        const numberKey = Number(key)\n        if(!isNaN(numberKey)){\n        numKeyArr.push(numberKey);\n        } else {\n            valArr.push(key)\n        };\n    });\n\n    returnedArray[0] = numKeyArr;\n    returnedArray[1] = valArr;\n    return returnedArray;\n  }\n\n}\n\n\ninterface SelectConfig extends FieldConfig{\n    enum: boolean,\n    options?: string[]\n}","import { Component, HostBinding } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\n\nimport { Field } from '../../interfaces/field.interface';\nimport { FieldConfig } from '../../interfaces/field-config.interface';\n\n@Component({\n  selector: 'form-file-upload',\n  styles: [``, `input[type=submit]{margin-top:.5rem 1rem}.form-input{height:38px;border-radius:3.5px;background-color:#fff;border:1px solid #bdbdbd;margin-bottom:15px}label{margin-bottom:8px;font-size:16px}`],\n  template: `<div *ngIf='!config.hidden' [formGroup]=\"formGroup\">\n    <label [ngClass]=\"config.labelClass\" *ngIf=\"config.label && config.label!=''\">{{ config.label }}</label>\n    <div class=\"dynamic-field form-select\">\n        <input [disabled]=\"config.disabled\" class=\"form-input\" type='file' (change)='handleFileUpload($event)' [accept]=\"config.accept\" [ngClass]=\"config.class\" [attr.placeholder]=\"config.placeholder\" />\n    </div>\n</div>`\n})\nexport class FormFileUploadComponent implements Field {\n  config: FileConfig;\n  formGroup: FormGroup;\n\n  @HostBinding('class')\n    get hostClass(): string {\n            return this.config.divClass;\n        }\n\n  handleFileUpload(event){\n    (<FormControl>this.formGroup.controls[this.config.name])\n    .setValue(this.config.multiple?  event.currentTarget.files: event.currentTarget.files[0]);\n    }\n\n}\n\nexport interface FileConfig extends FieldConfig{\n      multiple: boolean,\n      accept: string,\n\n}","import { Component, HostBinding } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\n\nimport { Field } from '../../interfaces/field.interface';\nimport { FieldConfig } from '../../interfaces/field-config.interface';\nimport { OnInit } from '@angular/core/src/metadata/lifecycle_hooks';\n\n@Component({\n  selector: 'form-datetime',\n  styles: [``, `input[type=submit]{margin-top:.5rem 1rem}.form-input{height:38px;border-radius:3.5px;background-color:#fff;border:1px solid #bdbdbd;margin-bottom:15px}label{margin-bottom:8px;font-size:16px}`],\n  template: `<div *ngIf='!config.hidden' [formGroup]=\"formGroup\">\n    <label *ngIf=\"config.label && config.label!=''\">{{ config.label }}</label>\n    <div class=\"dynamic-field form-datetime\">\n        <ng-datepicker class=\"form-input\" [formControlName]=\"config.name\"></ng-datepicker>\n\n    </div>\n</div>`\n})\nexport class FormDatetimeComponent implements Field, OnInit {\n  \n  config: FieldConfig;\n  formGroup: FormGroup;\n\n  @HostBinding('class')\n    get hostClass(): string {\n            return this.config.divClass;\n        }\n\n  ngOnInit(): void {\n    (<FormControl>this.formGroup.controls[this.config.name])\n    .setValue(new Date(), { onlySelf: true });\n  }\n}","import { Component, ElementRef, IterableDiffers, AfterViewInit, DoCheck, HostBinding } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { Field } from '../../interfaces/field.interface';\nimport { FieldConfig } from '../../interfaces/field-config.interface';\n\n@Component({\n  selector: 'form-button',\n  styles: [``],\n  template: `<div *ngIf='!config.hidden' class=\"form-input\" [formGroup]=\"formGroup\">\n    <label [ngClass]=\"config.labelClass\" *ngIf=\"config.label && config.label!=''\">{{ config.label }}</label>\n    <div class=\"dynamic-field form-button\">\n        <button [disabled]=\"config.disabled\" [ngClass]=\"config.class\" type=\"submit\">\n        {{ config.text }}\n        </button>\n    </div>\n</div>`\n})\nexport class FormButtonComponent implements Field, AfterViewInit, DoCheck {\n  config: FieldConfig;\n  formGroup: FormGroup;\n  differ: any;\n  btn: any;\n\n  constructor(\n    differs: IterableDiffers) {\n      this.differ = differs.find([]).create(null);\n}\n\n\n@HostBinding('class')\nget hostClass(): string {\n        return this.config.divClass;\n    }\n\n  ngAfterViewInit() {\n  }\n\n  ngDoCheck() {\n      setTimeout(() => {\n      const change = this.differ.diff(this.btn);\n      if (document.querySelector('form').className.includes('ng-invalid')\n          && this.config.inputType.toLowerCase() === 'submit') {\n            this.config.disabled = true;\n      } else {\n        this.config.disabled = false;\n      }\n    }, 10 );\n  }\n}\n","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { FieldConfig } from '../../interfaces/field-config.interface';\nimport { Observable } from 'rxjs';\n\n@Component({\n    exportAs: 'dynamicForm',\n    // tslint:disable-next-line:component-selector\n    selector: 'dynamic-form',\n    styles: [`.__ngx-form-container{display:flex;flex-wrap:wrap}`],\n    template: `<form [formGroup]=\"form\" #newForm=\"ngForm\" (ngSubmit)=\"handleSubmit($event)\">\n    <div class=\"__ngx-form-container\">\n        <div dynamicField *ngFor=\"let field of config\" [config]=\"field\" [formGroup]=\"form\">\n        </div>\n    </div>\n</form>`\n})\n\nexport class DynamicFormComponent implements OnInit {\n    @Input() config: FieldConfig[] = [];\n    field;\n\n    @Output()  submit: EventEmitter<any> = new EventEmitter<any>();\n    form: FormGroup;\n\n    get controls() { return this.config.filter(({type}) => type !== 'button'); }\n    get changes() { return this.form.valueChanges; }\n    get valid() { return this.form.valid; }\n    get value() { return this.form.value; }\n    reset(){ this.form.reset()}\n\n    constructor(private fb: FormBuilder) {\n    }\n\n    ngOnInit() {\n        this.form = this.createGroup();\n    \n    }\n\n\n     /**\n      * Create FormGroup for the Form to be generated\n      */\n    private createGroup(): FormGroup {\n        const formGroup = this.fb.group({});\n        this.config.forEach(control => {\n            formGroup.addControl(control.name, this.createControl(control));\n        })\n        return formGroup;\n    }\n\n     /**\n      * Create Form Control in FormBuilder\n      * @param config \n      */\n    private createControl(config: FieldConfig) {\n        const { disabled, validation, value } = config;\n        return this.fb.control({ disabled, value }, validation);\n    }\n\n\n\n    /**\n     * Handle Form Submit\n     * @param event \n     */\n    handleSubmit(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.submit.emit(this.value);\n    }\n\n\n/**\n * Disables an element in the form\n * @param name \n * @param disable \n */\n    setDisabled(name: string, disable: boolean) {\n        if (this.form.controls[name]) {\n        const method = disable ? 'disable' : 'enable';\n        this.form.controls[name][method]();\n        return;\n        }\n\n        this.config = this.config.map((item) => {\n            if (item.name === name) {\n                item.disabled = disable;\n            }\n            return item;\n        });\n    }\n\n    /**\n     * Sets value of a Form control/element\n     * @param name \n     * @param value \n     */\n    setValue(name: string, value: any) {\n    this.form.controls[name].setValue(value, {emitEvent: true});\n    }\n}\n","import { Directive,\n        Input,\n        ViewContainerRef,\n        ComponentFactoryResolver,\n        OnInit, OnChanges, SimpleChanges,\n        ComponentRef, \n        Type} from '@angular/core';\n\nimport { FormGroup } from '@angular/forms'\n\nimport { Field } from '../../interfaces/field.interface';\nimport { FieldConfig} from '../../interfaces/field-config.interface';\n\nimport { FormInputComponent } from '../../components/form-input/form-input.component';\nimport { FormButtonComponent } from '../../components/button/button.component';\nimport { FormSelectComponent } from '../../components/select/select.component';\nimport { FormFileUploadComponent } from '../../components/file-upload/file-upload.component';\nimport { FormDatetimeComponent } from '../../components/datetime/datetime.component';\n\nconst components: {[type: string]: Type<Field>} = {\n  button: FormButtonComponent,\n  input: FormInputComponent,\n  select: FormSelectComponent,\n  file: FormFileUploadComponent,\n  date: FormDatetimeComponent\n};\n\n// tslint:disable-next-line:directive-selector\n@Directive({ selector: '[dynamicField]' })\nexport class DynamicAddFieldDirective implements OnInit, Field, OnChanges {\n\n  @Input() config;\n  @Input() formGroup: FormGroup;\n\n  component: ComponentRef<Field>;\n\n    constructor(private resolver: ComponentFactoryResolver,\n                private vcr: ViewContainerRef) {\n\n                }\n    ngOnInit(): void {\n      if (!components[this.config.type]) {\n          const supportedTypes = Object.keys(components).join(', ');\n          throw new Error(\n            `Trying to use an unsupported type (${this.config.type}).\n            Supported types: ${supportedTypes}`\n          );\n        }\n\n        const component = components[this.config.type];\n        const factory = this.resolver.resolveComponentFactory<Field>(component);\n        this.component = this.vcr.createComponent(factory);\n        this.component.instance.config = this.config;\n        this.component.instance.formGroup = this.formGroup;\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n    if (this.component)  {\n        this.component.instance.config = this.config;\n        this.component.instance.formGroup = this.formGroup;\n    }\n  }\n}\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { NgDatepickerModule } from 'ng2-datepicker';\n\nimport { DynamicFormComponent } from './containers/dynamic-form/dynamic-form.component';\n\nimport { FormInputComponent } from './components/form-input/form-input.component';\nimport {DynamicAddFieldDirective} from './directives/dynamic-add-field/dynamic-add-field.component';\nimport { FormSelectComponent, FormFileUploadComponent, FormDatetimeComponent, FormButtonComponent } from '../public_api';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    NgDatepickerModule,\n    ReactiveFormsModule\n  ],\n  declarations: [\n      DynamicAddFieldDirective,\n      DynamicFormComponent,\n      FormInputComponent,\n      FormSelectComponent,\n      FormFileUploadComponent,\n      FormDatetimeComponent,\n      FormButtonComponent\n  ],\n  providers: [\n  ],\n  exports: [\n    NgDatepickerModule,\n    DynamicFormComponent\n  ], schemas: [\n    CUSTOM_ELEMENTS_SCHEMA\n],\n  entryComponents: [\n    FormInputComponent,\n    FormSelectComponent,\n    FormFileUploadComponent,\n    FormDatetimeComponent,\n    FormButtonComponent\n  ]\n})\nexport class DynamicFormModule {}\n"]}