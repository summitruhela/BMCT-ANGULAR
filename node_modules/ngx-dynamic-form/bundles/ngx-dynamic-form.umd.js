(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/common'), require('ng2-datepicker')) :
    typeof define === 'function' && define.amd ? define('ngx-dynamic-form', ['exports', '@angular/core', '@angular/forms', '@angular/common', 'ng2-datepicker'], factory) :
    (factory((global['ngx-dynamic-form'] = {}),global.ng.core,global.ng.forms,global.ng.common,null));
}(this, (function (exports,core,forms,common,ng2Datepicker) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FormInputComponent = (function () {
        function FormInputComponent() {
        }
        Object.defineProperty(FormInputComponent.prototype, "hostClass", {
            get: /**
             * @return {?}
             */ function () {
                return this.config.divClass;
            },
            enumerable: true,
            configurable: true
        });
        FormInputComponent.decorators = [
            { type: core.Component, args: [{
                        // tslint:disable-next-line:component-selector
                        selector: 'form-input',
                        styles: ["input[type=submit]{margin-top:.5rem 1rem}.form-input{height:38px;border-radius:3.5px;background-color:#fff;border:1px solid #bdbdbd;margin-bottom:15px}label{margin-bottom:8px;font-size:16px}", "input[type=submit]{margin-top:.5rem 1rem}.form-input{height:38px;border-radius:3.5px;background-color:#fff;border:1px solid #bdbdbd;margin-bottom:15px}label{margin-bottom:8px;font-size:16px}"],
                        template: "<div *ngIf='!config.hidden' [formGroup]=\"formGroup\">\n    <label [ngClass]=\"config.labelClass\" *ngIf=\"config.label && config.label!=''\">{{ config.label }}</label>\n    <input *ngIf=\"config.type ==='input' && !config.fromEnum \" class=\"form-input\" value={{config.text}} [disabled]=\"config.disabled\" type={{config.inputType}} [ngClass]=\"config.class\" [attr.placeholder]=\"config.placeholder\" [formControlName]=\"config.name\"\n    />\n\n    <select *ngIf=\"config.type==='select' && !config.fromEnum && !config.hidden\" class=\"form-input\" [formControlName]=\"config.name\" [ngClass]=config.class>\n        <option value='' [selected]=\"true\">{{ config.placeholder }}</option>\n        <option value={{option}}\n                *ngFor=\"let option of config.options\">\n                {{option}}\n        </option>\n    </select>\n    <select class=\"form-input\" *ngIf=\"config.type==='select' && config.fromEnum && !config.hidden\" [formControlName]=\"config.name\" [ngClass]=config.class>\n        <option value=\"\" [selected]=\"true\">{{ config.placeholder }}</option>\n        <option value={{config.options[0][i]}}\n                *ngFor=\"let o of config.options[0]; let i=index\">\n                {{ config.options[1][i] }}\n        </option>\n    </select>\n\n    <textarea class=\"form-input\" *ngIf=\"config.type==='textarea' && !config.hidden\" [formControlName]=\"config.name\" [attr.placeholder]=\"config.placeholder\" rows={{config.rows}} cols={{config.cols}}></textarea>\n\n    <ng-datepicker class=\"form-input\" [ngClass]=\"config.class\" *ngIf=\"config.type ==='date'\" [formControlName]=\"config.name\"></ng-datepicker>\n</div>"
                    },] },
        ];
        /** @nocollapse */
        FormInputComponent.ctorParameters = function () { return []; };
        FormInputComponent.propDecorators = {
            hostClass: [{ type: core.HostBinding, args: ['class',] }]
        };
        return FormInputComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FormSelectComponent = (function () {
        function FormSelectComponent() {
        }
        Object.defineProperty(FormSelectComponent.prototype, "hostClass", {
            get: /**
             * @return {?}
             */ function () {
                return this.config.divClass;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Converts and Enum Object to an Array
         * @param arg  Enum
         * @returns Array<Array<any>>
         */
        /**
         * Converts and Enum Object to an Array
         * @param {?} arg  Enum
         * @return {?} Array<Array<any>>
         */
        FormSelectComponent.prototype.enumToArray = /**
         * Converts and Enum Object to an Array
         * @param {?} arg  Enum
         * @return {?} Array<Array<any>>
         */
            function (arg) {
                /** @type {?} */
                var numKeyArr = [];
                /** @type {?} */
                var valArr = [];
                /** @type {?} */
                var returnedArray = [];
                /** @type {?} */
                var objKeys = Object.keys(arg);
                objKeys.forEach(function (key) {
                    /** @type {?} */
                    var numberKey = Number(key);
                    if (!isNaN(numberKey)) {
                        numKeyArr.push(numberKey);
                    }
                    else {
                        valArr.push(key);
                    }
                });
                returnedArray[0] = numKeyArr;
                returnedArray[1] = valArr;
                return returnedArray;
            };
        FormSelectComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'form-select',
                        styles: ["", "input[type=submit]{margin-top:.5rem 1rem}.form-input{height:38px;border-radius:3.5px;background-color:#fff;border:1px solid #bdbdbd;margin-bottom:15px}label{margin-bottom:8px;font-size:16px}"],
                        template: "<div *ngIf='!config.hidden' [formGroup]=\"formGroup\">\n    <label [ngClass]=\"config.labelClass\" *ngIf=\"config.label && config.label!=''\">{{ config.label }}</label>\n    <div class=\"dynamic-field form-select\">\n        <select *ngIf=\"!config.enum\" class=\"form-input\" [hidden]='config.hidden' [formControlName]=\"config.name\" [ngClass]=config.class>\n                <option value='' [selected]=\"true\">{{ config.placeholder }}</option>\n                <option *ngFor=\"let option of config.options\"\n                        [value]='option'>\n                        {{option}}\n                </option>\n\n        </select>\n        <select [formControlName]=\"config.name\" class=\"form-input\" [ngClass]=config.class *ngIf=\"config.enum\">\n                <option value='' [selected]=\"true\">{{ config.placeholder }}</option>\n                <option *ngFor=\"let o of enumToArray(config.enum)[0]; let i=index\"\n                        [value]='enumToArray(config.enum)[0][i]'>\n                        {{ enumToArray(config.enum)[1][i] }}\n                </option>\n        </select>\n    </div>\n</div>"
                    },] },
        ];
        FormSelectComponent.propDecorators = {
            hostClass: [{ type: core.HostBinding, args: ['class',] }]
        };
        return FormSelectComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FormFileUploadComponent = (function () {
        function FormFileUploadComponent() {
        }
        Object.defineProperty(FormFileUploadComponent.prototype, "hostClass", {
            get: /**
             * @return {?}
             */ function () {
                return this.config.divClass;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} event
         * @return {?}
         */
        FormFileUploadComponent.prototype.handleFileUpload = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                ((this.formGroup.controls[this.config.name]))
                    .setValue(this.config.multiple ? event.currentTarget.files : event.currentTarget.files[0]);
            };
        FormFileUploadComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'form-file-upload',
                        styles: ["", "input[type=submit]{margin-top:.5rem 1rem}.form-input{height:38px;border-radius:3.5px;background-color:#fff;border:1px solid #bdbdbd;margin-bottom:15px}label{margin-bottom:8px;font-size:16px}"],
                        template: "<div *ngIf='!config.hidden' [formGroup]=\"formGroup\">\n    <label [ngClass]=\"config.labelClass\" *ngIf=\"config.label && config.label!=''\">{{ config.label }}</label>\n    <div class=\"dynamic-field form-select\">\n        <input [disabled]=\"config.disabled\" class=\"form-input\" type='file' (change)='handleFileUpload($event)' [accept]=\"config.accept\" [ngClass]=\"config.class\" [attr.placeholder]=\"config.placeholder\" />\n    </div>\n</div>"
                    },] },
        ];
        FormFileUploadComponent.propDecorators = {
            hostClass: [{ type: core.HostBinding, args: ['class',] }]
        };
        return FormFileUploadComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FormDatetimeComponent = (function () {
        function FormDatetimeComponent() {
        }
        Object.defineProperty(FormDatetimeComponent.prototype, "hostClass", {
            get: /**
             * @return {?}
             */ function () {
                return this.config.divClass;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        FormDatetimeComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                ((this.formGroup.controls[this.config.name]))
                    .setValue(new Date(), { onlySelf: true });
            };
        FormDatetimeComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'form-datetime',
                        styles: ["", "input[type=submit]{margin-top:.5rem 1rem}.form-input{height:38px;border-radius:3.5px;background-color:#fff;border:1px solid #bdbdbd;margin-bottom:15px}label{margin-bottom:8px;font-size:16px}"],
                        template: "<div *ngIf='!config.hidden' [formGroup]=\"formGroup\">\n    <label *ngIf=\"config.label && config.label!=''\">{{ config.label }}</label>\n    <div class=\"dynamic-field form-datetime\">\n        <ng-datepicker class=\"form-input\" [formControlName]=\"config.name\"></ng-datepicker>\n\n    </div>\n</div>"
                    },] },
        ];
        FormDatetimeComponent.propDecorators = {
            hostClass: [{ type: core.HostBinding, args: ['class',] }]
        };
        return FormDatetimeComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FormButtonComponent = (function () {
        function FormButtonComponent(differs) {
            this.differ = differs.find([]).create(null);
        }
        Object.defineProperty(FormButtonComponent.prototype, "hostClass", {
            get: /**
             * @return {?}
             */ function () {
                return this.config.divClass;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        FormButtonComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        FormButtonComponent.prototype.ngDoCheck = /**
         * @return {?}
         */
            function () {
                var _this = this;
                setTimeout(function () {
                    /** @type {?} */
                    var change = _this.differ.diff(_this.btn);
                    if (document.querySelector('form').className.includes('ng-invalid')
                        && _this.config.inputType.toLowerCase() === 'submit') {
                        _this.config.disabled = true;
                    }
                    else {
                        _this.config.disabled = false;
                    }
                }, 10);
            };
        FormButtonComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'form-button',
                        styles: [""],
                        template: "<div *ngIf='!config.hidden' class=\"form-input\" [formGroup]=\"formGroup\">\n    <label [ngClass]=\"config.labelClass\" *ngIf=\"config.label && config.label!=''\">{{ config.label }}</label>\n    <div class=\"dynamic-field form-button\">\n        <button [disabled]=\"config.disabled\" [ngClass]=\"config.class\" type=\"submit\">\n        {{ config.text }}\n        </button>\n    </div>\n</div>"
                    },] },
        ];
        /** @nocollapse */
        FormButtonComponent.ctorParameters = function () {
            return [
                { type: core.IterableDiffers }
            ];
        };
        FormButtonComponent.propDecorators = {
            hostClass: [{ type: core.HostBinding, args: ['class',] }]
        };
        return FormButtonComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DynamicFormComponent = (function () {
        function DynamicFormComponent(fb) {
            this.fb = fb;
            this.config = [];
            this.submit = new core.EventEmitter();
        }
        Object.defineProperty(DynamicFormComponent.prototype, "controls", {
            get: /**
             * @return {?}
             */ function () {
                return this.config.filter(function (_a) {
                    var type = _a.type;
                    return type !== 'button';
                });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicFormComponent.prototype, "changes", {
            get: /**
             * @return {?}
             */ function () { return this.form.valueChanges; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicFormComponent.prototype, "valid", {
            get: /**
             * @return {?}
             */ function () { return this.form.valid; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DynamicFormComponent.prototype, "value", {
            get: /**
             * @return {?}
             */ function () { return this.form.value; },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        DynamicFormComponent.prototype.reset = /**
         * @return {?}
         */
            function () { this.form.reset(); };
        /**
         * @return {?}
         */
        DynamicFormComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.form = this.createGroup();
            };
        /**
         * Create FormGroup for the Form to be generated
         * @return {?}
         */
        DynamicFormComponent.prototype.createGroup = /**
         * Create FormGroup for the Form to be generated
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var formGroup = this.fb.group({});
                this.config.forEach(function (control) {
                    formGroup.addControl(control.name, _this.createControl(control));
                });
                return formGroup;
            };
        /**
         * Create Form Control in FormBuilder
         * @param {?} config
         * @return {?}
         */
        DynamicFormComponent.prototype.createControl = /**
         * Create Form Control in FormBuilder
         * @param {?} config
         * @return {?}
         */
            function (config) {
                var disabled = config.disabled, validation = config.validation, value = config.value;
                return this.fb.control({ disabled: disabled, value: value }, validation);
            };
        /**
         * Handle Form Submit
         * @param event
         */
        /**
         * Handle Form Submit
         * @param {?} event
         * @return {?}
         */
        DynamicFormComponent.prototype.handleSubmit = /**
         * Handle Form Submit
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.preventDefault();
                event.stopPropagation();
                this.submit.emit(this.value);
            };
        /**
         * Disables an element in the form
         * @param name
         * @param disable
         */
        /**
         * Disables an element in the form
         * @param {?} name
         * @param {?} disable
         * @return {?}
         */
        DynamicFormComponent.prototype.setDisabled = /**
         * Disables an element in the form
         * @param {?} name
         * @param {?} disable
         * @return {?}
         */
            function (name, disable) {
                if (this.form.controls[name]) {
                    /** @type {?} */
                    var method = disable ? 'disable' : 'enable';
                    this.form.controls[name][method]();
                    return;
                }
                this.config = this.config.map(function (item) {
                    if (item.name === name) {
                        item.disabled = disable;
                    }
                    return item;
                });
            };
        /**
         * Sets value of a Form control/element
         * @param name
         * @param value
         */
        /**
         * Sets value of a Form control/element
         * @param {?} name
         * @param {?} value
         * @return {?}
         */
        DynamicFormComponent.prototype.setValue = /**
         * Sets value of a Form control/element
         * @param {?} name
         * @param {?} value
         * @return {?}
         */
            function (name, value) {
                this.form.controls[name].setValue(value, { emitEvent: true });
            };
        DynamicFormComponent.decorators = [
            { type: core.Component, args: [{
                        exportAs: 'dynamicForm',
                        // tslint:disable-next-line:component-selector
                        selector: 'dynamic-form',
                        styles: [".__ngx-form-container{display:flex;flex-wrap:wrap}"],
                        template: "<form [formGroup]=\"form\" #newForm=\"ngForm\" (ngSubmit)=\"handleSubmit($event)\">\n    <div class=\"__ngx-form-container\">\n        <div dynamicField *ngFor=\"let field of config\" [config]=\"field\" [formGroup]=\"form\">\n        </div>\n    </div>\n</form>"
                    },] },
        ];
        /** @nocollapse */
        DynamicFormComponent.ctorParameters = function () {
            return [
                { type: forms.FormBuilder }
            ];
        };
        DynamicFormComponent.propDecorators = {
            config: [{ type: core.Input }],
            submit: [{ type: core.Output }]
        };
        return DynamicFormComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @type {?} */
    var components = {
        button: FormButtonComponent,
        input: FormInputComponent,
        select: FormSelectComponent,
        file: FormFileUploadComponent,
        date: FormDatetimeComponent
    };
    var DynamicAddFieldDirective = (function () {
        function DynamicAddFieldDirective(resolver, vcr) {
            this.resolver = resolver;
            this.vcr = vcr;
        }
        /**
         * @return {?}
         */
        DynamicAddFieldDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (!components[this.config.type]) {
                    /** @type {?} */
                    var supportedTypes = Object.keys(components).join(', ');
                    throw new Error("Trying to use an unsupported type (" + this.config.type + ").\n            Supported types: " + supportedTypes);
                }
                /** @type {?} */
                var component = components[this.config.type];
                /** @type {?} */
                var factory = this.resolver.resolveComponentFactory(component);
                this.component = this.vcr.createComponent(factory);
                this.component.instance.config = this.config;
                this.component.instance.formGroup = this.formGroup;
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        DynamicAddFieldDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (this.component) {
                    this.component.instance.config = this.config;
                    this.component.instance.formGroup = this.formGroup;
                }
            };
        DynamicAddFieldDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[dynamicField]' },] },
        ];
        /** @nocollapse */
        DynamicAddFieldDirective.ctorParameters = function () {
            return [
                { type: core.ComponentFactoryResolver },
                { type: core.ViewContainerRef }
            ];
        };
        DynamicAddFieldDirective.propDecorators = {
            config: [{ type: core.Input }],
            formGroup: [{ type: core.Input }]
        };
        return DynamicAddFieldDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DynamicFormModule$$1 = (function () {
        function DynamicFormModule$$1() {
        }
        DynamicFormModule$$1.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            ng2Datepicker.NgDatepickerModule,
                            forms.ReactiveFormsModule
                        ],
                        declarations: [
                            DynamicAddFieldDirective,
                            DynamicFormComponent,
                            FormInputComponent,
                            FormSelectComponent,
                            FormFileUploadComponent,
                            FormDatetimeComponent,
                            FormButtonComponent
                        ],
                        providers: [],
                        exports: [
                            ng2Datepicker.NgDatepickerModule,
                            DynamicFormComponent
                        ], schemas: [
                            core.CUSTOM_ELEMENTS_SCHEMA
                        ],
                        entryComponents: [
                            FormInputComponent,
                            FormSelectComponent,
                            FormFileUploadComponent,
                            FormDatetimeComponent,
                            FormButtonComponent
                        ]
                    },] },
        ];
        return DynamicFormModule$$1;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.FormInputComponent = FormInputComponent;
    exports.FormSelectComponent = FormSelectComponent;
    exports.FormFileUploadComponent = FormFileUploadComponent;
    exports.FormDatetimeComponent = FormDatetimeComponent;
    exports.FormButtonComponent = FormButtonComponent;
    exports.DynamicFormComponent = DynamicFormComponent;
    exports.DynamicAddFieldDirective = DynamicAddFieldDirective;
    exports.DynamicFormModule = DynamicFormModule$$1;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,